   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 23, 1
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.thumb
  12              		.file	"stm32f4xx_usart.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.USART_DeInit,"ax",%progbits
  17              		.align	2
  18              		.global	USART_DeInit
  19              		.thumb
  20              		.thumb_func
  22              	USART_DeInit:
  23              	.LFB110:
  24              		.file 1 "../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c"
   1:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
   2:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
   3:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @file    stm32f4xx_usart.c
   4:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @author  MCD Application Team
   5:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @version V1.0.2
   6:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @date    05-March-2012
   7:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          transmitter (USART):           
  10:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Initialization and Configuration
  11:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Data transfers
  12:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Multi-Processor Communication
  13:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - LIN mode
  14:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Half-duplex mode
  15:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Smartcard mode
  16:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - IrDA mode
  17:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - DMA transfers management
  18:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Interrupts and flags management 
  19:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           
  20:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @verbatim
  21:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *      
  22:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  23:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                                 How to use this driver
  24:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  25:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          1. Enable peripheral clock using the follwoing functions
  26:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_USARTx, ENABLE) for USART1 and USART6 
  27:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE) for USART2, USART3, UART4 or 
  28:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  29:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          2.  According to the USART mode, enable the GPIO clocks using 
  30:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              RCC_AHB1PeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  31:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              or/and SCLK). 
  32:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  33:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          3. Peripheral's alternate function: 
  34:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  35:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  36:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Configure the desired pin in alternate function by:
  37:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  38:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  39:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  40:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Call GPIO_Init() function
  41:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  42:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          4. Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  43:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             flow control and Mode(Receiver/Transmitter) using the USART_Init()
  44:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             function.
  45:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  46:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. For synchronous mode, enable the clock and program the polarity,
  47:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             phase and last bit using the USART_ClockInit() function.
  48:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  49:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. Enable the NVIC and the corresponding interrupt using the function 
  50:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             USART_ITConfig() if you need to use interrupt mode. 
  51:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  52:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          6. When using the DMA mode 
  53:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Configure the DMA using DMA_Init() function
  54:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Active the needed channel Request using USART_DMACmd() function
  55:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  56:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          7. Enable the USART using the USART_Cmd() function.
  57:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  58:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          8. Enable the DMA using the DMA_Cmd() function, when using DMA mode. 
  59:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  60:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  61:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          for more details
  62:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  63:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          In order to reach higher communication baudrates, it is possible to
  64:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          enable the oversampling by 8 mode using the function USART_OverSampling8Cmd().
  65:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This function should be called after enabling the USART clock (RCC_APBxPeriphClockCmd(
  66:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          and before calling the function USART_Init().
  67:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  68:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @endverbatim
  69:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  70:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
  71:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @attention
  72:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  73:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  74:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  75:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  76:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * You may not use this file except in compliance with the License.
  77:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * You may obtain a copy of the License at:
  78:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  79:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  80:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  81:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * Unless required by applicable law or agreed to in writing, software 
  82:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  83:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  84:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * See the License for the specific language governing permissions and
  85:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * limitations under the License.
  86:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  87:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
  88:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */ 
  89:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  90:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  91:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_usart.h"
  92:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_rcc.h"
  93:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  94:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  95:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  96:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  97:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  98:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART 
  99:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief USART driver modules
 100:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 101:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 102:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 103:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
 104:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private define ------------------------------------------------------------*/
 105:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 106:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint16_t)0xE9F3)) */
 107:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR1_CLEAR_MASK            ((uint16_t)(USART_CR1_M | USART_CR1_PCE | \
 108:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
 109:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_RE))
 110:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 111:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint16_t)0xF0FF)) */
 112:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint16_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 113:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 114:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 115:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint16_t)0xFCFF)) */
 116:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR3_CLEAR_MASK            ((uint16_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 117:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 118:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART Interrupts mask */
 119:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define IT_MASK                   ((uint16_t)0x001F)
 120:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 121:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 122:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 123:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 124:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 125:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 126:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Private_Functions
 127:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 128:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 129:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 130:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 131:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 132:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 133:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 134:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 135:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                   Initialization and Configuration functions
 136:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 137:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 138:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to initialize the USART 
 139:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   in asynchronous and in synchronous modes.
 140:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    - For the asynchronous mode only these parameters can be configured: 
 141:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Baud Rate
 142:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length 
 143:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Stop Bit
 144:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Parity: If the parity is enabled, then the MSB bit of the data written
 145:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           in the data register is transmitted but is changed by the parity bit.
 146:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           Depending on the frame length defined by the M bit (8-bits or 9-bits),
 147:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           the possible USART frame formats are as listed in the following table:
 148:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+     
 149:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 150:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------------------|---------------------------------------|             
 151:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 152:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 153:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 154:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 155:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 156:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 157:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 158:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+            
 159:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control
 160:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Receiver/transmitter modes
 161:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 162:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART_Init() function follows the USART  asynchronous configuration procedure
 163:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   (details for the procedure are available in reference manual (RM0090)).
 164:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 165:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   - For the synchronous mode in addition to the asynchronous mode parameters these 
 166:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     parameters should be also configured:
 167:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock Enabled
 168:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART polarity
 169:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART phase
 170:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART LastBit
 171:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 172:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   These parameters can be configured using the USART_ClockInit() function.
 173:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 174:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 175:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 176:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 177:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 178:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 179:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 180:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 181:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 182:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 183:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 184:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 185:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
  25              		.loc 1 185 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
  30 0000 08B5     		push	{r3, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 3, -8
  34              		.cfi_offset 14, -4
 186:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 187:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 188:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 189:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USARTx == USART1)
  35              		.loc 1 189 0
  36 0002 2B4B     		ldr	r3, .L15
  37 0004 9842     		cmp	r0, r3
  38 0006 19D0     		beq	.L9
 190:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 191:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 192:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 193:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 194:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART2)
  39              		.loc 1 194 0
  40 0008 2A4B     		ldr	r3, .L15+4
  41 000a 9842     		cmp	r0, r3
  42 000c 20D0     		beq	.L10
 195:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 196:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 197:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 198:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 199:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART3)
  43              		.loc 1 199 0
  44 000e 2A4B     		ldr	r3, .L15+8
  45 0010 9842     		cmp	r0, r3
  46 0012 29D0     		beq	.L11
 200:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 201:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 202:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 203:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }    
 204:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART4)
  47              		.loc 1 204 0
  48 0014 294B     		ldr	r3, .L15+12
  49 0016 9842     		cmp	r0, r3
  50 0018 32D0     		beq	.L12
 205:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 206:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 207:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 208:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 209:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART5)
  51              		.loc 1 209 0
  52 001a 294B     		ldr	r3, .L15+16
  53 001c 9842     		cmp	r0, r3
  54 001e 3BD0     		beq	.L13
 210:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 211:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 212:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 213:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }     
 214:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 215:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 216:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     if (USARTx == USART6)
  55              		.loc 1 216 0
  56 0020 284B     		ldr	r3, .L15+20
  57 0022 9842     		cmp	r0, r3
  58 0024 00D0     		beq	.L14
  59 0026 08BD     		pop	{r3, pc}
  60              	.L14:
 217:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     { 
 218:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
  61              		.loc 1 218 0
  62 0028 2020     		movs	r0, #32
  63              	.LVL1:
  64 002a 0121     		movs	r1, #1
  65 002c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  66              	.LVL2:
 219:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
  67              		.loc 1 219 0
  68 0030 2020     		movs	r0, #32
  69 0032 0021     		movs	r1, #0
 220:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     }
 221:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 222:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
  70              		.loc 1 222 0
  71 0034 BDE80840 		pop	{r3, lr}
 219:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
  72              		.loc 1 219 0
  73 0038 FFF7FEBF 		b	RCC_APB2PeriphResetCmd
  74              	.LVL3:
  75              	.L9:
 191:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
  76              		.loc 1 191 0
  77 003c 1020     		movs	r0, #16
  78              	.LVL4:
  79 003e 0121     		movs	r1, #1
  80 0040 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  81              	.LVL5:
 192:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  82              		.loc 1 192 0
  83 0044 1020     		movs	r0, #16
  84 0046 0021     		movs	r1, #0
  85              		.loc 1 222 0
  86 0048 BDE80840 		pop	{r3, lr}
 192:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  87              		.loc 1 192 0
  88 004c FFF7FEBF 		b	RCC_APB2PeriphResetCmd
  89              	.LVL6:
  90              	.L10:
 196:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
  91              		.loc 1 196 0
  92 0050 4FF40030 		mov	r0, #131072
  93              	.LVL7:
  94 0054 0121     		movs	r1, #1
  95 0056 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  96              	.LVL8:
 197:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  97              		.loc 1 197 0
  98 005a 4FF40030 		mov	r0, #131072
  99 005e 0021     		movs	r1, #0
 100              		.loc 1 222 0
 101 0060 BDE80840 		pop	{r3, lr}
 197:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 102              		.loc 1 197 0
 103 0064 FFF7FEBF 		b	RCC_APB1PeriphResetCmd
 104              	.LVL9:
 105              	.L11:
 201:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 106              		.loc 1 201 0
 107 0068 4FF48020 		mov	r0, #262144
 108              	.LVL10:
 109 006c 0121     		movs	r1, #1
 110 006e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 111              	.LVL11:
 202:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 112              		.loc 1 202 0
 113 0072 4FF48020 		mov	r0, #262144
 114 0076 0021     		movs	r1, #0
 115              		.loc 1 222 0
 116 0078 BDE80840 		pop	{r3, lr}
 202:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 117              		.loc 1 202 0
 118 007c FFF7FEBF 		b	RCC_APB1PeriphResetCmd
 119              	.LVL12:
 120              	.L12:
 206:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 121              		.loc 1 206 0
 122 0080 4FF40020 		mov	r0, #524288
 123              	.LVL13:
 124 0084 0121     		movs	r1, #1
 125 0086 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 126              	.LVL14:
 207:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 127              		.loc 1 207 0
 128 008a 4FF40020 		mov	r0, #524288
 129 008e 0021     		movs	r1, #0
 130              		.loc 1 222 0
 131 0090 BDE80840 		pop	{r3, lr}
 207:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 132              		.loc 1 207 0
 133 0094 FFF7FEBF 		b	RCC_APB1PeriphResetCmd
 134              	.LVL15:
 135              	.L13:
 211:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 136              		.loc 1 211 0
 137 0098 4FF48010 		mov	r0, #1048576
 138              	.LVL16:
 139 009c 0121     		movs	r1, #1
 140 009e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 141              	.LVL17:
 212:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 142              		.loc 1 212 0
 143 00a2 4FF48010 		mov	r0, #1048576
 144 00a6 0021     		movs	r1, #0
 145              		.loc 1 222 0
 146 00a8 BDE80840 		pop	{r3, lr}
 212:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 147              		.loc 1 212 0
 148 00ac FFF7FEBF 		b	RCC_APB1PeriphResetCmd
 149              	.LVL18:
 150              	.L16:
 151              		.align	2
 152              	.L15:
 153 00b0 00100140 		.word	1073811456
 154 00b4 00440040 		.word	1073759232
 155 00b8 00480040 		.word	1073760256
 156 00bc 004C0040 		.word	1073761280
 157 00c0 00500040 		.word	1073762304
 158 00c4 00140140 		.word	1073812480
 159              		.cfi_endproc
 160              	.LFE110:
 162              		.section	.text.USART_Init,"ax",%progbits
 163              		.align	2
 164              		.global	USART_Init
 165              		.thumb
 166              		.thumb_func
 168              	USART_Init:
 169              	.LFB111:
 223:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 224:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 225:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 226:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         parameters in the USART_InitStruct .
 227:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 228:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 229:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
 230:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 231:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 232:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 233:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 234:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 170              		.loc 1 234 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 16
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              	.LVL19:
 175 0000 70B5     		push	{r4, r5, r6, lr}
 176              	.LCFI1:
 177              		.cfi_def_cfa_offset 16
 178              		.cfi_offset 4, -16
 179              		.cfi_offset 5, -12
 180              		.cfi_offset 6, -8
 181              		.cfi_offset 14, -4
 182 0002 84B0     		sub	sp, sp, #16
 183              	.LCFI2:
 184              		.cfi_def_cfa_offset 32
 185              	.LVL20:
 186              		.loc 1 234 0
 187 0004 0446     		mov	r4, r0
 188 0006 0D46     		mov	r5, r1
 235:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 236:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t integerdivider = 0x00;
 237:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t fractionaldivider = 0x00;
 238:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 239:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 240:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 241:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 242:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 243:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 244:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 245:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 246:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 247:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 248:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 249:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 250:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 251:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 252:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 253:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 254:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 255:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 256:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 189              		.loc 1 256 0
 190 0008 038A     		ldrh	r3, [r0, #16]
 191              	.LVL21:
 257:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 258:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear STOP[13:12] bits */
 259:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 260:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 261:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
 262:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set STOP[13:12] bits according to USART_StopBits value */
 263:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 192              		.loc 1 263 0
 193 000a CA88     		ldrh	r2, [r1, #6]
 259:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 194              		.loc 1 259 0
 195 000c 23F44053 		bic	r3, r3, #12288
 196              	.LVL22:
 197 0010 1B04     		lsls	r3, r3, #16
 198 0012 1B0C     		lsrs	r3, r3, #16
 199              	.LVL23:
 264:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 265:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 266:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 200              		.loc 1 266 0
 201 0014 1343     		orrs	r3, r3, r2
 202              	.LVL24:
 203 0016 0382     		strh	r3, [r0, #16]	@ movhi
 267:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 268:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 269:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR1;
 204              		.loc 1 269 0
 205 0018 8389     		ldrh	r3, [r0, #12]
 206              	.LVL25:
 270:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 271:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 272:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 273:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 274:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Word Length, Parity and mode: 
 275:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set the M bits according to USART_WordLength value 
 276:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set PCE and PS bits according to USART_Parity value
 277:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set TE and RE bits according to USART_Mode value */
 278:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 207              		.loc 1 278 0
 208 001a 0889     		ldrh	r0, [r1, #8]
 209              	.LVL26:
 210 001c 8A88     		ldrh	r2, [r1, #4]
 211 001e 4989     		ldrh	r1, [r1, #10]
 212              	.LVL27:
 272:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 213              		.loc 1 272 0
 214 0020 23F4B053 		bic	r3, r3, #5632
 215              	.LVL28:
 216 0024 23F00C03 		bic	r3, r3, #12
 217              		.loc 1 278 0
 218 0028 0243     		orrs	r2, r2, r0
 272:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 219              		.loc 1 272 0
 220 002a 1B04     		lsls	r3, r3, #16
 221              		.loc 1 278 0
 222 002c 0A43     		orrs	r2, r2, r1
 272:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 223              		.loc 1 272 0
 224 002e 1B0C     		lsrs	r3, r3, #16
 225              	.LVL29:
 226              		.loc 1 278 0
 227 0030 92B2     		uxth	r2, r2
 279:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 280:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 281:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR1 */
 282:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 228              		.loc 1 282 0
 229 0032 1343     		orrs	r3, r3, r2
 230              	.LVL30:
 231 0034 A381     		strh	r3, [r4, #12]	@ movhi
 283:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 284:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 285:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR3;
 232              		.loc 1 285 0
 233 0036 A38A     		ldrh	r3, [r4, #20]
 234              	.LVL31:
 286:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 287:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CTSE and RTSE bits */
 288:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 289:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 290:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART HFC : 
 291:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 292:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 235              		.loc 1 292 0
 236 0038 AA89     		ldrh	r2, [r5, #12]
 288:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 237              		.loc 1 288 0
 238 003a 23F44073 		bic	r3, r3, #768
 239              	.LVL32:
 240 003e 1B04     		lsls	r3, r3, #16
 241 0040 1B0C     		lsrs	r3, r3, #16
 242              	.LVL33:
 293:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 294:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR3 */
 295:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 243              		.loc 1 295 0
 244 0042 1343     		orrs	r3, r3, r2
 245              	.LVL34:
 246 0044 A382     		strh	r3, [r4, #20]	@ movhi
 296:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 297:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 298:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Baud Rate */
 299:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 247              		.loc 1 299 0
 248 0046 6846     		mov	r0, sp
 249 0048 FFF7FEFF 		bl	RCC_GetClocksFreq
 250              	.LVL35:
 300:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 301:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx == USART1) || (USARTx == USART6))
 251              		.loc 1 301 0
 252 004c 1F4B     		ldr	r3, .L27
 253 004e 9C42     		cmp	r4, r3
 254 0050 26D0     		beq	.L18
 255              		.loc 1 301 0 is_stmt 0 discriminator 1
 256 0052 03F58063 		add	r3, r3, #1024
 257 0056 9C42     		cmp	r4, r3
 258 0058 22D0     		beq	.L18
 302:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 303:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 304:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 305:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 306:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 307:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 259              		.loc 1 307 0 is_stmt 1
 260 005a 0299     		ldr	r1, [sp, #8]
 261              	.LVL36:
 308:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 309:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 310:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the integer part */
 311:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 262              		.loc 1 311 0
 263 005c A389     		ldrh	r3, [r4, #12]
 264 005e 1BB2     		sxth	r3, r3
 265 0060 002B     		cmp	r3, #0
 266 0062 22DB     		blt	.L25
 267              	.L21:
 312:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 313:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 314:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 315:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 316:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 317:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 318:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 319:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 268              		.loc 1 319 0
 269 0064 2868     		ldr	r0, [r5, #0]
 270 0066 01EB8101 		add	r1, r1, r1, lsl #2
 271              	.LVL37:
 272 006a 01EB8101 		add	r1, r1, r1, lsl #2
 273 006e 8000     		lsls	r0, r0, #2
 274 0070 B1FBF0F2 		udiv	r2, r1, r0
 275              	.LVL38:
 276              	.L22:
 320:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 321:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 277              		.loc 1 321 0
 278 0074 1649     		ldr	r1, .L27+4
 322:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 323:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the fractional part */
 324:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 325:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 326:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Implement the fractional part in the register */
 327:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 279              		.loc 1 327 0
 280 0076 A089     		ldrh	r0, [r4, #12]
 321:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 281              		.loc 1 321 0
 282 0078 A1FB0253 		umull	r5, r3, r1, r2
 283              	.LVL39:
 284 007c 5B09     		lsrs	r3, r3, #5
 285              	.LVL40:
 286              		.loc 1 327 0
 287 007e 00B2     		sxth	r0, r0
 324:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 288              		.loc 1 324 0
 289 0080 1E01     		lsls	r6, r3, #4
 290              	.LVL41:
 291 0082 6425     		movs	r5, #100
 292 0084 03FB1523 		mls	r3, r3, r5, r2
 293              	.LVL42:
 294              		.loc 1 327 0
 295 0088 0028     		cmp	r0, #0
 296 008a 17DB     		blt	.L26
 328:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 329:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 330:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 331:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 332:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 333:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 297              		.loc 1 333 0
 298 008c 1B01     		lsls	r3, r3, #4
 299              	.LVL43:
 300 008e 3233     		adds	r3, r3, #50
 301 0090 A1FB0351 		umull	r5, r1, r1, r3
 302              	.LVL44:
 303 0094 C1F34311 		ubfx	r1, r1, #5, #4
 304 0098 3143     		orrs	r1, r1, r6
 305              	.LVL45:
 306              	.L24:
 334:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 335:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 336:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART BRR register */
 337:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 307              		.loc 1 337 0
 308 009a 2181     		strh	r1, [r4, #8]	@ movhi
 338:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 309              		.loc 1 338 0
 310 009c 04B0     		add	sp, sp, #16
 311 009e 70BD     		pop	{r4, r5, r6, pc}
 312              	.LVL46:
 313              	.L18:
 303:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 314              		.loc 1 303 0
 315 00a0 0399     		ldr	r1, [sp, #12]
 316              	.LVL47:
 311:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 317              		.loc 1 311 0
 318 00a2 A389     		ldrh	r3, [r4, #12]
 319 00a4 1BB2     		sxth	r3, r3
 320 00a6 002B     		cmp	r3, #0
 321 00a8 DCDA     		bge	.L21
 322              	.L25:
 314:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 323              		.loc 1 314 0
 324 00aa 2B68     		ldr	r3, [r5, #0]
 325 00ac 01EB8101 		add	r1, r1, r1, lsl #2
 326              	.LVL48:
 327 00b0 01EB8101 		add	r1, r1, r1, lsl #2
 328 00b4 5B00     		lsls	r3, r3, #1
 329 00b6 B1FBF3F2 		udiv	r2, r1, r3
 330              	.LVL49:
 331 00ba DBE7     		b	.L22
 332              	.LVL50:
 333              	.L26:
 329:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 334              		.loc 1 329 0
 335 00bc DB00     		lsls	r3, r3, #3
 336              	.LVL51:
 337 00be 3233     		adds	r3, r3, #50
 338 00c0 A1FB0321 		umull	r2, r1, r1, r3
 339              	.LVL52:
 340 00c4 C1F34211 		ubfx	r1, r1, #5, #3
 341 00c8 3143     		orrs	r1, r1, r6
 342              	.LVL53:
 343 00ca E6E7     		b	.L24
 344              	.L28:
 345              		.align	2
 346              	.L27:
 347 00cc 00100140 		.word	1073811456
 348 00d0 1F85EB51 		.word	1374389535
 349              		.cfi_endproc
 350              	.LFE111:
 352              		.section	.text.USART_StructInit,"ax",%progbits
 353              		.align	2
 354              		.global	USART_StructInit
 355              		.thumb
 356              		.thumb_func
 358              	USART_StructInit:
 359              	.LFB112:
 339:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 340:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 341:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 342:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
 343:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         be initialized.
 344:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 345:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 346:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 347:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 360              		.loc 1 347 0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 364              		@ link register save eliminated.
 365              	.LVL54:
 348:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_InitStruct members default value */
 349:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 350:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 366              		.loc 1 350 0
 367 0000 0023     		movs	r3, #0
 349:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 368              		.loc 1 349 0
 369 0002 4FF41652 		mov	r2, #9600
 370 0006 0260     		str	r2, [r0, #0]
 371              		.loc 1 350 0
 372 0008 8380     		strh	r3, [r0, #4]	@ movhi
 351:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 373              		.loc 1 351 0
 374 000a C380     		strh	r3, [r0, #6]	@ movhi
 352:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 375              		.loc 1 352 0
 376 000c 0381     		strh	r3, [r0, #8]	@ movhi
 353:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 377              		.loc 1 353 0
 378 000e 0C22     		movs	r2, #12
 379 0010 4281     		strh	r2, [r0, #10]	@ movhi
 354:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 380              		.loc 1 354 0
 381 0012 8381     		strh	r3, [r0, #12]	@ movhi
 382 0014 7047     		bx	lr
 383              		.cfi_endproc
 384              	.LFE112:
 386 0016 00BF     		.section	.text.USART_ClockInit,"ax",%progbits
 387              		.align	2
 388              		.global	USART_ClockInit
 389              		.thumb
 390              		.thumb_func
 392              	USART_ClockInit:
 393              	.LFB113:
 355:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 356:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 357:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 358:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 359:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct .
 360:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART peripheral.
 361:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure that
 362:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         contains the configuration information for the specified  USART peripheral.
 363:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
 364:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 365:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 366:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 367:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 394              		.loc 1 367 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              		@ link register save eliminated.
 399              	.LVL55:
 400 0000 30B4     		push	{r4, r5}
 401              	.LCFI3:
 402              		.cfi_def_cfa_offset 8
 403              		.cfi_offset 4, -8
 404              		.cfi_offset 5, -4
 405              	.LVL56:
 368:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00;
 369:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 370:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 371:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 372:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 373:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 374:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 375:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 376:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 377:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 378:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 379:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 380:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 381:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 382:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 383:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 384:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 385:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 386:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 406              		.loc 1 386 0
 407 0002 4D88     		ldrh	r5, [r1, #2]
 408 0004 0A88     		ldrh	r2, [r1, #0]
 377:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 409              		.loc 1 377 0
 410 0006 038A     		ldrh	r3, [r0, #16]
 411              	.LVL57:
 412              		.loc 1 386 0
 413 0008 8C88     		ldrh	r4, [r1, #4]
 414 000a C988     		ldrh	r1, [r1, #6]
 415              	.LVL58:
 416 000c 2A43     		orrs	r2, r2, r5
 379:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 417              		.loc 1 379 0
 418 000e 23F47063 		bic	r3, r3, #3840
 419              	.LVL59:
 420              		.loc 1 386 0
 421 0012 2243     		orrs	r2, r2, r4
 379:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 422              		.loc 1 379 0
 423 0014 1B04     		lsls	r3, r3, #16
 424              		.loc 1 386 0
 425 0016 0A43     		orrs	r2, r2, r1
 379:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 426              		.loc 1 379 0
 427 0018 1B0C     		lsrs	r3, r3, #16
 428              	.LVL60:
 429              		.loc 1 386 0
 430 001a 92B2     		uxth	r2, r2
 387:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 388:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 431              		.loc 1 388 0
 432 001c 1343     		orrs	r3, r3, r2
 433              	.LVL61:
 434 001e 0382     		strh	r3, [r0, #16]	@ movhi
 389:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 435              		.loc 1 389 0
 436 0020 30BC     		pop	{r4, r5}
 437 0022 7047     		bx	lr
 438              		.cfi_endproc
 439              	.LFE113:
 441              		.section	.text.USART_ClockStructInit,"ax",%progbits
 442              		.align	2
 443              		.global	USART_ClockStructInit
 444              		.thumb
 445              		.thumb_func
 447              	USART_ClockStructInit:
 448              	.LFB114:
 390:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 391:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 392:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 393:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
 394:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         which will be initialized.
 395:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 396:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 397:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 398:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 449              		.loc 1 398 0
 450              		.cfi_startproc
 451              		@ args = 0, pretend = 0, frame = 0
 452              		@ frame_needed = 0, uses_anonymous_args = 0
 453              		@ link register save eliminated.
 454              	.LVL62:
 399:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_ClockInitStruct members default value */
 400:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 455              		.loc 1 400 0
 456 0000 0023     		movs	r3, #0
 457 0002 0380     		strh	r3, [r0, #0]	@ movhi
 401:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 458              		.loc 1 401 0
 459 0004 4380     		strh	r3, [r0, #2]	@ movhi
 402:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 460              		.loc 1 402 0
 461 0006 8380     		strh	r3, [r0, #4]	@ movhi
 403:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 462              		.loc 1 403 0
 463 0008 C380     		strh	r3, [r0, #6]	@ movhi
 464 000a 7047     		bx	lr
 465              		.cfi_endproc
 466              	.LFE114:
 468              		.section	.text.USART_Cmd,"ax",%progbits
 469              		.align	2
 470              		.global	USART_Cmd
 471              		.thumb
 472              		.thumb_func
 474              	USART_Cmd:
 475              	.LFB115:
 404:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 405:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 406:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 407:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 408:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 409:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 410:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 411:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 412:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 413:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 414:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 415:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 476              		.loc 1 415 0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 0
 479              		@ frame_needed = 0, uses_anonymous_args = 0
 480              		@ link register save eliminated.
 481              	.LVL63:
 416:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 417:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 418:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 419:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 420:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 421:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 422:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 423:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 482              		.loc 1 423 0
 483 0000 8389     		ldrh	r3, [r0, #12]
 420:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 484              		.loc 1 420 0
 485 0002 29B9     		cbnz	r1, .L35
 424:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 425:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 426:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 427:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 428:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 486              		.loc 1 428 0
 487 0004 23F40053 		bic	r3, r3, #8192
 488 0008 1B04     		lsls	r3, r3, #16
 489 000a 1B0C     		lsrs	r3, r3, #16
 490 000c 8381     		strh	r3, [r0, #12]	@ movhi
 491 000e 7047     		bx	lr
 492              	.L35:
 423:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 493              		.loc 1 423 0
 494 0010 9BB2     		uxth	r3, r3
 495 0012 43F40053 		orr	r3, r3, #8192
 496 0016 8381     		strh	r3, [r0, #12]	@ movhi
 497 0018 7047     		bx	lr
 498              		.cfi_endproc
 499              	.LFE115:
 501 001a 00BF     		.section	.text.USART_SetPrescaler,"ax",%progbits
 502              		.align	2
 503              		.global	USART_SetPrescaler
 504              		.thumb
 505              		.thumb_func
 507              	USART_SetPrescaler:
 508              	.LFB116:
 429:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 430:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 431:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 432:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 433:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the system clock prescaler.
 434:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 435:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 436:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock. 
 437:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.   
 438:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 439:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 440:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 441:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** { 
 509              		.loc 1 441 0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 0
 512              		@ frame_needed = 0, uses_anonymous_args = 0
 513              		@ link register save eliminated.
 514              	.LVL64:
 442:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 443:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 444:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 445:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART prescaler */
 446:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 515              		.loc 1 446 0
 516 0000 038B     		ldrh	r3, [r0, #24]
 517 0002 03F47F43 		and	r3, r3, #65280
 518 0006 0383     		strh	r3, [r0, #24]	@ movhi
 447:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART prescaler */
 448:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 519              		.loc 1 448 0
 520 0008 038B     		ldrh	r3, [r0, #24]
 521 000a 9BB2     		uxth	r3, r3
 522 000c 1943     		orrs	r1, r1, r3
 523              	.LVL65:
 524 000e 0183     		strh	r1, [r0, #24]	@ movhi
 525 0010 7047     		bx	lr
 526              		.cfi_endproc
 527              	.LFE116:
 529 0012 00BF     		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 530              		.align	2
 531              		.global	USART_OverSampling8Cmd
 532              		.thumb
 533              		.thumb_func
 535              	USART_OverSampling8Cmd:
 536              	.LFB117:
 449:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 450:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 451:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 452:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 453:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 454:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         in order to have correct baudrate Divider value.
 455:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 456:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 457:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 458:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 459:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 460:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 461:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 462:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 537              		.loc 1 462 0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 0
 540              		@ frame_needed = 0, uses_anonymous_args = 0
 541              		@ link register save eliminated.
 542              	.LVL66:
 463:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 464:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 465:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 466:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 467:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 468:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 469:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 470:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 543              		.loc 1 470 0
 544 0000 8389     		ldrh	r3, [r0, #12]
 467:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 545              		.loc 1 467 0
 546 0002 19B9     		cbnz	r1, .L40
 471:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 472:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 473:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 474:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 475:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 547              		.loc 1 475 0
 548 0004 5B04     		lsls	r3, r3, #17
 549 0006 5B0C     		lsrs	r3, r3, #17
 550 0008 8381     		strh	r3, [r0, #12]	@ movhi
 551 000a 7047     		bx	lr
 552              	.L40:
 470:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 553              		.loc 1 470 0
 554 000c 6FEA4343 		mvn	r3, r3, lsl #17
 555 0010 6FEA5343 		mvn	r3, r3, lsr #17
 556 0014 8381     		strh	r3, [r0, #12]	@ movhi
 557 0016 7047     		bx	lr
 558              		.cfi_endproc
 559              	.LFE117:
 561              		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 562              		.align	2
 563              		.global	USART_OneBitMethodCmd
 564              		.thumb
 565              		.thumb_func
 567              	USART_OneBitMethodCmd:
 568              	.LFB118:
 476:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 477:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }  
 478:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 479:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 480:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 481:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 482:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 483:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 484:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 485:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 486:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 487:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 488:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 569              		.loc 1 488 0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 0
 572              		@ frame_needed = 0, uses_anonymous_args = 0
 573              		@ link register save eliminated.
 574              	.LVL67:
 489:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 490:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 491:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 492:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 493:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 494:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 495:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 496:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 575              		.loc 1 496 0
 576 0000 838A     		ldrh	r3, [r0, #20]
 493:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 577              		.loc 1 493 0
 578 0002 29B9     		cbnz	r1, .L44
 497:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 498:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 499:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 500:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 501:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 579              		.loc 1 501 0
 580 0004 23F40063 		bic	r3, r3, #2048
 581 0008 1B04     		lsls	r3, r3, #16
 582 000a 1B0C     		lsrs	r3, r3, #16
 583 000c 8382     		strh	r3, [r0, #20]	@ movhi
 584 000e 7047     		bx	lr
 585              	.L44:
 496:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 586              		.loc 1 496 0
 587 0010 9BB2     		uxth	r3, r3
 588 0012 43F40063 		orr	r3, r3, #2048
 589 0016 8382     		strh	r3, [r0, #20]	@ movhi
 590 0018 7047     		bx	lr
 591              		.cfi_endproc
 592              	.LFE118:
 594 001a 00BF     		.section	.text.USART_SendData,"ax",%progbits
 595              		.align	2
 596              		.global	USART_SendData
 597              		.thumb
 598              		.thumb_func
 600              	USART_SendData:
 601              	.LFB119:
 502:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 503:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 504:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 505:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 506:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 507:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 508:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 509:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group2 Data transfers functions
 510:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Data transfers functions 
 511:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 512:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 513:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 514:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                             Data transfers functions
 515:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 516:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 517:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART data 
 518:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   transfers.
 519:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 520:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   During an USART reception, data shifts in least significant bit first through 
 521:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX pin. In this mode, the USART_DR register consists of a buffer (RDR) 
 522:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   between the internal bus and the received shift register.
 523:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 524:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   When a transmission is taking place, a write instruction to the USART_DR register 
 525:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   stores the data in the TDR register and which is copied in the shift register 
 526:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   at the end of the current transmission.
 527:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 528:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The read access of the USART_DR register can be done using the USART_ReceiveData()
 529:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   function and returns the RDR buffered value. Whereas a write access to the USART_DR 
 530:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   can be done using USART_SendData() function and stores the written data into 
 531:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   TDR buffer.
 532:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 533:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 534:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 535:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 536:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 537:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 538:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 539:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 540:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 541:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  Data: the data to transmit.
 542:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 543:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 544:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 545:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 602              		.loc 1 545 0
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 0
 605              		@ frame_needed = 0, uses_anonymous_args = 0
 606              		@ link register save eliminated.
 607              	.LVL68:
 546:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 547:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 548:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 549:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 550:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Transmit Data */
 551:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 608              		.loc 1 551 0
 609 0000 C905     		lsls	r1, r1, #23
 610              	.LVL69:
 611 0002 C90D     		lsrs	r1, r1, #23
 612 0004 8180     		strh	r1, [r0, #4]	@ movhi
 613 0006 7047     		bx	lr
 614              		.cfi_endproc
 615              	.LFE119:
 617              		.section	.text.USART_ReceiveData,"ax",%progbits
 618              		.align	2
 619              		.global	USART_ReceiveData
 620              		.thumb
 621              		.thumb_func
 623              	USART_ReceiveData:
 624              	.LFB120:
 552:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 553:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 554:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 555:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 556:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 557:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 558:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The received data.
 559:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 560:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 561:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 625              		.loc 1 561 0
 626              		.cfi_startproc
 627              		@ args = 0, pretend = 0, frame = 0
 628              		@ frame_needed = 0, uses_anonymous_args = 0
 629              		@ link register save eliminated.
 630              	.LVL70:
 562:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 563:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 564:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Receive Data */
 566:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 631              		.loc 1 566 0
 632 0000 8088     		ldrh	r0, [r0, #4]
 633              	.LVL71:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 634              		.loc 1 567 0
 635 0002 C005     		lsls	r0, r0, #23
 636 0004 C00D     		lsrs	r0, r0, #23
 637 0006 7047     		bx	lr
 638              		.cfi_endproc
 639              	.LFE120:
 641              		.section	.text.USART_SetAddress,"ax",%progbits
 642              		.align	2
 643              		.global	USART_SetAddress
 644              		.thumb
 645              		.thumb_func
 647              	USART_SetAddress:
 648              	.LFB121:
 568:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 569:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 570:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 571:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 572:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 573:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group3 MultiProcessor Communication functions
 574:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 575:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 576:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 577:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 578:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                     Multi-Processor Communication functions
 579:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 580:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 581:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 582:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   multiprocessor communication.
 583:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 584:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   For instance one of the USARTs can be the master, its TX output is connected to 
 585:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX input of the other USART. The others are slaves, their respective TX outputs 
 586:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   are logically ANDed together and connected to the RX input of the master.
 587:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 588:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART multiprocessor communication is possible through the following procedure:
 589:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 9 bits, Stop bits, Parity, Mode transmitter 
 590:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 591:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 592:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 593:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the wake up method (USART_WakeUp_IdleLine or USART_WakeUp_AddressMark)
 594:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using USART_WakeUpConfig() function only for the slaves.
 595:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the USART using the USART_Cmd() function.
 596:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() function.
 597:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 598:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART Slave exit from mute mode when receive the wake up condition.
 599:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 600:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 601:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 602:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 603:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 604:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 605:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the address of the USART node.
 606:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 607:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 608:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 609:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 610:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 611:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 612:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 649              		.loc 1 612 0
 650              		.cfi_startproc
 651              		@ args = 0, pretend = 0, frame = 0
 652              		@ frame_needed = 0, uses_anonymous_args = 0
 653              		@ link register save eliminated.
 654              	.LVL72:
 613:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 614:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 615:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 616:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 617:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART address */
 618:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 655              		.loc 1 618 0
 656 0000 038A     		ldrh	r3, [r0, #16]
 657 0002 23F00F03 		bic	r3, r3, #15
 658 0006 1B04     		lsls	r3, r3, #16
 659 0008 1B0C     		lsrs	r3, r3, #16
 660 000a 0382     		strh	r3, [r0, #16]	@ movhi
 619:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART address node */
 620:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_Address;
 661              		.loc 1 620 0
 662 000c 038A     		ldrh	r3, [r0, #16]
 663 000e 9BB2     		uxth	r3, r3
 664 0010 1943     		orrs	r1, r1, r3
 665              	.LVL73:
 666 0012 0182     		strh	r1, [r0, #16]	@ movhi
 667 0014 7047     		bx	lr
 668              		.cfi_endproc
 669              	.LFE121:
 671 0016 00BF     		.section	.text.USART_ReceiverWakeUpCmd,"ax",%progbits
 672              		.align	2
 673              		.global	USART_ReceiverWakeUpCmd
 674              		.thumb
 675              		.thumb_func
 677              	USART_ReceiverWakeUpCmd:
 678              	.LFB122:
 621:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 622:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 623:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 624:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 625:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 626:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 627:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 628:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 629:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 630:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 631:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 632:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 679              		.loc 1 632 0
 680              		.cfi_startproc
 681              		@ args = 0, pretend = 0, frame = 0
 682              		@ frame_needed = 0, uses_anonymous_args = 0
 683              		@ link register save eliminated.
 684              	.LVL74:
 633:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 634:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 635:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 636:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 637:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 638:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 639:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 640:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_RWU;
 685              		.loc 1 640 0
 686 0000 8389     		ldrh	r3, [r0, #12]
 637:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 687              		.loc 1 637 0
 688 0002 29B9     		cbnz	r1, .L51
 641:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 642:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 643:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 644:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 645:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 689              		.loc 1 645 0
 690 0004 23F00203 		bic	r3, r3, #2
 691 0008 1B04     		lsls	r3, r3, #16
 692 000a 1B0C     		lsrs	r3, r3, #16
 693 000c 8381     		strh	r3, [r0, #12]	@ movhi
 694 000e 7047     		bx	lr
 695              	.L51:
 640:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_RWU;
 696              		.loc 1 640 0
 697 0010 9BB2     		uxth	r3, r3
 698 0012 43F00203 		orr	r3, r3, #2
 699 0016 8381     		strh	r3, [r0, #12]	@ movhi
 700 0018 7047     		bx	lr
 701              		.cfi_endproc
 702              	.LFE122:
 704 001a 00BF     		.section	.text.USART_WakeUpConfig,"ax",%progbits
 705              		.align	2
 706              		.global	USART_WakeUpConfig
 707              		.thumb
 708              		.thumb_func
 710              	USART_WakeUpConfig:
 711              	.LFB123:
 646:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 647:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 648:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 649:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Selects the USART WakeUp method.
 650:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 651:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 652:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 653:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 654:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 655:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 656:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 657:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 658:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 659:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 712              		.loc 1 659 0
 713              		.cfi_startproc
 714              		@ args = 0, pretend = 0, frame = 0
 715              		@ frame_needed = 0, uses_anonymous_args = 0
 716              		@ link register save eliminated.
 717              	.LVL75:
 660:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 661:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 662:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 663:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 664:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 718              		.loc 1 664 0
 719 0000 8389     		ldrh	r3, [r0, #12]
 720 0002 23F40063 		bic	r3, r3, #2048
 721 0006 1B04     		lsls	r3, r3, #16
 722 0008 1B0C     		lsrs	r3, r3, #16
 723 000a 8381     		strh	r3, [r0, #12]	@ movhi
 665:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 724              		.loc 1 665 0
 725 000c 8389     		ldrh	r3, [r0, #12]
 726 000e 9BB2     		uxth	r3, r3
 727 0010 1943     		orrs	r1, r1, r3
 728              	.LVL76:
 729 0012 8181     		strh	r1, [r0, #12]	@ movhi
 730 0014 7047     		bx	lr
 731              		.cfi_endproc
 732              	.LFE123:
 734 0016 00BF     		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 735              		.align	2
 736              		.global	USART_LINBreakDetectLengthConfig
 737              		.thumb
 738              		.thumb_func
 740              	USART_LINBreakDetectLengthConfig:
 741              	.LFB124:
 666:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 667:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 668:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 669:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 670:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 671:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 672:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group4 LIN mode functions
 673:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   LIN mode functions 
 674:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 675:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 676:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 677:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 LIN mode functions
 678:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 679:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 680:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART LIN 
 681:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Mode communication.
 682:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 683:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In LIN mode, 8-bit data format with 1 stop bit is required in accordance with 
 684:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the LIN standard.
 685:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 686:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Only this LIN Feature is supported by the USART IP:
 687:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     - LIN Master Synchronous Break send capability and LIN slave break detection
 688:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       capability :  13-bit break generation and 10/11 bit break detection
 689:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 690:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 691:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master transmitter communication is possible through the following procedure:
 692:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 693:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 694:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 695:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 696:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the LIN mode using the USART_LINCmd() function.
 697:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Send the break character using USART_SendBreak() function.
 698:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 699:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master receiver communication is possible through the following procedure:
 700:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 701:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 702:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 703:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 704:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the break detection length using the USART_LINBreakDetectLengthConfig()
 705:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 706:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the LIN mode using the USART_LINCmd() function.
 707:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 708:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 709:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In LIN mode, the following bits must be kept cleared:
 710:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - CLKEN in the USART_CR2 register,
 711:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
 712:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 713:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 714:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 715:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 716:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 717:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 718:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 719:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 720:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 721:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 722:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 723:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 724:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 725:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 727:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 742              		.loc 1 728 0
 743              		.cfi_startproc
 744              		@ args = 0, pretend = 0, frame = 0
 745              		@ frame_needed = 0, uses_anonymous_args = 0
 746              		@ link register save eliminated.
 747              	.LVL77:
 729:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 730:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 731:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 732:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 733:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 748              		.loc 1 733 0
 749 0000 038A     		ldrh	r3, [r0, #16]
 750 0002 23F02003 		bic	r3, r3, #32
 751 0006 1B04     		lsls	r3, r3, #16
 752 0008 1B0C     		lsrs	r3, r3, #16
 753 000a 0382     		strh	r3, [r0, #16]	@ movhi
 734:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 754              		.loc 1 734 0
 755 000c 038A     		ldrh	r3, [r0, #16]
 756 000e 9BB2     		uxth	r3, r3
 757 0010 1943     		orrs	r1, r1, r3
 758              	.LVL78:
 759 0012 0182     		strh	r1, [r0, #16]	@ movhi
 760 0014 7047     		bx	lr
 761              		.cfi_endproc
 762              	.LFE124:
 764 0016 00BF     		.section	.text.USART_LINCmd,"ax",%progbits
 765              		.align	2
 766              		.global	USART_LINCmd
 767              		.thumb
 768              		.thumb_func
 770              	USART_LINCmd:
 771              	.LFB125:
 735:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 736:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 737:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 738:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
 739:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 740:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 741:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 742:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 743:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 744:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 745:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 746:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 772              		.loc 1 746 0
 773              		.cfi_startproc
 774              		@ args = 0, pretend = 0, frame = 0
 775              		@ frame_needed = 0, uses_anonymous_args = 0
 776              		@ link register save eliminated.
 777              	.LVL79:
 747:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 748:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 749:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 750:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 751:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 752:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 753:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 754:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 778              		.loc 1 754 0
 779 0000 038A     		ldrh	r3, [r0, #16]
 751:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 780              		.loc 1 751 0
 781 0002 29B9     		cbnz	r1, .L57
 755:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 756:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 757:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 758:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 759:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 782              		.loc 1 759 0
 783 0004 23F48043 		bic	r3, r3, #16384
 784 0008 1B04     		lsls	r3, r3, #16
 785 000a 1B0C     		lsrs	r3, r3, #16
 786 000c 0382     		strh	r3, [r0, #16]	@ movhi
 787 000e 7047     		bx	lr
 788              	.L57:
 754:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 789              		.loc 1 754 0
 790 0010 9BB2     		uxth	r3, r3
 791 0012 43F48043 		orr	r3, r3, #16384
 792 0016 0382     		strh	r3, [r0, #16]	@ movhi
 793 0018 7047     		bx	lr
 794              		.cfi_endproc
 795              	.LFE125:
 797 001a 00BF     		.section	.text.USART_SendBreak,"ax",%progbits
 798              		.align	2
 799              		.global	USART_SendBreak
 800              		.thumb
 801              		.thumb_func
 803              	USART_SendBreak:
 804              	.LFB126:
 760:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 761:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 762:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 763:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 764:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits break characters.
 765:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 766:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 767:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 768:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 769:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 770:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 805              		.loc 1 770 0
 806              		.cfi_startproc
 807              		@ args = 0, pretend = 0, frame = 0
 808              		@ frame_needed = 0, uses_anonymous_args = 0
 809              		@ link register save eliminated.
 810              	.LVL80:
 771:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 772:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 773:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 774:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Send break characters */
 775:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_CR1_SBK;
 811              		.loc 1 775 0
 812 0000 8389     		ldrh	r3, [r0, #12]
 813 0002 9BB2     		uxth	r3, r3
 814 0004 43F00103 		orr	r3, r3, #1
 815 0008 8381     		strh	r3, [r0, #12]	@ movhi
 816 000a 7047     		bx	lr
 817              		.cfi_endproc
 818              	.LFE126:
 820              		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 821              		.align	2
 822              		.global	USART_HalfDuplexCmd
 823              		.thumb
 824              		.thumb_func
 826              	USART_HalfDuplexCmd:
 827              	.LFB127:
 776:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 777:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 778:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 779:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 780:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 781:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 782:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group5 Halfduplex mode function
 783:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Half-duplex mode function 
 784:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 785:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 786:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 787:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                          Half-duplex mode function
 788:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 789:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 790:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 791:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Half-duplex communication.
 792:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 793:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can be configured to follow a single-wire half-duplex protocol where 
 794:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the TX and RX lines are internally connected.
 795:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 796:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART Half duplex communication is possible through the following procedure:
 797:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
 798:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 799:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 800:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 801:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the USART using the USART_Cmd() function.
 802:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the half duplex mode using USART_HalfDuplexCmd() function.
 803:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 804:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 805:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The RX pin is no longer used
 806:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In Half-duplex mode the following bits must be kept cleared:
 807:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN and CLKEN bits in the USART_CR2 register.
 808:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and IREN bits in the USART_CR3 register.
 809:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 810:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 811:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 812:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 813:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 814:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 815:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
 816:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 817:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 818:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART Communication.
 819:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 820:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 821:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 822:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 823:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 828              		.loc 1 823 0
 829              		.cfi_startproc
 830              		@ args = 0, pretend = 0, frame = 0
 831              		@ frame_needed = 0, uses_anonymous_args = 0
 832              		@ link register save eliminated.
 833              	.LVL81:
 824:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 825:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 826:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 827:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 828:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 829:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 830:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 831:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 834              		.loc 1 831 0
 835 0000 838A     		ldrh	r3, [r0, #20]
 828:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 836              		.loc 1 828 0
 837 0002 29B9     		cbnz	r1, .L62
 832:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 833:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 834:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 835:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 836:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 838              		.loc 1 836 0
 839 0004 23F00803 		bic	r3, r3, #8
 840 0008 1B04     		lsls	r3, r3, #16
 841 000a 1B0C     		lsrs	r3, r3, #16
 842 000c 8382     		strh	r3, [r0, #20]	@ movhi
 843 000e 7047     		bx	lr
 844              	.L62:
 831:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 845              		.loc 1 831 0
 846 0010 9BB2     		uxth	r3, r3
 847 0012 43F00803 		orr	r3, r3, #8
 848 0016 8382     		strh	r3, [r0, #20]	@ movhi
 849 0018 7047     		bx	lr
 850              		.cfi_endproc
 851              	.LFE127:
 853 001a 00BF     		.section	.text.USART_SetGuardTime,"ax",%progbits
 854              		.align	2
 855              		.global	USART_SetGuardTime
 856              		.thumb
 857              		.thumb_func
 859              	USART_SetGuardTime:
 860              	.LFB128:
 837:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 838:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 839:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 840:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 841:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 842:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 843:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 844:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 845:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group6 Smartcard mode functions
 846:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Smartcard mode functions 
 847:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 848:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 849:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 850:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                Smartcard mode functions
 851:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 852:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 853:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 854:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication.
 855:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 856:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The Smartcard interface is designed to support asynchronous protocol Smartcards as
 857:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   defined in the ISO 7816-3 standard.
 858:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 859:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can provide a clock to the smartcard through the SCLK output.
 860:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In smartcard mode, SCLK is not associated to the communication but is simply derived 
 861:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   from the internal peripheral input clock through a 5-bit prescaler.
 862:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 863:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication is possible through the following procedure:
 864:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Configures the Smartcard Prescaler using the USART_SetPrescaler() function.
 865:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the Smartcard Guard Time using the USART_SetGuardTime() function.
 866:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Program the USART clock using the USART_ClockInit() function as following:
 867:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock enabled
 868:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPOL Low
 869:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPHA on first edge
 870:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Last Bit Clock Enabled
 871:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Program the Smartcard interface using the USART_Init() function as following:
 872:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length = 9 Bits
 873:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - 1.5 Stop Bit
 874:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Even parity
 875:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - BaudRate = 12096 baud
 876:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control disabled (RTS and CTS signals)
 877:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Tx and Rx enabled
 878:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Optionally you can enable the parity error interrupt using the USART_ITConfig()
 879:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function
 880:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. Enable the USART using the USART_Cmd() function.
 881:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. Enable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
 882:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. Enable the Smartcard interface using the USART_SmartCardCmd() function.
 883:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 884:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Please refer to the ISO 7816-3 specification for more details.
 885:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 886:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 887:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note It is also possible to choose 0.5 stop bit for receiving but it is recommended 
 888:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       to use 1.5 stop bits for both transmitting and receiving to avoid switching 
 889:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       between the two configurations.
 890:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In smartcard mode, the following bits must be kept cleared:
 891:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN bit in the USART_CR2 register.
 892:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - HDSEL and IREN bits in the USART_CR3 register.
 893:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Smartcard mode is available on USART peripherals only (not available on UART4 
 894:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       and UART5 peripherals).
 895:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 896:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 897:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 898:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 899:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 900:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 901:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the specified USART guard time.
 902:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 903:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 904:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.   
 905:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 906:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 907:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 908:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {    
 861              		.loc 1 908 0
 862              		.cfi_startproc
 863              		@ args = 0, pretend = 0, frame = 0
 864              		@ frame_needed = 0, uses_anonymous_args = 0
 865              		@ link register save eliminated.
 866              	.LVL82:
 909:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 910:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 911:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 912:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART Guard time */
 913:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 867              		.loc 1 913 0
 868 0000 038B     		ldrh	r3, [r0, #24]
 869 0002 DBB2     		uxtb	r3, r3
 870 0004 0383     		strh	r3, [r0, #24]	@ movhi
 914:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART guard time */
 915:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 871              		.loc 1 915 0
 872 0006 038B     		ldrh	r3, [r0, #24]
 873 0008 9BB2     		uxth	r3, r3
 874 000a 43EA0121 		orr	r1, r3, r1, lsl #8
 875              	.LVL83:
 876 000e 0183     		strh	r1, [r0, #24]	@ movhi
 877 0010 7047     		bx	lr
 878              		.cfi_endproc
 879              	.LFE128:
 881 0012 00BF     		.section	.text.USART_SmartCardCmd,"ax",%progbits
 882              		.align	2
 883              		.global	USART_SmartCardCmd
 884              		.thumb
 885              		.thumb_func
 887              	USART_SmartCardCmd:
 888              	.LFB129:
 916:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 917:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 918:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 919:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
 920:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 921:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 922:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 923:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
 924:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 925:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 926:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 927:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 889              		.loc 1 927 0
 890              		.cfi_startproc
 891              		@ args = 0, pretend = 0, frame = 0
 892              		@ frame_needed = 0, uses_anonymous_args = 0
 893              		@ link register save eliminated.
 894              	.LVL84:
 928:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 929:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 930:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 931:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 932:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 933:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 934:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 895              		.loc 1 934 0
 896 0000 838A     		ldrh	r3, [r0, #20]
 931:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 897              		.loc 1 931 0
 898 0002 29B9     		cbnz	r1, .L67
 935:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 936:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 937:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 938:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 939:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 899              		.loc 1 939 0
 900 0004 23F02003 		bic	r3, r3, #32
 901 0008 1B04     		lsls	r3, r3, #16
 902 000a 1B0C     		lsrs	r3, r3, #16
 903 000c 8382     		strh	r3, [r0, #20]	@ movhi
 904 000e 7047     		bx	lr
 905              	.L67:
 934:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 906              		.loc 1 934 0
 907 0010 9BB2     		uxth	r3, r3
 908 0012 43F02003 		orr	r3, r3, #32
 909 0016 8382     		strh	r3, [r0, #20]	@ movhi
 910 0018 7047     		bx	lr
 911              		.cfi_endproc
 912              	.LFE129:
 914 001a 00BF     		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 915              		.align	2
 916              		.global	USART_SmartCardNACKCmd
 917              		.thumb
 918              		.thumb_func
 920              	USART_SmartCardNACKCmd:
 921              	.LFB130:
 940:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 941:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 942:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 943:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 944:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables NACK transmission.
 945:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 946:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 947:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
 948:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 949:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 950:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 951:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 952:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 922              		.loc 1 952 0
 923              		.cfi_startproc
 924              		@ args = 0, pretend = 0, frame = 0
 925              		@ frame_needed = 0, uses_anonymous_args = 0
 926              		@ link register save eliminated.
 927              	.LVL85:
 953:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 954:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx)); 
 955:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 956:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 957:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 958:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 959:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 928              		.loc 1 959 0
 929 0000 838A     		ldrh	r3, [r0, #20]
 956:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 930              		.loc 1 956 0
 931 0002 29B9     		cbnz	r1, .L71
 960:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 961:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 962:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 963:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 964:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 932              		.loc 1 964 0
 933 0004 23F01003 		bic	r3, r3, #16
 934 0008 1B04     		lsls	r3, r3, #16
 935 000a 1B0C     		lsrs	r3, r3, #16
 936 000c 8382     		strh	r3, [r0, #20]	@ movhi
 937 000e 7047     		bx	lr
 938              	.L71:
 959:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 939              		.loc 1 959 0
 940 0010 9BB2     		uxth	r3, r3
 941 0012 43F01003 		orr	r3, r3, #16
 942 0016 8382     		strh	r3, [r0, #20]	@ movhi
 943 0018 7047     		bx	lr
 944              		.cfi_endproc
 945              	.LFE130:
 947 001a 00BF     		.section	.text.USART_IrDAConfig,"ax",%progbits
 948              		.align	2
 949              		.global	USART_IrDAConfig
 950              		.thumb
 951              		.thumb_func
 953              	USART_IrDAConfig:
 954              	.LFB131:
 965:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 966:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 967:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 968:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 969:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 970:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 971:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 972:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group7 IrDA mode functions
 973:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   IrDA mode functions 
 974:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 975:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 976:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 977:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 IrDA mode functions
 978:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 979:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 980:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 981:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication.
 982:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 983:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 984:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 985:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 986:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   While receiving data, transmission should be avoided as the data to be transmitted
 987:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   could be corrupted.
 988:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 989:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication is possible through the following procedure:
 990:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8 bits, Stop bits, Parity, Transmitter/Receiver 
 991:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         modes and hardware flow control values using the USART_Init() function.
 992:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 993:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the IrDA pulse width by configuring the prescaler using  
 994:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_SetPrescaler() function.
 995:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal mode
 996:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using the USART_IrDAConfig() function.
 997:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enable the IrDA using the USART_IrDACmd() function.
 998:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 999:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note A pulse of width less than two and greater than one PSC period(s) may or may
1000:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       not be rejected.
1001:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The receiver set up time should be managed by software. The IrDA physical layer
1002:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       specification specifies a minimum of 10 ms delay between transmission and 
1003:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       reception (IrDA is a half duplex protocol).
1004:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In IrDA mode, the following bits must be kept cleared:
1005:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN, STOP and CLKEN bits in the USART_CR2 register.
1006:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and HDSEL bits in the USART_CR3 register.
1007:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1008:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1009:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1010:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1011:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1012:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1013:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1014:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1015:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1016:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1017:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1018:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1019:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1020:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1021:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1022:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
1023:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 955              		.loc 1 1023 0
 956              		.cfi_startproc
 957              		@ args = 0, pretend = 0, frame = 0
 958              		@ frame_needed = 0, uses_anonymous_args = 0
 959              		@ link register save eliminated.
 960              	.LVL86:
1024:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1025:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1026:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
1027:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1028:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 961              		.loc 1 1028 0
 962 0000 838A     		ldrh	r3, [r0, #20]
 963 0002 23F00403 		bic	r3, r3, #4
 964 0006 1B04     		lsls	r3, r3, #16
 965 0008 1B0C     		lsrs	r3, r3, #16
 966 000a 8382     		strh	r3, [r0, #20]	@ movhi
1029:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 967              		.loc 1 1029 0
 968 000c 838A     		ldrh	r3, [r0, #20]
 969 000e 9BB2     		uxth	r3, r3
 970 0010 1943     		orrs	r1, r1, r3
 971              	.LVL87:
 972 0012 8182     		strh	r1, [r0, #20]	@ movhi
 973 0014 7047     		bx	lr
 974              		.cfi_endproc
 975              	.LFE131:
 977 0016 00BF     		.section	.text.USART_IrDACmd,"ax",%progbits
 978              		.align	2
 979              		.global	USART_IrDACmd
 980              		.thumb
 981              		.thumb_func
 983              	USART_IrDACmd:
 984              	.LFB132:
1030:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
1031:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1032:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1033:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1034:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1035:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1036:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1037:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1038:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1039:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1040:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1041:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 985              		.loc 1 1041 0
 986              		.cfi_startproc
 987              		@ args = 0, pretend = 0, frame = 0
 988              		@ frame_needed = 0, uses_anonymous_args = 0
 989              		@ link register save eliminated.
 990              	.LVL88:
1042:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1043:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1044:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1045:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1046:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
1047:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1048:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1049:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 991              		.loc 1 1049 0
 992 0000 838A     		ldrh	r3, [r0, #20]
1046:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 993              		.loc 1 1046 0
 994 0002 29B9     		cbnz	r1, .L76
1050:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1051:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1052:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1053:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1054:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 995              		.loc 1 1054 0
 996 0004 23F00203 		bic	r3, r3, #2
 997 0008 1B04     		lsls	r3, r3, #16
 998 000a 1B0C     		lsrs	r3, r3, #16
 999 000c 8382     		strh	r3, [r0, #20]	@ movhi
 1000 000e 7047     		bx	lr
 1001              	.L76:
1049:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 1002              		.loc 1 1049 0
 1003 0010 9BB2     		uxth	r3, r3
 1004 0012 43F00203 		orr	r3, r3, #2
 1005 0016 8382     		strh	r3, [r0, #20]	@ movhi
 1006 0018 7047     		bx	lr
 1007              		.cfi_endproc
 1008              	.LFE132:
 1010 001a 00BF     		.section	.text.USART_DMACmd,"ax",%progbits
 1011              		.align	2
 1012              		.global	USART_DMACmd
 1013              		.thumb
 1014              		.thumb_func
 1016              	USART_DMACmd:
 1017              	.LFB133:
1055:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1056:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
1057:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1058:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1059:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1060:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1061:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1062:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group8 DMA transfers management functions
1063:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   DMA transfers management functions
1064:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1065:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1066:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1067:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                       DMA transfers management functions
1068:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1069:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1070:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1071:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1072:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1073:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1074:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1075:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1076:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1077:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1078:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1079:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1080:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1081:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1082:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1083:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.   
1084:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1085:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1086:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1087:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1018              		.loc 1 1087 0
 1019              		.cfi_startproc
 1020              		@ args = 0, pretend = 0, frame = 0
 1021              		@ frame_needed = 0, uses_anonymous_args = 0
 1022              		@ link register save eliminated.
 1023              	.LVL89:
1088:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1089:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1090:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
1091:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1092:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1093:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
1094:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1095:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1096:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1097:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 1024              		.loc 1 1097 0
 1025 0000 838A     		ldrh	r3, [r0, #20]
 1026 0002 9BB2     		uxth	r3, r3
1093:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1027              		.loc 1 1093 0
 1028 0004 1AB9     		cbnz	r2, .L80
1098:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1099:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1100:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1101:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1102:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1103:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 1029              		.loc 1 1103 0
 1030 0006 23EA0101 		bic	r1, r3, r1
 1031              	.LVL90:
 1032 000a 8182     		strh	r1, [r0, #20]	@ movhi
 1033 000c 7047     		bx	lr
 1034              	.LVL91:
 1035              	.L80:
1097:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 1036              		.loc 1 1097 0
 1037 000e 1943     		orrs	r1, r1, r3
 1038              	.LVL92:
 1039 0010 8182     		strh	r1, [r0, #20]	@ movhi
 1040 0012 7047     		bx	lr
 1041              		.cfi_endproc
 1042              	.LFE133:
 1044              		.section	.text.USART_ITConfig,"ax",%progbits
 1045              		.align	2
 1046              		.global	USART_ITConfig
 1047              		.thumb
 1048              		.thumb_func
 1050              	USART_ITConfig:
 1051              	.LFB134:
1104:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1105:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
1106:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1107:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1108:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1109:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1110:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1111:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group9 Interrupts and flags management functions
1112:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1113:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1114:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1115:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1116:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                    Interrupts and flags management functions
1117:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1118:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1119:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to configure the USART 
1120:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupts sources, DMA channels requests and check or clear the flags or 
1121:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   pending bits status.
1122:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The user should identify which mode will be used in his application to manage 
1123:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
1124:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1125:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Polling Mode
1126:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   =============
1127:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Polling Mode, the SPI communication can be managed by 10 flags:
1128:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_FLAG_TXE : to indicate the status of the transmit buffer register
1129:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_FLAG_RXNE : to indicate the status of the receive buffer register
1130:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_FLAG_TC : to indicate the status of the transmit operation
1131:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_FLAG_IDLE : to indicate the status of the Idle Line             
1132:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_FLAG_CTS : to indicate the status of the nCTS input
1133:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_FLAG_LBD : to indicate the status of the LIN break detection
1134:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_FLAG_NE : to indicate if a noise error occur
1135:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_FLAG_FE : to indicate if a frame error occur
1136:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_FLAG_PE : to indicate if a parity error occur
1137:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_FLAG_ORE : to indicate if an Overrun error occur
1138:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1139:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1140:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1141:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1142:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1143:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Mode
1144:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ===============
1145:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
1146:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   and 10 pending bits: 
1147:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1148:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Pending Bits:
1149:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ------------- 
1150:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : to indicate the status of the transmit buffer register
1151:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : to indicate the status of the receive buffer register
1152:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : to indicate the status of the transmit operation
1153:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : to indicate the status of the Idle Line             
1154:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : to indicate the status of the nCTS input
1155:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : to indicate the status of the LIN break detection
1156:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_NE : to indicate if a noise error occur
1157:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_FE : to indicate if a frame error occur
1158:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_IT_PE : to indicate if a parity error occur
1159:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_IT_ORE : to indicate if an Overrun error occur
1160:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1161:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Source:
1162:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   -----------------
1163:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
1164:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1165:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1166:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                         empty interrupt.
1167:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : specifies the interrupt source for the Transmit complete 
1168:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1169:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt.             
1170:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : specifies the interrupt source for the CTS interrupt. 
1171:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : specifies the interrupt source for the LIN break detection
1172:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1173:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_PE : specifies the interrupt source for the parity error interrupt. 
1174:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_ERR :  specifies the interrupt source for the errors interrupt.
1175:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1176:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Some parameters are coded in order to use them as interrupt source or as pending bits.
1177:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1178:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1179:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
1180:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
1181:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
1182:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1183:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   DMA Mode
1184:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ========
1185:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
1186:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1187:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1188:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1189:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following function:
1190:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState);
1191:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1192:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1193:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1194:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1195:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1196:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1197:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1198:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1199:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1200:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1201:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1202:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt
1203:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1204:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1205:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1206:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1207:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1208:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1209:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1210:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1211:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1212:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1213:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1214:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
1215:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1052              		.loc 1 1215 0
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 0
 1055              		@ frame_needed = 0, uses_anonymous_args = 0
 1056              		@ link register save eliminated.
 1057              	.LVL93:
 1058 0000 10B4     		push	{r4}
 1059              	.LCFI4:
 1060              		.cfi_def_cfa_offset 4
 1061              		.cfi_offset 4, -4
 1062              	.LVL94:
1216:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
1217:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartxbase = 0x00;
1218:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1219:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1220:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
1221:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1222:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1223:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1224:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1225:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1226:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1227:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1228:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1229:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartxbase = (uint32_t)USARTx;
1230:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1231:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1232:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
1233:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1234:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1235:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itpos = USART_IT & IT_MASK;
1236:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 1063              		.loc 1 1236 0
 1064 0002 01F01F03 		and	r3, r1, #31
1232:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1065              		.loc 1 1232 0
 1066 0006 C1F34211 		ubfx	r1, r1, #5, #3
 1067              	.LVL95:
 1068              		.loc 1 1236 0
 1069 000a 0124     		movs	r4, #1
 1070 000c 04FA03F3 		lsl	r3, r4, r3
 1071              	.LVL96:
1237:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1238:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 1072              		.loc 1 1238 0
 1073 0010 A142     		cmp	r1, r4
 1074 0012 0DD0     		beq	.L87
1239:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1240:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x0C;
1241:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1242:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 1075              		.loc 1 1242 0
 1076 0014 0229     		cmp	r1, #2
 1077 0016 0DD0     		beq	.L88
1243:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1244:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x10;
1245:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1246:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT is in CR3 register */
1247:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1248:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x14; 
 1078              		.loc 1 1248 0
 1079 0018 1430     		adds	r0, r0, #20
 1080              	.LVL97:
 1081              	.L83:
1249:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1250:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1082              		.loc 1 1250 0
 1083 001a 2AB9     		cbnz	r2, .L89
1251:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1252:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
1253:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1254:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1255:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1256:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 1084              		.loc 1 1256 0
 1085 001c 0268     		ldr	r2, [r0, #0]
 1086              	.LVL98:
 1087 001e 22EA0303 		bic	r3, r2, r3
 1088              	.LVL99:
 1089 0022 0360     		str	r3, [r0, #0]
 1090              	.L81:
1257:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1258:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1091              		.loc 1 1258 0
 1092 0024 10BC     		pop	{r4}
 1093 0026 7047     		bx	lr
 1094              	.LVL100:
 1095              	.L89:
1252:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 1096              		.loc 1 1252 0
 1097 0028 0268     		ldr	r2, [r0, #0]
 1098              	.LVL101:
 1099 002a 1343     		orrs	r3, r3, r2
 1100              	.LVL102:
 1101 002c 0360     		str	r3, [r0, #0]
 1102 002e F9E7     		b	.L81
 1103              	.LVL103:
 1104              	.L87:
1240:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x0C;
 1105              		.loc 1 1240 0
 1106 0030 0C30     		adds	r0, r0, #12
 1107              	.LVL104:
 1108 0032 F2E7     		b	.L83
 1109              	.LVL105:
 1110              	.L88:
1244:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x10;
 1111              		.loc 1 1244 0
 1112 0034 1030     		adds	r0, r0, #16
 1113              	.LVL106:
 1114 0036 F0E7     		b	.L83
 1115              		.cfi_endproc
 1116              	.LFE134:
 1118              		.section	.text.USART_GetFlagStatus,"ax",%progbits
 1119              		.align	2
 1120              		.global	USART_GetFlagStatus
 1121              		.thumb
 1122              		.thumb_func
 1124              	USART_GetFlagStatus:
 1125              	.LFB135:
1259:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1260:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1261:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1262:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1263:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1264:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1265:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1266:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
1267:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag
1268:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag
1269:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag
1270:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag
1271:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_IDLE: Idle Line detection flag
1272:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag
1273:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_NE:   Noise Error flag
1274:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_FE:   Framing Error flag
1275:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Error flag
1276:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1277:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1278:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1279:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1126              		.loc 1 1279 0
 1127              		.cfi_startproc
 1128              		@ args = 0, pretend = 0, frame = 0
 1129              		@ frame_needed = 0, uses_anonymous_args = 0
 1130              		@ link register save eliminated.
 1131              	.LVL107:
 1132              	.LVL108:
1280:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   FlagStatus bitstatus = RESET;
1281:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1282:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1283:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
1284:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1285:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1286:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
1287:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1288:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1289:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1290:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1291:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 1133              		.loc 1 1291 0
 1134 0000 0388     		ldrh	r3, [r0, #0]
 1135              	.LVL109:
 1136 0002 1942     		tst	r1, r3
1292:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1293:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
1294:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1295:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1296:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1297:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
1298:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1299:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;
1300:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1137              		.loc 1 1300 0
 1138 0004 0CBF     		ite	eq
 1139 0006 0020     		moveq	r0, #0
 1140 0008 0120     		movne	r0, #1
 1141              	.LVL110:
 1142 000a 7047     		bx	lr
 1143              		.cfi_endproc
 1144              	.LFE135:
 1146              		.section	.text.USART_ClearFlag,"ax",%progbits
 1147              		.align	2
 1148              		.global	USART_ClearFlag
 1149              		.thumb
 1150              		.thumb_func
 1152              	USART_ClearFlag:
 1153              	.LFB136:
1301:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1302:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1303:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1304:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1305:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1306:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1307:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1308:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
1309:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1310:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag.
1311:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag.
1312:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1313:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1314:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) flags are cleared by software 
1315:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
1316:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          followed by a read operation to USART_DR register (USART_ReceiveData()).
1317:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE flag can be also cleared by a read to the USART_DR register 
1318:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1319:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC flag can be also cleared by software sequence: a read operation to 
1320:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          USART_SR register (USART_GetFlagStatus()) followed by a write operation
1321:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          to USART_DR register (USART_SendData()).
1322:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE flag is cleared only by a write to the USART_DR register 
1323:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1324:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1325:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1326:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1327:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1328:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1154              		.loc 1 1328 0
 1155              		.cfi_startproc
 1156              		@ args = 0, pretend = 0, frame = 0
 1157              		@ frame_needed = 0, uses_anonymous_args = 0
 1158              		@ link register save eliminated.
 1159              	.LVL111:
1329:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1330:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1331:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
1332:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1333:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1334:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
1335:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1336:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1337:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1338:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        
1339:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 1160              		.loc 1 1339 0
 1161 0000 C943     		mvns	r1, r1
 1162              	.LVL112:
 1163 0002 0180     		strh	r1, [r0, #0]	@ movhi
 1164 0004 7047     		bx	lr
 1165              		.cfi_endproc
 1166              	.LFE136:
 1168 0006 00BF     		.section	.text.USART_GetITStatus,"ax",%progbits
 1169              		.align	2
 1170              		.global	USART_GetITStatus
 1171              		.thumb
 1172              		.thumb_func
 1174              	USART_GetITStatus:
 1175              	.LFB137:
1340:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
1341:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1342:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1343:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1344:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1345:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1346:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1347:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1348:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1349:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1350:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1351:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1352:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1353:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1354:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_RX : OverRun Error interrupt if the RXNEIE bit is set
1355:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_ER : OverRun Error interrupt if the EIE bit is set  
1356:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_NE:   Noise Error interrupt
1357:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_FE:   Framing Error interrupt
1358:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1359:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1360:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1361:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
1362:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1176              		.loc 1 1362 0
 1177              		.cfi_startproc
 1178              		@ args = 0, pretend = 0, frame = 0
 1179              		@ frame_needed = 0, uses_anonymous_args = 0
 1180              		@ link register save eliminated.
 1181              	.LVL113:
 1182 0000 10B4     		push	{r4}
 1183              	.LCFI5:
 1184              		.cfi_def_cfa_offset 4
 1185              		.cfi_offset 4, -4
 1186              	.LVL114:
1363:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
1364:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ITStatus bitstatus = RESET;
1365:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1366:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1367:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
1368:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1369:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
1370:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1371:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1372:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1373:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1374:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1375:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1376:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
1377:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1378:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = USART_IT & IT_MASK;
1379:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 1187              		.loc 1 1379 0
 1188 0002 01F01F02 		and	r2, r1, #31
1376:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1189              		.loc 1 1376 0
 1190 0006 C1F34213 		ubfx	r3, r1, #5, #3
 1191              	.LVL115:
 1192              		.loc 1 1379 0
 1193 000a 0124     		movs	r4, #1
 1194 000c 04FA02F2 		lsl	r2, r4, r2
 1195              	.LVL116:
1380:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1381:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 1196              		.loc 1 1381 0
 1197 0010 A342     		cmp	r3, r4
 1198 0012 14D0     		beq	.L98
1382:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1383:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR1;
1384:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1385:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 1199              		.loc 1 1385 0
 1200 0014 022B     		cmp	r3, #2
1386:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1387:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR2;
 1201              		.loc 1 1387 0
 1202 0016 0CBF     		ite	eq
 1203 0018 038A     		ldrheq	r3, [r0, #16]
 1204              	.LVL117:
1388:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1389:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT  is in CR3 register */
1390:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1391:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR3;
 1205              		.loc 1 1391 0
 1206 001a 838A     		ldrhne	r3, [r0, #20]
 1207 001c 9BB2     		uxth	r3, r3
 1208 001e 1340     		ands	r3, r3, r2
 1209              	.LVL118:
 1210              	.L94:
1392:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1393:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1394:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
1395:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
1396:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos &= USARTx->SR;
 1211              		.loc 1 1396 0
 1212 0020 0288     		ldrh	r2, [r0, #0]
 1213 0022 92B2     		uxth	r2, r2
 1214              	.LVL119:
1397:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 1215              		.loc 1 1397 0
 1216 0024 4BB1     		cbz	r3, .L97
1395:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 1217              		.loc 1 1395 0 discriminator 1
 1218 0026 090A     		lsrs	r1, r1, #8
 1219              	.LVL120:
 1220 0028 0123     		movs	r3, #1
 1221              	.LVL121:
 1222 002a 03FA01F1 		lsl	r1, r3, r1
 1223              		.loc 1 1397 0 discriminator 1
 1224 002e 1142     		tst	r1, r2
1398:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1399:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
 1225              		.loc 1 1399 0 discriminator 1
 1226 0030 0CBF     		ite	eq
 1227 0032 0020     		moveq	r0, #0
 1228 0034 0120     		movne	r0, #1
 1229              	.LVL122:
 1230              	.L96:
1400:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1401:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1402:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1403:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
1404:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1405:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1406:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;  
1407:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1231              		.loc 1 1407 0
 1232 0036 10BC     		pop	{r4}
 1233 0038 7047     		bx	lr
 1234              	.LVL123:
 1235              	.L97:
1403:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 1236              		.loc 1 1403 0
 1237 003a 1846     		mov	r0, r3
 1238              	.LVL124:
 1239 003c FBE7     		b	.L96
 1240              	.LVL125:
 1241              	.L98:
1383:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR1;
 1242              		.loc 1 1383 0
 1243 003e 8389     		ldrh	r3, [r0, #12]
 1244              	.LVL126:
 1245 0040 9BB2     		uxth	r3, r3
 1246 0042 1340     		ands	r3, r3, r2
 1247              	.LVL127:
 1248 0044 ECE7     		b	.L94
 1249              		.cfi_endproc
 1250              	.LFE137:
 1252 0046 00BF     		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 1253              		.align	2
 1254              		.global	USART_ClearITPendingBit
 1255              		.thumb
 1256              		.thumb_func
 1258              	USART_ClearITPendingBit:
 1259              	.LFB138:
1408:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1409:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1410:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1411:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1412:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1413:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1414:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1415:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1416:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1417:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt. 
1418:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1419:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
1420:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1421:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) pending bits are cleared by 
1422:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          software sequence: a read operation to USART_SR register 
1423:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_GetITStatus()) followed by a read operation to USART_DR register 
1424:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1425:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE pending bit can be also cleared by a read to the USART_DR register 
1426:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1427:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC pending bit can be also cleared by software sequence: a read 
1428:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_SR register (USART_GetITStatus()) followed by a write 
1429:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_DR register (USART_SendData()).
1430:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE pending bit is cleared only by a write to the USART_DR register 
1431:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1432:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  
1433:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1434:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1435:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1436:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1260              		.loc 1 1436 0
 1261              		.cfi_startproc
 1262              		@ args = 0, pretend = 0, frame = 0
 1263              		@ frame_needed = 0, uses_anonymous_args = 0
 1264              		@ link register save eliminated.
 1265              	.LVL128:
 1266              	.LVL129:
1437:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
1438:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1439:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1440:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
1441:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1442:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1443:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1444:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1445:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1446:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1447:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1448:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
1449:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 1267              		.loc 1 1449 0
 1268 0000 090A     		lsrs	r1, r1, #8
 1269              	.LVL130:
 1270 0002 0123     		movs	r3, #1
 1271 0004 03FA01F1 		lsl	r1, r3, r1
1450:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 1272              		.loc 1 1450 0
 1273 0008 C943     		mvns	r1, r1
 1274 000a 0180     		strh	r1, [r0, #0]	@ movhi
 1275 000c 7047     		bx	lr
 1276              		.cfi_endproc
 1277              	.LFE138:
 1279 000e 00BF     		.text
 1280              	.Letext0:
 1281              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 1282              		.file 3 "../../lib/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1283              		.file 4 "../../lib/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
 1284              		.file 5 "../../lib/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h"
 1285              		.file 6 "../../lib/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_usart.c
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:17     .text.USART_DeInit:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:22     .text.USART_DeInit:00000000 USART_DeInit
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:153    .text.USART_DeInit:000000b0 $d
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:163    .text.USART_Init:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:168    .text.USART_Init:00000000 USART_Init
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:347    .text.USART_Init:000000cc $d
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:353    .text.USART_StructInit:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:358    .text.USART_StructInit:00000000 USART_StructInit
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:387    .text.USART_ClockInit:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:392    .text.USART_ClockInit:00000000 USART_ClockInit
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:442    .text.USART_ClockStructInit:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:447    .text.USART_ClockStructInit:00000000 USART_ClockStructInit
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:469    .text.USART_Cmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:474    .text.USART_Cmd:00000000 USART_Cmd
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:502    .text.USART_SetPrescaler:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:507    .text.USART_SetPrescaler:00000000 USART_SetPrescaler
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:530    .text.USART_OverSampling8Cmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:535    .text.USART_OverSampling8Cmd:00000000 USART_OverSampling8Cmd
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:562    .text.USART_OneBitMethodCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:567    .text.USART_OneBitMethodCmd:00000000 USART_OneBitMethodCmd
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:595    .text.USART_SendData:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:600    .text.USART_SendData:00000000 USART_SendData
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:618    .text.USART_ReceiveData:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:623    .text.USART_ReceiveData:00000000 USART_ReceiveData
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:642    .text.USART_SetAddress:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:647    .text.USART_SetAddress:00000000 USART_SetAddress
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:672    .text.USART_ReceiverWakeUpCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:677    .text.USART_ReceiverWakeUpCmd:00000000 USART_ReceiverWakeUpCmd
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:705    .text.USART_WakeUpConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:710    .text.USART_WakeUpConfig:00000000 USART_WakeUpConfig
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:735    .text.USART_LINBreakDetectLengthConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:740    .text.USART_LINBreakDetectLengthConfig:00000000 USART_LINBreakDetectLengthConfig
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:765    .text.USART_LINCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:770    .text.USART_LINCmd:00000000 USART_LINCmd
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:798    .text.USART_SendBreak:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:803    .text.USART_SendBreak:00000000 USART_SendBreak
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:821    .text.USART_HalfDuplexCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:826    .text.USART_HalfDuplexCmd:00000000 USART_HalfDuplexCmd
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:854    .text.USART_SetGuardTime:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:859    .text.USART_SetGuardTime:00000000 USART_SetGuardTime
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:882    .text.USART_SmartCardCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:887    .text.USART_SmartCardCmd:00000000 USART_SmartCardCmd
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:915    .text.USART_SmartCardNACKCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:920    .text.USART_SmartCardNACKCmd:00000000 USART_SmartCardNACKCmd
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:948    .text.USART_IrDAConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:953    .text.USART_IrDAConfig:00000000 USART_IrDAConfig
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:978    .text.USART_IrDACmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:983    .text.USART_IrDACmd:00000000 USART_IrDACmd
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:1011   .text.USART_DMACmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:1016   .text.USART_DMACmd:00000000 USART_DMACmd
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:1045   .text.USART_ITConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:1050   .text.USART_ITConfig:00000000 USART_ITConfig
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:1119   .text.USART_GetFlagStatus:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:1124   .text.USART_GetFlagStatus:00000000 USART_GetFlagStatus
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:1147   .text.USART_ClearFlag:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:1152   .text.USART_ClearFlag:00000000 USART_ClearFlag
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:1169   .text.USART_GetITStatus:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:1174   .text.USART_GetITStatus:00000000 USART_GetITStatus
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:1253   .text.USART_ClearITPendingBit:00000000 $t
C:\Users\root\AppData\Local\Temp\ccW7qNxm.s:1258   .text.USART_ClearITPendingBit:00000000 USART_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
