   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 23, 1
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.thumb
  12              		.file	"stm32f4xx_pwr.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.PWR_DeInit,"ax",%progbits
  17              		.align	2
  18              		.global	PWR_DeInit
  19              		.thumb
  20              		.thumb_func
  22              	PWR_DeInit:
  23              	.LFB110:
  24              		.file 1 "../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c"
   1:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
   2:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
   3:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @file    stm32f4xx_pwr.c
   4:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @author  MCD Application Team
   5:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @version V1.0.2
   6:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @date    05-March-2012
   7:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:           
   9:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Backup Domain Access
  10:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - PVD configuration
  11:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - WakeUp pin configuration
  12:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Main and Backup Regulators configuration
  13:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - FLASH Power Down configuration
  14:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Low Power modes configuration
  15:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Flags management
  16:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *               
  17:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
  18:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @attention
  19:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  20:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  21:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  22:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  23:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * You may not use this file except in compliance with the License.
  24:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * You may obtain a copy of the License at:
  25:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  26:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  27:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  28:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * Unless required by applicable law or agreed to in writing, software 
  29:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  30:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  31:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * See the License for the specific language governing permissions and
  32:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * limitations under the License.
  33:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  34:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
  35:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */ 
  36:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  37:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Includes ------------------------------------------------------------------*/
  38:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #include "stm32f4xx_pwr.h"
  39:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #include "stm32f4xx_rcc.h"
  40:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  41:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  42:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  43:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
  44:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  45:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR 
  46:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief PWR driver modules
  47:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  48:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */ 
  49:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  50:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  51:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private define ------------------------------------------------------------*/
  52:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --------- PWR registers bit address in the alias region ---------- */
  53:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
  54:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  55:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --- CR Register ---*/
  56:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  57:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of DBP bit */
  58:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_OFFSET                (PWR_OFFSET + 0x00)
  59:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define DBP_BitNumber            0x08
  60:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
  61:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  62:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of PVDE bit */
  63:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PVDE_BitNumber           0x04
  64:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
  65:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  66:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of FPDS bit */
  67:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define FPDS_BitNumber           0x09
  68:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_FPDS_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (FPDS_BitNumber * 4))
  69:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  70:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of PMODE bit */
  71:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PMODE_BitNumber           0x0E
  72:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PMODE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PMODE_BitNumber * 4))
  73:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  74:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  75:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --- CSR Register ---*/
  76:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  77:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of EWUP bit */
  78:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
  79:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define EWUP_BitNumber           0x08
  80:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
  81:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  82:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of BRE bit */
  83:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define BRE_BitNumber            0x09
  84:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_BRE_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (BRE_BitNumber * 4))
  85:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  86:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* ------------------ PWR registers bit mask ------------------------ */
  87:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  88:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* CR register bit mask */
  89:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_DS_MASK               ((uint32_t)0xFFFFFFFC)
  90:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
  91:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  92:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private macro -------------------------------------------------------------*/
  93:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private variables ---------------------------------------------------------*/
  94:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  95:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private functions ---------------------------------------------------------*/
  96:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  97:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Private_Functions
  98:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  99:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 100:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 101:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group1 Backup Domain Access function 
 102:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Backup Domain Access function  
 103:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 104:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 105:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 106:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                             Backup Domain Access function 
 107:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 108:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 109:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   After reset, the backup domain (RTC registers, RTC backup data 
 110:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   registers and backup SRAM) is protected against possible unwanted 
 111:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   write accesses. 
 112:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   To enable access to the RTC Domain and RTC registers, proceed as follows:
 113:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Enable the Power Controller (PWR) APB1 interface clock using the
 114:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       RCC_APB1PeriphClockCmd() function.
 115:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
 116:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 117:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 118:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 119:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 120:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 121:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 122:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
 123:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  None
 124:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 125:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 126:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_DeInit(void)
 127:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  25              		.loc 1 127 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 08B5     		push	{r3, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 3, -8
  33              		.cfi_offset 14, -4
 128:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  34              		.loc 1 128 0
  35 0002 4FF08050 		mov	r0, #268435456
  36 0006 0121     		movs	r1, #1
  37 0008 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  38              	.LVL0:
 129:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
  39              		.loc 1 129 0
  40 000c 4FF08050 		mov	r0, #268435456
  41 0010 0021     		movs	r1, #0
 130:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
  42              		.loc 1 130 0
  43 0012 BDE80840 		pop	{r3, lr}
 129:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
  44              		.loc 1 129 0
  45 0016 FFF7FEBF 		b	RCC_APB1PeriphResetCmd
  46              	.LVL1:
  47              		.cfi_endproc
  48              	.LFE110:
  50 001a 00BF     		.section	.text.PWR_BackupAccessCmd,"ax",%progbits
  51              		.align	2
  52              		.global	PWR_BackupAccessCmd
  53              		.thumb
  54              		.thumb_func
  56              	PWR_BackupAccessCmd:
  57              	.LFB111:
 131:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 132:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 133:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables access to the backup domain (RTC registers, RTC 
 134:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         backup data registers and backup SRAM).
 135:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 136:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         Backup Domain Access should be kept enabled.
 137:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the access to the backup domain.
 138:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 139:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 140:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 141:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_BackupAccessCmd(FunctionalState NewState)
 142:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  58              		.loc 1 142 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63              	.LVL2:
 143:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 144:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 145:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 146:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
  64              		.loc 1 146 0
  65 0000 014B     		ldr	r3, .L3
  66 0002 1860     		str	r0, [r3, #0]
  67 0004 7047     		bx	lr
  68              	.L4:
  69 0006 00BF     		.align	2
  70              	.L3:
  71 0008 20000E42 		.word	1108213792
  72              		.cfi_endproc
  73              	.LFE111:
  75              		.section	.text.PWR_PVDLevelConfig,"ax",%progbits
  76              		.align	2
  77              		.global	PWR_PVDLevelConfig
  78              		.thumb
  79              		.thumb_func
  81              	PWR_PVDLevelConfig:
  82              	.LFB112:
 147:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 148:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 149:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 150:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 151:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 152:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 153:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group2 PVD configuration functions
 154:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   PVD configuration functions 
 155:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 156:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 157:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 158:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                            PVD configuration functions
 159:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 160:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 161:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The PVD is used to monitor the VDD power supply by comparing it to a threshold
 162:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 163:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - A PVDO flag is available to indicate if VDD/VDDA is higher or lower than the 
 164:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    PVD threshold. This event is internally connected to the EXTI line16
 165:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and can generate an interrupt if enabled through the EXTI registers.
 166:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The PVD is stopped in Standby mode.
 167:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 168:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 169:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 170:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 171:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 172:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 173:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 174:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_PVDLevel: specifies the PVD detection level
 175:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 176:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_0
 177:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_1
 178:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_2
 179:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_3
 180:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_4
 181:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_5
 182:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_6
 183:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_7
 184:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   Refer to the electrical characteristics of your device datasheet for
 185:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         more details about the voltage threshold corresponding to each 
 186:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         detection level.
 187:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 188:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 189:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
 190:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  83              		.loc 1 190 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  87              		@ link register save eliminated.
  88              	.LVL3:
  89              	.LVL4:
 191:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 192:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 193:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 194:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
 195:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 196:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
  90              		.loc 1 196 0
  91 0000 034B     		ldr	r3, .L6
  92 0002 1A68     		ldr	r2, [r3, #0]
  93              	.LVL5:
 197:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 198:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PLS[7:5] bits */
 199:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_PLS_MASK;
  94              		.loc 1 199 0
  95 0004 22F0E002 		bic	r2, r2, #224
  96              	.LVL6:
 200:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 201:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set PLS[7:5] bits according to PWR_PVDLevel value */
 202:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_PVDLevel;
  97              		.loc 1 202 0
  98 0008 1043     		orrs	r0, r0, r2
  99              	.LVL7:
 203:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 204:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 205:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 100              		.loc 1 205 0
 101 000a 1860     		str	r0, [r3, #0]
 102 000c 7047     		bx	lr
 103              	.L7:
 104 000e 00BF     		.align	2
 105              	.L6:
 106 0010 00700040 		.word	1073770496
 107              		.cfi_endproc
 108              	.LFE112:
 110              		.section	.text.PWR_PVDCmd,"ax",%progbits
 111              		.align	2
 112              		.global	PWR_PVDCmd
 113              		.thumb
 114              		.thumb_func
 116              	PWR_PVDCmd:
 117              	.LFB113:
 206:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 207:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 208:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 209:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Power Voltage Detector(PVD).
 210:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the PVD.
 211:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 212:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 213:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 214:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_PVDCmd(FunctionalState NewState)
 215:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 118              		.loc 1 215 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              		@ link register save eliminated.
 123              	.LVL8:
 216:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 217:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 218:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 219:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 124              		.loc 1 219 0
 125 0000 014B     		ldr	r3, .L9
 126 0002 1860     		str	r0, [r3, #0]
 127 0004 7047     		bx	lr
 128              	.L10:
 129 0006 00BF     		.align	2
 130              	.L9:
 131 0008 10000E42 		.word	1108213776
 132              		.cfi_endproc
 133              	.LFE113:
 135              		.section	.text.PWR_WakeUpPinCmd,"ax",%progbits
 136              		.align	2
 137              		.global	PWR_WakeUpPinCmd
 138              		.thumb
 139              		.thumb_func
 141              	PWR_WakeUpPinCmd:
 142              	.LFB114:
 220:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 221:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 222:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 223:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 224:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 225:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 226:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group3 WakeUp pin configuration functions
 227:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   WakeUp pin configuration functions 
 228:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 229:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 230:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 231:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     WakeUp pin configuration functions
 232:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 233:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 234:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - WakeUp pin is used to wakeup the system from Standby mode. This pin is 
 235:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    forced in input pull down configuration and is active on rising edges.
 236:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - There is only one WakeUp pin: WakeUp Pin 1 on PA.00.
 237:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 238:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 239:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 240:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 241:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 242:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 243:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 244:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 245:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 246:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 247:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 248:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_WakeUpPinCmd(FunctionalState NewState)
 249:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 143              		.loc 1 249 0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              		@ link register save eliminated.
 148              	.LVL9:
 250:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */  
 251:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 252:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 253:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 149              		.loc 1 253 0
 150 0000 014B     		ldr	r3, .L12
 151 0002 1860     		str	r0, [r3, #0]
 152 0004 7047     		bx	lr
 153              	.L13:
 154 0006 00BF     		.align	2
 155              	.L12:
 156 0008 A0000E42 		.word	1108213920
 157              		.cfi_endproc
 158              	.LFE114:
 160              		.section	.text.PWR_BackupRegulatorCmd,"ax",%progbits
 161              		.align	2
 162              		.global	PWR_BackupRegulatorCmd
 163              		.thumb
 164              		.thumb_func
 166              	PWR_BackupRegulatorCmd:
 167              	.LFB115:
 254:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 255:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 256:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 257:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 258:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 259:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 260:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group4 Main and Backup Regulators configuration functions
 261:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Main and Backup Regulators configuration functions 
 262:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 263:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 264:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 265:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     Main and Backup Regulators configuration functions
 266:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 267:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 268:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The backup domain includes 4 Kbytes of backup SRAM accessible only from the 
 269:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    CPU, and address in 32-bit, 16-bit or 8-bit mode. Its content is retained 
 270:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    even in Standby or VBAT mode when the low power backup regulator is enabled. 
 271:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    It can be considered as an internal EEPROM when VBAT is always present.
 272:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    You can use the PWR_BackupRegulatorCmd() function to enable the low power
 273:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    backup regulator and use the PWR_GetFlagStatus(PWR_FLAG_BRR) to check if it is
 274:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ready or not. 
 275:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 276:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - When the backup domain is supplied by VDD (analog switch connected to VDD) 
 277:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the backup SRAM is powered from VDD which replaces the VBAT power supply to 
 278:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    save battery life.
 279:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 280:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The backup SRAM is not mass erased by an tamper event. It is read protected 
 281:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    to prevent confidential data, such as cryptographic private key, from being 
 282:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    accessed. The backup SRAM can be erased only through the Flash interface when
 283:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    a protection level change from level 1 to level 0 is requested. 
 284:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Refer to the description of Read protection (RDP) in the Flash programming manual.
 285:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 286:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The main internal regulator can be configured to have a tradeoff between performance
 287:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and power consumption when the device does not operate at the maximum frequency. 
 288:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    This is done through PWR_MainRegulatorModeConfig() function which configure VOS bit
 289:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    in PWR_CR register: 
 290:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - When this bit is set (Regulator voltage output Scale 1 mode selected) the System
 291:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         frequency can go up to 168 MHz. 
 292:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - When this bit is reset (Regulator voltage output Scale 2 mode selected) the System
 293:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         frequency can go up to 144 MHz. 
 294:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Refer to the datasheets for more details.
 295:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            
 296:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 297:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 298:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 299:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 300:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 301:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Backup Regulator.
 302:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Backup Regulator.
 303:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 304:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 305:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 306:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_BackupRegulatorCmd(FunctionalState NewState)
 307:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 168              		.loc 1 307 0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 0
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 172              		@ link register save eliminated.
 173              	.LVL10:
 308:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 309:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 310:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 311:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 174              		.loc 1 311 0
 175 0000 014B     		ldr	r3, .L15
 176 0002 1860     		str	r0, [r3, #0]
 177 0004 7047     		bx	lr
 178              	.L16:
 179 0006 00BF     		.align	2
 180              	.L15:
 181 0008 A4000E42 		.word	1108213924
 182              		.cfi_endproc
 183              	.LFE115:
 185              		.section	.text.PWR_MainRegulatorModeConfig,"ax",%progbits
 186              		.align	2
 187              		.global	PWR_MainRegulatorModeConfig
 188              		.thumb
 189              		.thumb_func
 191              	PWR_MainRegulatorModeConfig:
 192              	.LFB116:
 312:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 313:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 314:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 315:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Configures the main internal regulator output voltage.
 316:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator_Voltage: specifies the regulator output voltage to achieve
 317:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         a tradeoff between performance and power consumption when the device does
 318:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         not operate at the maximum frequency (refer to the datasheets for more details).
 319:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 320:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale1: Regulator voltage output Scale 1 mode, 
 321:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 168 MHz. 
 322:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale2: Regulator voltage output Scale 2 mode, 
 323:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 144 MHz.    
 324:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 325:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 326:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
 327:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 193              		.loc 1 327 0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197              		@ link register save eliminated.
 198              	.LVL11:
 328:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 329:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));
 330:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 331:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
 332:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 333:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
 199              		.loc 1 333 0
 200 0000 054B     		ldr	r3, .L22
 201 0002 1A68     		ldr	r2, [r3, #0]
 331:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
 202              		.loc 1 331 0
 203 0004 18B1     		cbz	r0, .L21
 334:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 335:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 336:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {    
 337:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CR |= PWR_Regulator_Voltage_Scale1;
 204              		.loc 1 337 0
 205 0006 42F48042 		orr	r2, r2, #16384
 206 000a 1A60     		str	r2, [r3, #0]
 207 000c 7047     		bx	lr
 208              	.L21:
 333:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
 209              		.loc 1 333 0
 210 000e 22F48042 		bic	r2, r2, #16384
 211 0012 1A60     		str	r2, [r3, #0]
 212 0014 7047     		bx	lr
 213              	.L23:
 214 0016 00BF     		.align	2
 215              	.L22:
 216 0018 00700040 		.word	1073770496
 217              		.cfi_endproc
 218              	.LFE116:
 220              		.section	.text.PWR_FlashPowerDownCmd,"ax",%progbits
 221              		.align	2
 222              		.global	PWR_FlashPowerDownCmd
 223              		.thumb
 224              		.thumb_func
 226              	PWR_FlashPowerDownCmd:
 227              	.LFB117:
 338:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 339:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 340:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 341:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 342:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 343:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 344:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 345:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group5 FLASH Power Down configuration functions
 346:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   FLASH Power Down configuration functions 
 347:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 348:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 349:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 350:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            FLASH Power Down configuration functions
 351:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 352:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 353:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - By setting the FPDS bit in the PWR_CR register by using the PWR_FlashPowerDownCmd()
 354:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    function, the Flash memory also enters power down mode when the device enters 
 355:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Stop mode. When the Flash memory is in power down mode, an additional startup 
 356:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    delay is incurred when waking up from Stop mode.
 357:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 358:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 359:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 360:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 361:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 362:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 363:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Flash Power Down in STOP mode.
 364:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Flash power mode.
 365:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 366:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 367:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 368:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_FlashPowerDownCmd(FunctionalState NewState)
 369:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 228              		.loc 1 369 0
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 0
 231              		@ frame_needed = 0, uses_anonymous_args = 0
 232              		@ link register save eliminated.
 233              	.LVL12:
 370:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 371:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 372:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 373:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 234              		.loc 1 373 0
 235 0000 014B     		ldr	r3, .L25
 236 0002 1860     		str	r0, [r3, #0]
 237 0004 7047     		bx	lr
 238              	.L26:
 239 0006 00BF     		.align	2
 240              	.L25:
 241 0008 24000E42 		.word	1108213796
 242              		.cfi_endproc
 243              	.LFE117:
 245              		.section	.text.PWR_EnterSTOPMode,"ax",%progbits
 246              		.align	2
 247              		.global	PWR_EnterSTOPMode
 248              		.thumb
 249              		.thumb_func
 251              	PWR_EnterSTOPMode:
 252              	.LFB118:
 374:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 375:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 376:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 377:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 378:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 379:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 380:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group6 Low Power modes configuration functions
 381:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Low Power modes configuration functions 
 382:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 383:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 384:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 385:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     Low Power modes configuration functions
 386:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 387:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 388:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   The devices feature 3 low-power modes:
 389:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Sleep mode: Cortex-M4 core stopped, peripherals kept running.
 390:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Stop mode: all clocks are stopped, regulator running, regulator in low power mode
 391:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Standby mode: 1.2V domain powered off.
 392:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 393:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Sleep mode
 394:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ===========
 395:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 396:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Sleep mode is entered by using the __WFI() or __WFE() functions.
 397:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 398:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - Any peripheral interrupt acknowledged by the nested vectored interrupt 
 399:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         controller (NVIC) can wake up the device from Sleep mode.
 400:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 401:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Stop mode
 402:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ==========
 403:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    In Stop mode, all clocks in the 1.2V domain are stopped, the PLL, the HSI,
 404:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and the HSE RC oscillators are disabled. Internal SRAM and register contents 
 405:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    are preserved.
 406:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The voltage regulator can be configured either in normal or low-power mode.
 407:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    To minimize the consumption In Stop mode, FLASH can be powered off before 
 408:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    entering the Stop mode. It can be switched on again by software after exiting 
 409:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the Stop mode using the PWR_FlashPowerDownCmd() function. 
 410:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 411:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 412:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Stop mode is entered using the PWR_EnterSTOPMode(PWR_Regulator_LowPower,) 
 413:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         function with regulator in LowPower or with Regulator ON.
 414:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 415:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 416:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       
 417:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Standby mode
 418:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ============
 419:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The Standby mode allows to achieve the lowest power consumption. It is based 
 420:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    on the Cortex-M4 deepsleep mode, with the voltage regulator disabled. 
 421:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The 1.2V domain is consequently powered off. The PLL, the HSI oscillator and 
 422:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the HSE oscillator are also switched off. SRAM and register contents are lost 
 423:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    except for the RTC registers, RTC backup registers, backup SRAM and Standby 
 424:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    circuitry.
 425:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 426:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The voltage regulator is OFF.
 427:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       
 428:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 429:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Standby mode is entered using the PWR_EnterSTANDBYMode() function.
 430:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 431:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wakeup,
 432:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         tamper event, time-stamp event, external reset in NRST pin, IWDG reset.              
 433:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 434:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Auto-wakeup (AWU) from low-power mode
 435:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    =====================================
 436:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC 
 437:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Wakeup event, a tamper event, a time-stamp event, or a comparator event, 
 438:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    without depending on an external interrupt (Auto-wakeup mode).
 439:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 440:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - RTC auto-wakeup (AWU) from the Stop mode
 441:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      ----------------------------------------
 442:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      
 443:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC alarm event, it is necessary to:
 444:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 17 to be sensitive to rising edges (Interrupt 
 445:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 446:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 447:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 448:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          and RTC_AlarmCmd() functions.
 449:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
 450:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        is necessary to:
 451:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 21 to be sensitive to rising edges (Interrupt 
 452:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 453:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 454:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          function
 455:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to detect the tamper or time stamp event using the
 456:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 457:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          functions.
 458:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC WakeUp event, it is necessary to:
 459:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 22 to be sensitive to rising edges (Interrupt 
 460:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 461:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 462:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
 463:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 464:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 465:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - RTC auto-wakeup (AWU) from the Standby mode
 466:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      -------------------------------------------
 467:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC alarm event, it is necessary to:
 468:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 469:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 470:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          and RTC_AlarmCmd() functions.
 471:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC Tamper or time stamp event, it 
 472:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        is necessary to:
 473:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 474:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          function
 475:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to detect the tamper or time stamp event using the
 476:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 477:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          functions.
 478:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC WakeUp event, it is necessary to:
 479:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 480:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
 481:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 482:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 483:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 484:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 485:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 486:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 487:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 488:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters STOP mode.
 489:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *   
 490:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 491:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
 492:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 493:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When the voltage regulator operates in low power mode, an additional 
 494:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 495:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 496:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         is higher although the startup time is reduced.           
 497:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *     
 498:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 499:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 500:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_ON: STOP mode with regulator ON
 501:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_LowPower: STOP mode with regulator in low power mode
 502:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 503:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 504:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 505:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 506:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 507:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 508:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 509:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 253              		.loc 1 509 0
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 0
 256              		@ frame_needed = 0, uses_anonymous_args = 0
 257              		@ link register save eliminated.
 258              	.LVL13:
 259 0000 10B4     		push	{r4}
 260              	.LCFI1:
 261              		.cfi_def_cfa_offset 4
 262              		.cfi_offset 4, -4
 263              	.LVL14:
 510:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 511:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 512:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 513:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 514:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 515:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 516:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 517:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 264              		.loc 1 517 0
 265 0002 0B4A     		ldr	r2, .L31
 518:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PDDS and LPDSR bits */
 519:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_DS_MASK;
 520:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 521:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set LPDSR bit according to PWR_Regulator value */
 522:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_Regulator;
 523:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 524:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 525:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 526:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 527:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 528:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 266              		.loc 1 528 0
 267 0004 0B4B     		ldr	r3, .L31+4
 517:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 268              		.loc 1 517 0
 269 0006 1468     		ldr	r4, [r2, #0]
 270              	.LVL15:
 519:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_DS_MASK;
 271              		.loc 1 519 0
 272 0008 24F00304 		bic	r4, r4, #3
 273              	.LVL16:
 522:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_Regulator;
 274              		.loc 1 522 0
 275 000c 2043     		orrs	r0, r0, r4
 276              	.LVL17:
 525:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 277              		.loc 1 525 0
 278 000e 1060     		str	r0, [r2, #0]
 279              		.loc 1 528 0
 280 0010 1A69     		ldr	r2, [r3, #16]
 281 0012 42F00402 		orr	r2, r2, #4
 282 0016 1A61     		str	r2, [r3, #16]
 529:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 530:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 531:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 283              		.loc 1 531 0
 284 0018 0129     		cmp	r1, #1
 285 001a 07D0     		beq	.L30
 286              	.LBB8:
 287              	.LBB9:
 288              		.file 2 "../../lib/CMSIS/Include/core_cmInstr.h"
   1:../../lib/CMSIS/Include/core_cmInstr.h **** /**************************************************************************//**
   2:../../lib/CMSIS/Include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:../../lib/CMSIS/Include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:../../lib/CMSIS/Include/core_cmInstr.h ****  * @version  V2.10
   5:../../lib/CMSIS/Include/core_cmInstr.h ****  * @date     19. July 2011
   6:../../lib/CMSIS/Include/core_cmInstr.h ****  *
   7:../../lib/CMSIS/Include/core_cmInstr.h ****  * @note
   8:../../lib/CMSIS/Include/core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:../../lib/CMSIS/Include/core_cmInstr.h ****  *
  10:../../lib/CMSIS/Include/core_cmInstr.h ****  * @par
  11:../../lib/CMSIS/Include/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:../../lib/CMSIS/Include/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:../../lib/CMSIS/Include/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:../../lib/CMSIS/Include/core_cmInstr.h ****  *
  15:../../lib/CMSIS/Include/core_cmInstr.h ****  * @par
  16:../../lib/CMSIS/Include/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../../lib/CMSIS/Include/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../../lib/CMSIS/Include/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../../lib/CMSIS/Include/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../../lib/CMSIS/Include/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../../lib/CMSIS/Include/core_cmInstr.h ****  *
  22:../../lib/CMSIS/Include/core_cmInstr.h ****  ******************************************************************************/
  23:../../lib/CMSIS/Include/core_cmInstr.h **** 
  24:../../lib/CMSIS/Include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:../../lib/CMSIS/Include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:../../lib/CMSIS/Include/core_cmInstr.h **** 
  27:../../lib/CMSIS/Include/core_cmInstr.h **** 
  28:../../lib/CMSIS/Include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:../../lib/CMSIS/Include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:../../lib/CMSIS/Include/core_cmInstr.h ****   Access to dedicated instructions
  31:../../lib/CMSIS/Include/core_cmInstr.h ****   @{
  32:../../lib/CMSIS/Include/core_cmInstr.h **** */
  33:../../lib/CMSIS/Include/core_cmInstr.h **** 
  34:../../lib/CMSIS/Include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:../../lib/CMSIS/Include/core_cmInstr.h **** /* ARM armcc specific functions */
  36:../../lib/CMSIS/Include/core_cmInstr.h **** 
  37:../../lib/CMSIS/Include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:../../lib/CMSIS/Include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:../../lib/CMSIS/Include/core_cmInstr.h **** #endif
  40:../../lib/CMSIS/Include/core_cmInstr.h **** 
  41:../../lib/CMSIS/Include/core_cmInstr.h **** 
  42:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
  43:../../lib/CMSIS/Include/core_cmInstr.h **** 
  44:../../lib/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:../../lib/CMSIS/Include/core_cmInstr.h ****  */
  46:../../lib/CMSIS/Include/core_cmInstr.h **** #define __NOP                             __nop
  47:../../lib/CMSIS/Include/core_cmInstr.h **** 
  48:../../lib/CMSIS/Include/core_cmInstr.h **** 
  49:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:../../lib/CMSIS/Include/core_cmInstr.h **** 
  51:../../lib/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:../../lib/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
  53:../../lib/CMSIS/Include/core_cmInstr.h ****  */
  54:../../lib/CMSIS/Include/core_cmInstr.h **** #define __WFI                             __wfi
  55:../../lib/CMSIS/Include/core_cmInstr.h **** 
  56:../../lib/CMSIS/Include/core_cmInstr.h **** 
  57:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
  58:../../lib/CMSIS/Include/core_cmInstr.h **** 
  59:../../lib/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:../../lib/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:../../lib/CMSIS/Include/core_cmInstr.h ****  */
  62:../../lib/CMSIS/Include/core_cmInstr.h **** #define __WFE                             __wfe
  63:../../lib/CMSIS/Include/core_cmInstr.h **** 
  64:../../lib/CMSIS/Include/core_cmInstr.h **** 
  65:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
  66:../../lib/CMSIS/Include/core_cmInstr.h **** 
  67:../../lib/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:../../lib/CMSIS/Include/core_cmInstr.h ****  */
  69:../../lib/CMSIS/Include/core_cmInstr.h **** #define __SEV                             __sev
  70:../../lib/CMSIS/Include/core_cmInstr.h **** 
  71:../../lib/CMSIS/Include/core_cmInstr.h **** 
  72:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:../../lib/CMSIS/Include/core_cmInstr.h **** 
  74:../../lib/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:../../lib/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:../../lib/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:../../lib/CMSIS/Include/core_cmInstr.h ****  */
  78:../../lib/CMSIS/Include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:../../lib/CMSIS/Include/core_cmInstr.h **** 
  80:../../lib/CMSIS/Include/core_cmInstr.h **** 
  81:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:../../lib/CMSIS/Include/core_cmInstr.h **** 
  83:../../lib/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:../../lib/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:../../lib/CMSIS/Include/core_cmInstr.h ****  */
  86:../../lib/CMSIS/Include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:../../lib/CMSIS/Include/core_cmInstr.h **** 
  88:../../lib/CMSIS/Include/core_cmInstr.h **** 
  89:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:../../lib/CMSIS/Include/core_cmInstr.h **** 
  91:../../lib/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:../../lib/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:../../lib/CMSIS/Include/core_cmInstr.h ****  */
  94:../../lib/CMSIS/Include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:../../lib/CMSIS/Include/core_cmInstr.h **** 
  96:../../lib/CMSIS/Include/core_cmInstr.h **** 
  97:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:../../lib/CMSIS/Include/core_cmInstr.h **** 
  99:../../lib/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:../../lib/CMSIS/Include/core_cmInstr.h **** 
 101:../../lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:../../lib/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 103:../../lib/CMSIS/Include/core_cmInstr.h ****  */
 104:../../lib/CMSIS/Include/core_cmInstr.h **** #define __REV                             __rev
 105:../../lib/CMSIS/Include/core_cmInstr.h **** 
 106:../../lib/CMSIS/Include/core_cmInstr.h **** 
 107:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:../../lib/CMSIS/Include/core_cmInstr.h **** 
 109:../../lib/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:../../lib/CMSIS/Include/core_cmInstr.h **** 
 111:../../lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:../../lib/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 113:../../lib/CMSIS/Include/core_cmInstr.h ****  */
 114:../../lib/CMSIS/Include/core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:../../lib/CMSIS/Include/core_cmInstr.h **** {
 116:../../lib/CMSIS/Include/core_cmInstr.h ****   rev16 r0, r0
 117:../../lib/CMSIS/Include/core_cmInstr.h ****   bx lr
 118:../../lib/CMSIS/Include/core_cmInstr.h **** }
 119:../../lib/CMSIS/Include/core_cmInstr.h **** 
 120:../../lib/CMSIS/Include/core_cmInstr.h **** 
 121:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:../../lib/CMSIS/Include/core_cmInstr.h **** 
 123:../../lib/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:../../lib/CMSIS/Include/core_cmInstr.h **** 
 125:../../lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:../../lib/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 127:../../lib/CMSIS/Include/core_cmInstr.h ****  */
 128:../../lib/CMSIS/Include/core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:../../lib/CMSIS/Include/core_cmInstr.h **** {
 130:../../lib/CMSIS/Include/core_cmInstr.h ****   revsh r0, r0
 131:../../lib/CMSIS/Include/core_cmInstr.h ****   bx lr
 132:../../lib/CMSIS/Include/core_cmInstr.h **** }
 133:../../lib/CMSIS/Include/core_cmInstr.h **** 
 134:../../lib/CMSIS/Include/core_cmInstr.h **** 
 135:../../lib/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:../../lib/CMSIS/Include/core_cmInstr.h **** 
 137:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:../../lib/CMSIS/Include/core_cmInstr.h **** 
 139:../../lib/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:../../lib/CMSIS/Include/core_cmInstr.h **** 
 141:../../lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:../../lib/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 143:../../lib/CMSIS/Include/core_cmInstr.h ****  */
 144:../../lib/CMSIS/Include/core_cmInstr.h **** #define __RBIT                            __rbit
 145:../../lib/CMSIS/Include/core_cmInstr.h **** 
 146:../../lib/CMSIS/Include/core_cmInstr.h **** 
 147:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:../../lib/CMSIS/Include/core_cmInstr.h **** 
 149:../../lib/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:../../lib/CMSIS/Include/core_cmInstr.h **** 
 151:../../lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:../../lib/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:../../lib/CMSIS/Include/core_cmInstr.h ****  */
 154:../../lib/CMSIS/Include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:../../lib/CMSIS/Include/core_cmInstr.h **** 
 156:../../lib/CMSIS/Include/core_cmInstr.h **** 
 157:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:../../lib/CMSIS/Include/core_cmInstr.h **** 
 159:../../lib/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:../../lib/CMSIS/Include/core_cmInstr.h **** 
 161:../../lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:../../lib/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:../../lib/CMSIS/Include/core_cmInstr.h ****  */
 164:../../lib/CMSIS/Include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:../../lib/CMSIS/Include/core_cmInstr.h **** 
 166:../../lib/CMSIS/Include/core_cmInstr.h **** 
 167:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:../../lib/CMSIS/Include/core_cmInstr.h **** 
 169:../../lib/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:../../lib/CMSIS/Include/core_cmInstr.h **** 
 171:../../lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:../../lib/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:../../lib/CMSIS/Include/core_cmInstr.h ****  */
 174:../../lib/CMSIS/Include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:../../lib/CMSIS/Include/core_cmInstr.h **** 
 176:../../lib/CMSIS/Include/core_cmInstr.h **** 
 177:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:../../lib/CMSIS/Include/core_cmInstr.h **** 
 179:../../lib/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:../../lib/CMSIS/Include/core_cmInstr.h **** 
 181:../../lib/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 182:../../lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:../../lib/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 184:../../lib/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 185:../../lib/CMSIS/Include/core_cmInstr.h ****  */
 186:../../lib/CMSIS/Include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:../../lib/CMSIS/Include/core_cmInstr.h **** 
 188:../../lib/CMSIS/Include/core_cmInstr.h **** 
 189:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:../../lib/CMSIS/Include/core_cmInstr.h **** 
 191:../../lib/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:../../lib/CMSIS/Include/core_cmInstr.h **** 
 193:../../lib/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 194:../../lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:../../lib/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 196:../../lib/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 197:../../lib/CMSIS/Include/core_cmInstr.h ****  */
 198:../../lib/CMSIS/Include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:../../lib/CMSIS/Include/core_cmInstr.h **** 
 200:../../lib/CMSIS/Include/core_cmInstr.h **** 
 201:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:../../lib/CMSIS/Include/core_cmInstr.h **** 
 203:../../lib/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:../../lib/CMSIS/Include/core_cmInstr.h **** 
 205:../../lib/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 206:../../lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:../../lib/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 208:../../lib/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 209:../../lib/CMSIS/Include/core_cmInstr.h ****  */
 210:../../lib/CMSIS/Include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:../../lib/CMSIS/Include/core_cmInstr.h **** 
 212:../../lib/CMSIS/Include/core_cmInstr.h **** 
 213:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:../../lib/CMSIS/Include/core_cmInstr.h **** 
 215:../../lib/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:../../lib/CMSIS/Include/core_cmInstr.h **** 
 217:../../lib/CMSIS/Include/core_cmInstr.h ****  */
 218:../../lib/CMSIS/Include/core_cmInstr.h **** #define __CLREX                           __clrex
 219:../../lib/CMSIS/Include/core_cmInstr.h **** 
 220:../../lib/CMSIS/Include/core_cmInstr.h **** 
 221:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 222:../../lib/CMSIS/Include/core_cmInstr.h **** 
 223:../../lib/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 224:../../lib/CMSIS/Include/core_cmInstr.h **** 
 225:../../lib/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:../../lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:../../lib/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 228:../../lib/CMSIS/Include/core_cmInstr.h ****  */
 229:../../lib/CMSIS/Include/core_cmInstr.h **** #define __SSAT                            __ssat
 230:../../lib/CMSIS/Include/core_cmInstr.h **** 
 231:../../lib/CMSIS/Include/core_cmInstr.h **** 
 232:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:../../lib/CMSIS/Include/core_cmInstr.h **** 
 234:../../lib/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 235:../../lib/CMSIS/Include/core_cmInstr.h **** 
 236:../../lib/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:../../lib/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:../../lib/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 239:../../lib/CMSIS/Include/core_cmInstr.h ****  */
 240:../../lib/CMSIS/Include/core_cmInstr.h **** #define __USAT                            __usat
 241:../../lib/CMSIS/Include/core_cmInstr.h **** 
 242:../../lib/CMSIS/Include/core_cmInstr.h **** 
 243:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 244:../../lib/CMSIS/Include/core_cmInstr.h **** 
 245:../../lib/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:../../lib/CMSIS/Include/core_cmInstr.h **** 
 247:../../lib/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:../../lib/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 249:../../lib/CMSIS/Include/core_cmInstr.h ****  */
 250:../../lib/CMSIS/Include/core_cmInstr.h **** #define __CLZ                             __clz 
 251:../../lib/CMSIS/Include/core_cmInstr.h **** 
 252:../../lib/CMSIS/Include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:../../lib/CMSIS/Include/core_cmInstr.h **** 
 254:../../lib/CMSIS/Include/core_cmInstr.h **** 
 255:../../lib/CMSIS/Include/core_cmInstr.h **** 
 256:../../lib/CMSIS/Include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:../../lib/CMSIS/Include/core_cmInstr.h **** /* IAR iccarm specific functions */
 258:../../lib/CMSIS/Include/core_cmInstr.h **** 
 259:../../lib/CMSIS/Include/core_cmInstr.h **** #include <cmsis_iar.h>
 260:../../lib/CMSIS/Include/core_cmInstr.h **** 
 261:../../lib/CMSIS/Include/core_cmInstr.h **** 
 262:../../lib/CMSIS/Include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:../../lib/CMSIS/Include/core_cmInstr.h **** /* GNU gcc specific functions */
 264:../../lib/CMSIS/Include/core_cmInstr.h **** 
 265:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
 266:../../lib/CMSIS/Include/core_cmInstr.h **** 
 267:../../lib/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:../../lib/CMSIS/Include/core_cmInstr.h ****  */
 269:../../lib/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:../../lib/CMSIS/Include/core_cmInstr.h **** {
 271:../../lib/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("nop");
 272:../../lib/CMSIS/Include/core_cmInstr.h **** }
 273:../../lib/CMSIS/Include/core_cmInstr.h **** 
 274:../../lib/CMSIS/Include/core_cmInstr.h **** 
 275:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:../../lib/CMSIS/Include/core_cmInstr.h **** 
 277:../../lib/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:../../lib/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
 279:../../lib/CMSIS/Include/core_cmInstr.h ****  */
 280:../../lib/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:../../lib/CMSIS/Include/core_cmInstr.h **** {
 282:../../lib/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 283:../../lib/CMSIS/Include/core_cmInstr.h **** }
 284:../../lib/CMSIS/Include/core_cmInstr.h **** 
 285:../../lib/CMSIS/Include/core_cmInstr.h **** 
 286:../../lib/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
 287:../../lib/CMSIS/Include/core_cmInstr.h **** 
 288:../../lib/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:../../lib/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:../../lib/CMSIS/Include/core_cmInstr.h ****  */
 291:../../lib/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:../../lib/CMSIS/Include/core_cmInstr.h **** {
 293:../../lib/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfe");
 289              		.loc 2 293 0
 290              	@ 293 "../../lib/CMSIS/Include/core_cmInstr.h" 1
 291 001c 20BF     		wfe
 292              	@ 0 "" 2
 293              		.thumb
 294              	.L29:
 295              	.LBE9:
 296              	.LBE8:
 532:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {   
 533:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Interrupt */
 534:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFI();
 535:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 536:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 537:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 538:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Event */
 539:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFE();
 540:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 541:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 542:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 297              		.loc 1 542 0
 298 001e 054B     		ldr	r3, .L31+4
 299 0020 1A69     		ldr	r2, [r3, #16]
 300 0022 22F00402 		bic	r2, r2, #4
 301 0026 1A61     		str	r2, [r3, #16]
 543:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 302              		.loc 1 543 0
 303 0028 10BC     		pop	{r4}
 304 002a 7047     		bx	lr
 305              	.L30:
 306              	.LBB10:
 307              	.LBB11:
 282:../../lib/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 308              		.loc 2 282 0
 309              	@ 282 "../../lib/CMSIS/Include/core_cmInstr.h" 1
 310 002c 30BF     		wfi
 311              	@ 0 "" 2
 312              		.thumb
 313 002e F6E7     		b	.L29
 314              	.L32:
 315              		.align	2
 316              	.L31:
 317 0030 00700040 		.word	1073770496
 318 0034 00ED00E0 		.word	-536810240
 319              	.LBE11:
 320              	.LBE10:
 321              		.cfi_endproc
 322              	.LFE118:
 324              		.section	.text.PWR_EnterSTANDBYMode,"ax",%progbits
 325              		.align	2
 326              		.global	PWR_EnterSTANDBYMode
 327              		.thumb
 328              		.thumb_func
 330              	PWR_EnterSTANDBYMode:
 331              	.LFB119:
 544:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 545:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 546:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters STANDBY mode.
 547:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Standby mode, all I/O pins are high impedance except for:
 548:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - Reset pad (still available) 
 549:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - RTC_AF1 pin (PC13) if configured for tamper, time-stamp, RTC 
 550:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            Alarm out, or RTC clock calibration out.
 551:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
 552:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - WKUP pin 1 (PA0) if enabled.       
 553:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  None
 554:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 555:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 556:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterSTANDBYMode(void)
 557:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 332              		.loc 1 557 0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336              		@ link register save eliminated.
 558:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear Wakeup flag */
 559:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_CWUF;
 337              		.loc 1 559 0
 338 0000 074B     		ldr	r3, .L34
 560:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 561:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STANDBY mode */
 562:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 563:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 564:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 339              		.loc 1 565 0
 340 0002 084A     		ldr	r2, .L34+4
 559:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_CWUF;
 341              		.loc 1 559 0
 342 0004 1968     		ldr	r1, [r3, #0]
 343 0006 41F00401 		orr	r1, r1, #4
 344 000a 1960     		str	r1, [r3, #0]
 562:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 345              		.loc 1 562 0
 346 000c 1968     		ldr	r1, [r3, #0]
 347 000e 41F00201 		orr	r1, r1, #2
 348 0012 1960     		str	r1, [r3, #0]
 349              		.loc 1 565 0
 350 0014 1369     		ldr	r3, [r2, #16]
 351 0016 43F00403 		orr	r3, r3, #4
 352 001a 1361     		str	r3, [r2, #16]
 353              	.LBB12:
 354              	.LBB13:
 282:../../lib/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 355              		.loc 2 282 0
 356              	@ 282 "../../lib/CMSIS/Include/core_cmInstr.h" 1
 357 001c 30BF     		wfi
 358              	@ 0 "" 2
 359              		.thumb
 360 001e 7047     		bx	lr
 361              	.L35:
 362              		.align	2
 363              	.L34:
 364 0020 00700040 		.word	1073770496
 365 0024 00ED00E0 		.word	-536810240
 366              	.LBE13:
 367              	.LBE12:
 368              		.cfi_endproc
 369              	.LFE119:
 371              		.section	.text.PWR_GetFlagStatus,"ax",%progbits
 372              		.align	2
 373              		.global	PWR_GetFlagStatus
 374              		.thumb
 375              		.thumb_func
 377              	PWR_GetFlagStatus:
 378              	.LFB120:
 566:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* This option is used to ensure that store operations are completed */
 568:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined ( __CC_ARM   )
 569:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   __force_stores();
 570:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif
 571:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Request Wait For Interrupt */
 572:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   __WFI();
 573:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 574:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 575:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 576:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 577:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 578:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 579:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group7 Flags management functions
 580:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Flags management functions 
 581:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 582:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 583:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 584:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                            Flags management functions
 585:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 586:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 587:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 588:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 589:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 590:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 591:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 592:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Checks whether the specified PWR flag is set or not.
 593:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to check.
 594:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 595:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag. This flag indicates that a wakeup event 
 596:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  was received from the WKUP pin or from the RTC alarm (Alarm A 
 597:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  or Alarm B), RTC Tamper event, RTC TimeStamp event or RTC Wakeup.
 598:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  An additional wakeup event is detected if the WKUP pin is enabled 
 599:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  (by setting the EWUP bit) when the WKUP pin level is already high.  
 600:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag. This flag indicates that the system was
 601:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  resumed from StandBy mode.    
 602:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_PVDO: PVD Output. This flag is valid only if PVD is enabled 
 603:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  by the PWR_PVDCmd() function. The PVD is stopped by Standby mode 
 604:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  For this reason, this bit is equal to 0 after Standby or reset
 605:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  until the PVDE bit is set.
 606:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_BRR: Backup regulator ready flag. This bit is not reset 
 607:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  when the device wakes up from Standby mode or by a system reset 
 608:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  or power reset.  
 609:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_VOSRDY: This flag indicates that the Regulator voltage 
 610:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                 scaling output selection is ready. 
 611:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval The new state of PWR_FLAG (SET or RESET).
 612:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 613:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
 614:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 379              		.loc 1 614 0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 383              		@ link register save eliminated.
 384              	.LVL18:
 385              	.LVL19:
 615:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   FlagStatus bitstatus = RESET;
 616:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 617:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 618:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
 619:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 620:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 386              		.loc 1 620 0
 387 0000 034B     		ldr	r3, .L37
 388 0002 5B68     		ldr	r3, [r3, #4]
 389              	.LVL20:
 390 0004 1842     		tst	r0, r3
 621:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 622:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     bitstatus = SET;
 623:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 624:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 625:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 626:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     bitstatus = RESET;
 627:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 628:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Return the flag status */
 629:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   return bitstatus;
 630:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 391              		.loc 1 630 0
 392 0006 0CBF     		ite	eq
 393 0008 0020     		moveq	r0, #0
 394 000a 0120     		movne	r0, #1
 395              	.LVL21:
 396 000c 7047     		bx	lr
 397              	.L38:
 398 000e 00BF     		.align	2
 399              	.L37:
 400 0010 00700040 		.word	1073770496
 401              		.cfi_endproc
 402              	.LFE120:
 404              		.section	.text.PWR_ClearFlag,"ax",%progbits
 405              		.align	2
 406              		.global	PWR_ClearFlag
 407              		.thumb
 408              		.thumb_func
 410              	PWR_ClearFlag:
 411              	.LFB121:
 631:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 632:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 633:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Clears the PWR's pending flags.
 634:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to clear.
 635:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 636:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag
 637:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag
 638:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 639:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 640:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_ClearFlag(uint32_t PWR_FLAG)
 641:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 412              		.loc 1 641 0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 0
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 416              		@ link register save eliminated.
 417              	.LVL22:
 642:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 643:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
 644:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          
 645:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |=  PWR_FLAG << 2;
 418              		.loc 1 645 0
 419 0000 024B     		ldr	r3, .L40
 420 0002 1A68     		ldr	r2, [r3, #0]
 421 0004 42EA8000 		orr	r0, r2, r0, lsl #2
 422              	.LVL23:
 423 0008 1860     		str	r0, [r3, #0]
 424 000a 7047     		bx	lr
 425              	.L41:
 426              		.align	2
 427              	.L40:
 428 000c 00700040 		.word	1073770496
 429              		.cfi_endproc
 430              	.LFE121:
 432              		.text
 433              	.Letext0:
 434              		.file 3 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 435              		.file 4 "../../lib/CMSIS/Include/core_cm4.h"
 436              		.file 5 "../../lib/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 437              		.file 6 "../../lib/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_pwr.c
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:17     .text.PWR_DeInit:00000000 $t
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:22     .text.PWR_DeInit:00000000 PWR_DeInit
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:51     .text.PWR_BackupAccessCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:56     .text.PWR_BackupAccessCmd:00000000 PWR_BackupAccessCmd
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:71     .text.PWR_BackupAccessCmd:00000008 $d
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:76     .text.PWR_PVDLevelConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:81     .text.PWR_PVDLevelConfig:00000000 PWR_PVDLevelConfig
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:106    .text.PWR_PVDLevelConfig:00000010 $d
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:111    .text.PWR_PVDCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:116    .text.PWR_PVDCmd:00000000 PWR_PVDCmd
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:131    .text.PWR_PVDCmd:00000008 $d
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:136    .text.PWR_WakeUpPinCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:141    .text.PWR_WakeUpPinCmd:00000000 PWR_WakeUpPinCmd
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:156    .text.PWR_WakeUpPinCmd:00000008 $d
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:161    .text.PWR_BackupRegulatorCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:166    .text.PWR_BackupRegulatorCmd:00000000 PWR_BackupRegulatorCmd
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:181    .text.PWR_BackupRegulatorCmd:00000008 $d
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:186    .text.PWR_MainRegulatorModeConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:191    .text.PWR_MainRegulatorModeConfig:00000000 PWR_MainRegulatorModeConfig
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:216    .text.PWR_MainRegulatorModeConfig:00000018 $d
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:221    .text.PWR_FlashPowerDownCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:226    .text.PWR_FlashPowerDownCmd:00000000 PWR_FlashPowerDownCmd
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:241    .text.PWR_FlashPowerDownCmd:00000008 $d
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:246    .text.PWR_EnterSTOPMode:00000000 $t
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:251    .text.PWR_EnterSTOPMode:00000000 PWR_EnterSTOPMode
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:317    .text.PWR_EnterSTOPMode:00000030 $d
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:325    .text.PWR_EnterSTANDBYMode:00000000 $t
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:330    .text.PWR_EnterSTANDBYMode:00000000 PWR_EnterSTANDBYMode
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:364    .text.PWR_EnterSTANDBYMode:00000020 $d
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:372    .text.PWR_GetFlagStatus:00000000 $t
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:377    .text.PWR_GetFlagStatus:00000000 PWR_GetFlagStatus
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:400    .text.PWR_GetFlagStatus:00000010 $d
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:405    .text.PWR_ClearFlag:00000000 $t
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:410    .text.PWR_ClearFlag:00000000 PWR_ClearFlag
C:\Users\root\AppData\Local\Temp\ccA4fOZX.s:428    .text.PWR_ClearFlag:0000000c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
