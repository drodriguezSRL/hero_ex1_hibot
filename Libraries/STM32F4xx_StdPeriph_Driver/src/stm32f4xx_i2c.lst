   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 23, 1
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f4xx_i2c.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.I2C_DeInit,"ax",%progbits
  18              		.align	2
  19              		.global	I2C_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	I2C_DeInit:
  24              	.LFB110:
  25              		.file 1 "../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c"
   1:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
   2:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
   3:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @file    stm32f4xx_i2c.c
   4:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @author  MCD Application Team
   5:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @version V1.0.2
   6:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @date    05-March-2012
   7:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          functionalities of the Inter-integrated circuit (I2C)
   9:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Initialization and Configuration
  10:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Data transfers
  11:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - PEC management
  12:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - DMA transfers management
  13:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Interrupts, events and flags management 
  14:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
  15:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  @verbatim
  16:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
  17:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          ===================================================================
  18:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                 How to use this driver
  19:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          ===================================================================
  20:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          1. Enable peripheral clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2Cx, ENABLE)
  21:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             function for I2C1, I2C2 or I2C3.
  22:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  23:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          2. Enable SDA, SCL  and SMBA (when used) GPIO clocks using 
  24:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             RCC_AHBPeriphClockCmd() function. 
  25:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  26:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          3. Peripherals alternate function: 
  27:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  28:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  29:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Configure the desired pin in alternate function by:
  30:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  31:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  32:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  33:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Call GPIO_Init() function
  34:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 Recommended configuration is Push-Pull, Pull-up, Open-Drain.
  35:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 Add an external pull up if necessary (typically 4.7 KOhm).      
  36:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *        
  37:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          4. Program the Mode, duty cycle , Own address, Ack, Speed and Acknowledged
  38:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             Address using the I2C_Init() function.
  39:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  40:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          5. Optionally you can enable/configure the following parameters without
  41:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             re-initialization (i.e there is no need to call again I2C_Init() function):
  42:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the acknowledge feature using I2C_AcknowledgeConfig() function
  43:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the dual addressing mode using I2C_DualAddressCmd() function
  44:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the general call using the I2C_GeneralCallCmd() function
  45:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the clock stretching using I2C_StretchClockCmd() function
  46:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the fast mode duty cycle using the I2C_FastModeDutyCycleConfig()
  47:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                function.
  48:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Configure the NACK position for Master Receiver mode in case of 
  49:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                2 bytes reception using the function I2C_NACKPositionConfig().  
  50:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the PEC Calculation using I2C_CalculatePEC() function
  51:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - For SMBus Mode: 
  52:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Enable the Address Resolution Protocol (ARP) using I2C_ARPCmd() function
  53:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Configure the SMBusAlert pin using I2C_SMBusAlertConfig() function
  54:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  55:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          6. Enable the NVIC and the corresponding interrupt using the function 
  56:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             I2C_ITConfig() if you need to use interrupt mode. 
  57:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  58:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          7. When using the DMA mode 
  59:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Configure the DMA using DMA_Init() function
  60:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Active the needed channel Request using I2C_DMACmd() or
  61:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                     I2C_DMALastTransferCmd() function.
  62:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              @note When using DMA mode, I2C interrupts may be used at the same time to
  63:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                    control the communication flow (Start/Stop/Ack... events and errors).
  64:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
  65:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          8. Enable the I2C using the I2C_Cmd() function.
  66:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
  67:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          9. Enable the DMA using the DMA_Cmd() function when using DMA mode in the 
  68:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             transfers. 
  69:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  70:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  @endverbatim
  71:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  
  72:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
  73:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @attention
  74:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  75:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  76:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  77:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  78:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * You may not use this file except in compliance with the License.
  79:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * You may obtain a copy of the License at:
  80:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  81:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  82:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  83:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * Unless required by applicable law or agreed to in writing, software 
  84:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  85:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  86:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * See the License for the specific language governing permissions and
  87:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * limitations under the License.
  88:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  89:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
  90:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */ 
  91:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  92:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Includes ------------------------------------------------------------------*/
  93:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #include "stm32f4xx_i2c.h"
  94:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #include "stm32f4xx_rcc.h"
  95:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  96:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  97:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
  98:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
  99:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 100:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C 
 101:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief I2C driver modules
 102:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 103:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */ 
 104:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 105:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private typedef -----------------------------------------------------------*/
 106:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private define ------------------------------------------------------------*/
 107:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 108:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define CR1_CLEAR_MASK    ((uint16_t)0xFBF5)      /*<! I2C registers Masks */
 109:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define FLAG_MASK         ((uint32_t)0x00FFFFFF)  /*<! I2C FLAG mask */
 110:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define ITEN_MASK         ((uint32_t)0x07000000)  /*<! I2C Interrupt Enable mask */
 111:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 112:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private macro -------------------------------------------------------------*/
 113:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private variables ---------------------------------------------------------*/
 114:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private function prototypes -----------------------------------------------*/
 115:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private functions ---------------------------------------------------------*/
 116:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 117:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Private_Functions
 118:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 119:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 120:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 121:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group1 Initialization and Configuration functions
 122:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Initialization and Configuration functions 
 123:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 124:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 125:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 126:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                    Initialization and Configuration functions
 127:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 128:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 129:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 130:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 131:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 132:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 133:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 134:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
 135:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 136:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 137:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 138:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DeInit(I2C_TypeDef* I2Cx)
 139:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
  26              		.loc 1 139 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 08B5     		push	{r3, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 3, -8
 140:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 141:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 142:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 143:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2Cx == I2C1)
  36              		.loc 1 143 0
  37 0002 4FF4A843 		mov	r3, #21504
  38 0006 C4F20003 		movt	r3, 16384
  39 000a 9842     		cmp	r0, r3
  40 000c 18D0     		beq	.L6
 144:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 145:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable I2C1 reset state */
 146:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 147:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Release I2C1 from reset state */
 148:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 149:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 150:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else if (I2Cx == I2C2)
  41              		.loc 1 150 0
  42 000e 4FF4B041 		mov	r1, #22528
  43 0012 C4F20001 		movt	r1, 16384
  44 0016 8842     		cmp	r0, r1
  45 0018 1ED0     		beq	.L7
 151:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 152:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable I2C2 reset state */
 153:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 154:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Release I2C2 from reset state */
 155:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 156:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 157:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else 
 158:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 159:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (I2Cx == I2C3)
  46              		.loc 1 159 0
  47 001a 4FF4B842 		mov	r2, #23552
  48 001e C4F20002 		movt	r2, 16384
  49 0022 9042     		cmp	r0, r2
  50 0024 00D0     		beq	.L8
  51 0026 08BD     		pop	{r3, pc}
  52              	.L8:
 160:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 161:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Enable I2C3 reset state */
 162:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
  53              		.loc 1 162 0
  54 0028 4FF40000 		mov	r0, #8388608
  55              	.LVL1:
  56 002c 0121     		movs	r1, #1
  57 002e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 163:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Release I2C3 from reset state */
 164:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
  58              		.loc 1 164 0
  59 0032 4FF40000 		mov	r0, #8388608
  60 0036 0021     		movs	r1, #0
 165:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 166:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 167:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
  61              		.loc 1 167 0
  62 0038 BDE80840 		pop	{r3, lr}
 164:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
  63              		.loc 1 164 0
  64 003c FFF7FEBF 		b	RCC_APB1PeriphResetCmd
  65              	.LVL2:
  66              	.L6:
 146:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
  67              		.loc 1 146 0
  68 0040 4FF40010 		mov	r0, #2097152
  69              	.LVL3:
  70 0044 0121     		movs	r1, #1
  71 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 148:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  72              		.loc 1 148 0
  73 004a 4FF40010 		mov	r0, #2097152
  74 004e 0021     		movs	r1, #0
  75              		.loc 1 167 0
  76 0050 BDE80840 		pop	{r3, lr}
 148:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  77              		.loc 1 148 0
  78 0054 FFF7FEBF 		b	RCC_APB1PeriphResetCmd
  79              	.LVL4:
  80              	.L7:
 153:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
  81              		.loc 1 153 0
  82 0058 4FF48000 		mov	r0, #4194304
  83              	.LVL5:
  84 005c 0121     		movs	r1, #1
  85 005e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 155:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  86              		.loc 1 155 0
  87 0062 4FF48000 		mov	r0, #4194304
  88 0066 0021     		movs	r1, #0
  89              		.loc 1 167 0
  90 0068 BDE80840 		pop	{r3, lr}
 155:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  91              		.loc 1 155 0
  92 006c FFF7FEBF 		b	RCC_APB1PeriphResetCmd
  93              		.cfi_endproc
  94              	.LFE110:
  96              		.section	.text.I2C_Init,"ax",%progbits
  97              		.align	2
  98              		.global	I2C_Init
  99              		.thumb
 100              		.thumb_func
 102              	I2C_Init:
 103              	.LFB111:
 168:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 169:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 170:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Initializes the I2Cx peripheral according to the specified 
 171:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         parameters in the I2C_InitStruct.
 172:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
 173:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency 
 174:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         (I2C peripheral input clock) must be a multiple of 10 MHz.  
 175:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
 176:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 177:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
 178:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         the configuration information for the specified I2C peripheral.
 179:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 180:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 181:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
 182:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 104              		.loc 1 182 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 16
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              	.LVL6:
 109 0000 70B5     		push	{r4, r5, r6, lr}
 110              	.LCFI1:
 111              		.cfi_def_cfa_offset 16
 112              		.cfi_offset 14, -4
 113              		.cfi_offset 6, -8
 114              		.cfi_offset 5, -12
 115              		.cfi_offset 4, -16
 116 0002 84B0     		sub	sp, sp, #16
 117              	.LCFI2:
 118              		.cfi_def_cfa_offset 32
 119              	.LVL7:
 120              		.loc 1 182 0
 121 0004 0446     		mov	r4, r0
 183:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0, freqrange = 0;
 184:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t result = 0x04;
 185:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t pclk1 = 8000000;
 186:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   RCC_ClocksTypeDef  rcc_clocks;
 187:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 188:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 189:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLOCK_SPEED(I2C_InitStruct->I2C_ClockSpeed));
 190:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_MODE(I2C_InitStruct->I2C_Mode));
 191:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_InitStruct->I2C_DutyCycle));
 192:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
 193:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
 194:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));
 195:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 196:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR2 Configuration ------------------------*/
 197:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR2 value */
 198:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR2;
 199:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear frequency FREQ[5:0] bits */
 200:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 201:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get pclk1 frequency value */
 202:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   RCC_GetClocksFreq(&rcc_clocks);
 122              		.loc 1 202 0
 123 0006 6846     		mov	r0, sp
 124              	.LVL8:
 198:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR2;
 125              		.loc 1 198 0
 126 0008 A288     		ldrh	r2, [r4, #4]
 127              	.LVL9:
 182:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 128              		.loc 1 182 0
 129 000a 0D46     		mov	r5, r1
 200:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 130              		.loc 1 200 0
 131 000c 22F03F06 		bic	r6, r2, #63
 132              		.loc 1 202 0
 133 0010 FFF7FEFF 		bl	RCC_GetClocksFreq
 134              	.LVL10:
 203:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   pclk1 = rcc_clocks.PCLK1_Frequency;
 135              		.loc 1 203 0
 136 0014 0299     		ldr	r1, [sp, #8]
 204:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set frequency bits depending on pclk1 value */
 205:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   freqrange = (uint16_t)(pclk1 / 1000000);
 137              		.loc 1 205 0
 138 0016 4DF68360 		movw	r0, #56963
 139 001a C4F21B30 		movt	r0, 17179
 200:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 140              		.loc 1 200 0
 141 001e 3304     		lsls	r3, r6, #16
 142              		.loc 1 205 0
 143 0020 A0FB0102 		umull	r0, r2, r0, r1
 200:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 144              		.loc 1 200 0
 145 0024 1E0C     		lsrs	r6, r3, #16
 146              	.LVL11:
 147              		.loc 1 205 0
 148 0026 920C     		lsrs	r2, r2, #18
 149              	.LVL12:
 206:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= freqrange;
 150              		.loc 1 206 0
 151 0028 1643     		orrs	r6, r6, r2
 152              	.LVL13:
 207:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR2 */
 208:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 153              		.loc 1 208 0
 154 002a A680     		strh	r6, [r4, #4]	@ movhi
 209:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 210:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CCR Configuration ------------------------*/
 211:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Disable the selected I2C peripheral to configure TRISE */
 212:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 155              		.loc 1 212 0
 156 002c 2088     		ldrh	r0, [r4, #0]
 157 002e 20F00103 		bic	r3, r0, #1
 158 0032 1804     		lsls	r0, r3, #16
 159 0034 030C     		lsrs	r3, r0, #16
 160 0036 2380     		strh	r3, [r4, #0]	@ movhi
 161              	.LVL14:
 213:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Reset tmpreg value */
 214:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear F/S, DUTY and CCR[11:0] bits */
 215:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = 0;
 216:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 217:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure speed in standard mode */
 218:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 162              		.loc 1 218 0
 163 0038 48F2A060 		movw	r0, #34464
 164 003c 2B68     		ldr	r3, [r5, #0]
 165 003e C0F20100 		movt	r0, 1
 166 0042 8342     		cmp	r3, r0
 167 0044 25D8     		bhi	.L10
 219:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 220:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Standard mode speed calculate */
 221:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 168              		.loc 1 221 0
 169 0046 5800     		lsls	r0, r3, #1
 170 0048 B1FBF0F1 		udiv	r1, r1, r0
 171 004c 89B2     		uxth	r1, r1
 172              	.LVL15:
 222:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x4*/
 223:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (result < 0x04)
 224:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 225:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 226:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = 0x04;  
 227:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 228:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set speed value for standard mode */
 229:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= result;	  
 230:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for standard mode */
 231:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = freqrange + 1; 
 173              		.loc 1 231 0
 174 004e 531C     		adds	r3, r2, #1
 175 0050 2384     		strh	r3, [r4, #32]	@ movhi
 229:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= result;	  
 176              		.loc 1 229 0
 177 0052 0329     		cmp	r1, #3
 178 0054 98BF     		it	ls
 179 0056 0421     		movls	r1, #4
 180              	.LVL16:
 181              	.L12:
 232:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 233:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure speed in fast mode */
 234:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
 235:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      input clock) must be a multiple of 10 MHz */
 236:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
 237:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 238:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 239:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 240:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 2 */
 241:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 242:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 243:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
 244:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 245:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
 246:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 247:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set DUTY bit */
 248:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= I2C_DutyCycle_16_9;
 249:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 250:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 251:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x1*/
 252:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if ((result & I2C_CCR_CCR) == 0)
 253:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 254:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 255:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= (uint16_t)0x0001;  
 256:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 257:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set speed value and set F/S bit for fast mode */
 258:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 259:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for fast mode */
 260:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 261:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 262:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 263:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CCR */
 264:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CCR = tmpreg;
 182              		.loc 1 264 0
 183 0058 A183     		strh	r1, [r4, #28]	@ movhi
 265:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Enable the selected I2C peripheral */
 266:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 184              		.loc 1 266 0
 185 005a 2388     		ldrh	r3, [r4, #0]
 186 005c 9AB2     		uxth	r2, r3
 187 005e 42F00100 		orr	r0, r2, #1
 188 0062 2080     		strh	r0, [r4, #0]	@ movhi
 267:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 268:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR1 Configuration ------------------------*/
 269:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR1 value */
 270:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR1;
 189              		.loc 1 270 0
 190 0064 B4F800E0 		ldrh	lr, [r4, #0]
 191              	.LVL17:
 271:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear ACK, SMBTYPE and  SMBUS bits */
 272:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= CR1_CLEAR_MASK;
 273:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure I2Cx: mode and acknowledgement */
 274:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
 275:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set ACK bit according to I2C_Ack value */
 276:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 192              		.loc 1 276 0
 193 0068 6A89     		ldrh	r2, [r5, #10]
 194 006a A888     		ldrh	r0, [r5, #4]
 272:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= CR1_CLEAR_MASK;
 195              		.loc 1 272 0
 196 006c 2EF4806C 		bic	ip, lr, #1024
 197 0070 2CF00A01 		bic	r1, ip, #10
 198 0074 0B04     		lsls	r3, r1, #16
 199 0076 1B0C     		lsrs	r3, r3, #16
 200              	.LVL18:
 201              		.loc 1 276 0
 202 0078 42EA0001 		orr	r1, r2, r0
 203 007c 43EA0102 		orr	r2, r3, r1
 204              	.LVL19:
 277:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR1 */
 278:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 = tmpreg;
 205              		.loc 1 278 0
 206 0080 2280     		strh	r2, [r4, #0]	@ movhi
 279:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 280:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx OAR1 Configuration -----------------------*/
 281:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own Address1 and acknowledged address */
 282:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 207              		.loc 1 282 0
 208 0082 B5F808E0 		ldrh	lr, [r5, #8]
 209 0086 A889     		ldrh	r0, [r5, #12]
 210 0088 4EEA0001 		orr	r1, lr, r0
 211 008c 2181     		strh	r1, [r4, #8]	@ movhi
 283:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 212              		.loc 1 283 0
 213 008e 04B0     		add	sp, sp, #16
 214 0090 70BD     		pop	{r4, r5, r6, pc}
 215              	.LVL20:
 216              	.L10:
 238:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 217              		.loc 1 238 0
 218 0092 EE88     		ldrh	r6, [r5, #6]
 219 0094 4BF6FF7C 		movw	ip, #49151
 220 0098 6645     		cmp	r6, ip
 241:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 221              		.loc 1 241 0
 222 009a 07BF     		ittee	eq
 223 009c 03EB4303 		addeq	r3, r3, r3, lsl #1
 224 00a0 B1FBF3F1 		udiveq	r1, r1, r3
 225              	.LVL21:
 246:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 226              		.loc 1 246 0
 227 00a4 03EB8303 		addne	r3, r3, r3, lsl #2
 228 00a8 03EB8303 		addne	r3, r3, r3, lsl #2
 229 00ac 1EBF     		ittt	ne
 230 00ae B1FBF3F1 		udivne	r1, r1, r3
 231              	.LVL22:
 232 00b2 89B2     		uxthne	r1, r1
 233              	.LVL23:
 248:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= I2C_DutyCycle_16_9;
 234              		.loc 1 248 0
 235 00b4 41F48041 		orrne	r1, r1, #16384
 236              	.LVL24:
 252:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if ((result & I2C_CCR_CCR) == 0)
 237              		.loc 1 252 0
 238 00b8 0805     		lsls	r0, r1, #20
 239 00ba 030D     		lsrs	r3, r0, #20
 240 00bc 0BB9     		cbnz	r3, .L15
 255:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= (uint16_t)0x0001;  
 241              		.loc 1 255 0
 242 00be 41F00101 		orr	r1, r1, #1
 243              	.LVL25:
 244              	.L15:
 260:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 245              		.loc 1 260 0
 246 00c2 44F6D35C 		movw	ip, #19923
 247 00c6 4FF49673 		mov	r3, #300
 248 00ca 03FB02F0 		mul	r0, r3, r2
 249 00ce C1F2620C 		movt	ip, 4194
 250 00d2 8CFB0002 		smull	r0, r2, ip, r0
 251              	.LVL26:
 258:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 252              		.loc 1 258 0
 253 00d6 6FEA414E 		mvn	lr, r1, lsl #17
 260:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 254              		.loc 1 260 0
 255 00da 9309     		lsrs	r3, r2, #6
 258:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 256              		.loc 1 258 0
 257 00dc 6FEA5E41 		mvn	r1, lr, lsr #17
 258              	.LVL27:
 260:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 259              		.loc 1 260 0
 260 00e0 5A1C     		adds	r2, r3, #1
 261              	.LVL28:
 262 00e2 2284     		strh	r2, [r4, #32]	@ movhi
 263 00e4 B8E7     		b	.L12
 264              		.cfi_endproc
 265              	.LFE111:
 267 00e6 00BF     		.section	.text.I2C_StructInit,"ax",%progbits
 268              		.align	2
 269              		.global	I2C_StructInit
 270              		.thumb
 271              		.thumb_func
 273              	I2C_StructInit:
 274              	.LFB112:
 284:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 285:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 286:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Fills each I2C_InitStruct member with its default value.
 287:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
 288:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 289:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 290:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
 291:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 275              		.loc 1 291 0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 0
 278              		@ frame_needed = 0, uses_anonymous_args = 0
 279              		@ link register save eliminated.
 280              	.LVL29:
 292:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------- Reset I2C init structure parameters values ----------------*/
 293:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* initialize the I2C_ClockSpeed member */
 294:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_ClockSpeed = 5000;
 295:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Mode member */
 296:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 281              		.loc 1 296 0
 282 0000 0021     		movs	r1, #0
 294:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_ClockSpeed = 5000;
 283              		.loc 1 294 0
 284 0002 41F28833 		movw	r3, #5000
 285 0006 0360     		str	r3, [r0, #0]
 286              		.loc 1 296 0
 287 0008 8180     		strh	r1, [r0, #4]	@ movhi
 297:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_DutyCycle member */
 298:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 288              		.loc 1 298 0
 289 000a 4BF6FF72 		movw	r2, 49151	@ movhi
 290 000e C280     		strh	r2, [r0, #6]	@ movhi
 299:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_OwnAddress1 member */
 300:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_OwnAddress1 = 0;
 291              		.loc 1 300 0
 292 0010 0181     		strh	r1, [r0, #8]	@ movhi
 301:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Ack member */
 302:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 293              		.loc 1 302 0
 294 0012 4181     		strh	r1, [r0, #10]	@ movhi
 303:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_AcknowledgedAddress member */
 304:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 295              		.loc 1 304 0
 296 0014 4FF48043 		mov	r3, #16384	@ movhi
 297 0018 8381     		strh	r3, [r0, #12]	@ movhi
 305:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 298              		.loc 1 305 0
 299 001a 7047     		bx	lr
 300              		.cfi_endproc
 301              	.LFE112:
 303              		.section	.text.I2C_Cmd,"ax",%progbits
 304              		.align	2
 305              		.global	I2C_Cmd
 306              		.thumb
 307              		.thumb_func
 309              	I2C_Cmd:
 310              	.LFB113:
 306:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 307:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 308:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C peripheral.
 309:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 310:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx peripheral. 
 311:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 312:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 313:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 314:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 315:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 311              		.loc 1 315 0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 0
 314              		@ frame_needed = 0, uses_anonymous_args = 0
 315              		@ link register save eliminated.
 316              	.LVL30:
 316:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 317:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 318:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 319:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 320:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 321:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C peripheral */
 322:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PE;
 317              		.loc 1 322 0
 318 0000 0388     		ldrh	r3, [r0, #0]
 319:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 319              		.loc 1 319 0
 320 0002 29B9     		cbnz	r1, .L21
 323:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 324:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 325:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 326:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C peripheral */
 327:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 321              		.loc 1 327 0
 322 0004 23F00101 		bic	r1, r3, #1
 323              	.LVL31:
 324 0008 0B04     		lsls	r3, r1, #16
 325 000a 1A0C     		lsrs	r2, r3, #16
 326 000c 0280     		strh	r2, [r0, #0]	@ movhi
 327 000e 7047     		bx	lr
 328              	.LVL32:
 329              	.L21:
 322:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PE;
 330              		.loc 1 322 0
 331 0010 99B2     		uxth	r1, r3
 332              	.LVL33:
 333 0012 41F00103 		orr	r3, r1, #1
 334 0016 0380     		strh	r3, [r0, #0]	@ movhi
 335 0018 7047     		bx	lr
 336              		.cfi_endproc
 337              	.LFE113:
 339 001a 00BF     		.section	.text.I2C_GenerateSTART,"ax",%progbits
 340              		.align	2
 341              		.global	I2C_GenerateSTART
 342              		.thumb
 343              		.thumb_func
 345              	I2C_GenerateSTART:
 346              	.LFB114:
 328:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 329:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 330:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 331:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 332:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication START condition.
 333:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 334:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C START condition generation.
 335:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 336:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 337:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 338:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
 339:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 347              		.loc 1 339 0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 0
 350              		@ frame_needed = 0, uses_anonymous_args = 0
 351              		@ link register save eliminated.
 352              	.LVL34:
 340:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 341:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 342:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 343:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 344:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 345:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Generate a START condition */
 346:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_START;
 353              		.loc 1 346 0
 354 0000 0388     		ldrh	r3, [r0, #0]
 343:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 355              		.loc 1 343 0
 356 0002 29B9     		cbnz	r1, .L25
 347:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 348:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 349:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 350:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the START condition generation */
 351:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 357              		.loc 1 351 0
 358 0004 23F48071 		bic	r1, r3, #256
 359              	.LVL35:
 360 0008 0B04     		lsls	r3, r1, #16
 361 000a 1A0C     		lsrs	r2, r3, #16
 362 000c 0280     		strh	r2, [r0, #0]	@ movhi
 363 000e 7047     		bx	lr
 364              	.LVL36:
 365              	.L25:
 346:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_START;
 366              		.loc 1 346 0
 367 0010 99B2     		uxth	r1, r3
 368              	.LVL37:
 369 0012 41F48073 		orr	r3, r1, #256
 370 0016 0380     		strh	r3, [r0, #0]	@ movhi
 371 0018 7047     		bx	lr
 372              		.cfi_endproc
 373              	.LFE114:
 375 001a 00BF     		.section	.text.I2C_GenerateSTOP,"ax",%progbits
 376              		.align	2
 377              		.global	I2C_GenerateSTOP
 378              		.thumb
 379              		.thumb_func
 381              	I2C_GenerateSTOP:
 382              	.LFB115:
 352:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 353:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 354:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 355:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 356:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication STOP condition.
 357:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 358:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C STOP condition generation.
 359:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 360:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 361:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 362:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
 363:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 383              		.loc 1 363 0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 0
 386              		@ frame_needed = 0, uses_anonymous_args = 0
 387              		@ link register save eliminated.
 388              	.LVL38:
 364:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 365:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 366:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 367:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 368:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 369:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Generate a STOP condition */
 370:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_STOP;
 389              		.loc 1 370 0
 390 0000 0388     		ldrh	r3, [r0, #0]
 367:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 391              		.loc 1 367 0
 392 0002 29B9     		cbnz	r1, .L29
 371:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 372:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 373:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 374:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the STOP condition generation */
 375:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 393              		.loc 1 375 0
 394 0004 23F40071 		bic	r1, r3, #512
 395              	.LVL39:
 396 0008 0B04     		lsls	r3, r1, #16
 397 000a 1A0C     		lsrs	r2, r3, #16
 398 000c 0280     		strh	r2, [r0, #0]	@ movhi
 399 000e 7047     		bx	lr
 400              	.LVL40:
 401              	.L29:
 370:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_STOP;
 402              		.loc 1 370 0
 403 0010 99B2     		uxth	r1, r3
 404              	.LVL41:
 405 0012 41F40073 		orr	r3, r1, #512
 406 0016 0380     		strh	r3, [r0, #0]	@ movhi
 407 0018 7047     		bx	lr
 408              		.cfi_endproc
 409              	.LFE115:
 411 001a 00BF     		.section	.text.I2C_Send7bitAddress,"ax",%progbits
 412              		.align	2
 413              		.global	I2C_Send7bitAddress
 414              		.thumb
 415              		.thumb_func
 417              	I2C_Send7bitAddress:
 418              	.LFB116:
 376:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 377:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 378:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 379:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 380:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Transmits the address byte to select the slave device.
 381:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 382:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the slave address which will be transmitted
 383:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_Direction: specifies whether the I2C device will be a Transmitter
 384:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         or a Receiver. 
 385:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values
 386:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Transmitter: Transmitter mode
 387:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Receiver: Receiver mode
 388:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 389:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 390:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
 391:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 419              		.loc 1 391 0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 0
 422              		@ frame_needed = 0, uses_anonymous_args = 0
 423              		@ link register save eliminated.
 424              	.LVL42:
 392:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 393:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 394:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DIRECTION(I2C_Direction));
 395:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Test on the direction to set/reset the read/write bit */
 396:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_Direction != I2C_Direction_Transmitter)
 425              		.loc 1 396 0
 426 0000 1AB9     		cbnz	r2, .L33
 397:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 398:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set the address bit0 for read */
 399:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     Address |= I2C_OAR1_ADD0;
 400:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 401:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 402:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 403:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Reset the address bit0 for write */
 404:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 427              		.loc 1 404 0
 428 0002 01F0FE01 		and	r1, r1, #254
 429              	.LVL43:
 405:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 406:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Send the address */
 407:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->DR = Address;
 430              		.loc 1 407 0
 431 0006 0182     		strh	r1, [r0, #16]	@ movhi
 408:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 432              		.loc 1 408 0
 433 0008 7047     		bx	lr
 434              	.L33:
 399:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     Address |= I2C_OAR1_ADD0;
 435              		.loc 1 399 0
 436 000a 41F00101 		orr	r1, r1, #1
 437              	.LVL44:
 407:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->DR = Address;
 438              		.loc 1 407 0
 439 000e 0182     		strh	r1, [r0, #16]	@ movhi
 440              		.loc 1 408 0
 441 0010 7047     		bx	lr
 442              		.cfi_endproc
 443              	.LFE116:
 445 0012 00BF     		.section	.text.I2C_AcknowledgeConfig,"ax",%progbits
 446              		.align	2
 447              		.global	I2C_AcknowledgeConfig
 448              		.thumb
 449              		.thumb_func
 451              	I2C_AcknowledgeConfig:
 452              	.LFB117:
 409:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 410:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 411:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C acknowledge feature.
 412:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 413:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C Acknowledgement.
 414:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 415:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 416:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 417:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
 418:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 453              		.loc 1 418 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 0, uses_anonymous_args = 0
 457              		@ link register save eliminated.
 458              	.LVL45:
 419:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 420:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 421:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 422:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 423:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 424:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the acknowledgement */
 425:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ACK;
 459              		.loc 1 425 0
 460 0000 0388     		ldrh	r3, [r0, #0]
 422:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 461              		.loc 1 422 0
 462 0002 29B9     		cbnz	r1, .L37
 426:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 427:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 428:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 429:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the acknowledgement */
 430:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 463              		.loc 1 430 0
 464 0004 23F48061 		bic	r1, r3, #1024
 465              	.LVL46:
 466 0008 0B04     		lsls	r3, r1, #16
 467 000a 1A0C     		lsrs	r2, r3, #16
 468 000c 0280     		strh	r2, [r0, #0]	@ movhi
 469 000e 7047     		bx	lr
 470              	.LVL47:
 471              	.L37:
 425:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ACK;
 472              		.loc 1 425 0
 473 0010 99B2     		uxth	r1, r3
 474              	.LVL48:
 475 0012 41F48063 		orr	r3, r1, #1024
 476 0016 0380     		strh	r3, [r0, #0]	@ movhi
 477 0018 7047     		bx	lr
 478              		.cfi_endproc
 479              	.LFE117:
 481 001a 00BF     		.section	.text.I2C_OwnAddress2Config,"ax",%progbits
 482              		.align	2
 483              		.global	I2C_OwnAddress2Config
 484              		.thumb
 485              		.thumb_func
 487              	I2C_OwnAddress2Config:
 488              	.LFB118:
 431:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 432:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 433:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 434:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 435:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Configures the specified I2C own address2.
 436:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 437:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the 7bit I2C own address2.
 438:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 439:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 440:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
 441:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 489              		.loc 1 441 0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 0, uses_anonymous_args = 0
 493              		@ link register save eliminated.
 494              	.LVL49:
 495              	.LVL50:
 442:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0;
 443:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 444:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 445:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 446:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 447:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the old register value */
 448:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->OAR2;
 449:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 450:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Reset I2Cx Own address2 bit [7:1] */
 451:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 452:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 453:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own address2 */
 454:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 496              		.loc 1 454 0
 497 0000 01F0FE01 		and	r1, r1, #254
 498              	.LVL51:
 448:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->OAR2;
 499              		.loc 1 448 0
 500 0004 B0F80CC0 		ldrh	ip, [r0, #12]
 501              	.LVL52:
 451:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 502              		.loc 1 451 0
 503 0008 2CF0FE02 		bic	r2, ip, #254
 504 000c 1304     		lsls	r3, r2, #16
 505 000e 1A0C     		lsrs	r2, r3, #16
 506              		.loc 1 454 0
 507 0010 41EA0203 		orr	r3, r1, r2
 508              	.LVL53:
 455:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 456:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Store the new register value */
 457:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->OAR2 = tmpreg;
 509              		.loc 1 457 0
 510 0014 8381     		strh	r3, [r0, #12]	@ movhi
 458:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 511              		.loc 1 458 0
 512 0016 7047     		bx	lr
 513              		.cfi_endproc
 514              	.LFE118:
 516              		.section	.text.I2C_DualAddressCmd,"ax",%progbits
 517              		.align	2
 518              		.global	I2C_DualAddressCmd
 519              		.thumb
 520              		.thumb_func
 522              	I2C_DualAddressCmd:
 523              	.LFB119:
 459:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 460:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 461:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C dual addressing mode.
 462:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 463:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C dual addressing mode.
 464:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 465:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 466:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 467:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 468:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 524              		.loc 1 468 0
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 0
 527              		@ frame_needed = 0, uses_anonymous_args = 0
 528              		@ link register save eliminated.
 529              	.LVL54:
 469:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 470:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 471:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 472:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 473:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 474:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable dual addressing mode */
 475:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 530              		.loc 1 475 0
 531 0000 8389     		ldrh	r3, [r0, #12]
 472:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 532              		.loc 1 472 0
 533 0002 29B9     		cbnz	r1, .L42
 476:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 477:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 478:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 479:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable dual addressing mode */
 480:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 534              		.loc 1 480 0
 535 0004 23F00101 		bic	r1, r3, #1
 536              	.LVL55:
 537 0008 0B04     		lsls	r3, r1, #16
 538 000a 1A0C     		lsrs	r2, r3, #16
 539 000c 8281     		strh	r2, [r0, #12]	@ movhi
 540 000e 7047     		bx	lr
 541              	.LVL56:
 542              	.L42:
 475:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 543              		.loc 1 475 0
 544 0010 99B2     		uxth	r1, r3
 545              	.LVL57:
 546 0012 41F00103 		orr	r3, r1, #1
 547 0016 8381     		strh	r3, [r0, #12]	@ movhi
 548 0018 7047     		bx	lr
 549              		.cfi_endproc
 550              	.LFE119:
 552 001a 00BF     		.section	.text.I2C_GeneralCallCmd,"ax",%progbits
 553              		.align	2
 554              		.global	I2C_GeneralCallCmd
 555              		.thumb
 556              		.thumb_func
 558              	I2C_GeneralCallCmd:
 559              	.LFB120:
 481:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 482:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 483:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 484:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 485:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C general call feature.
 486:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 487:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C General call.
 488:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 489:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 490:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 491:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 492:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 560              		.loc 1 492 0
 561              		.cfi_startproc
 562              		@ args = 0, pretend = 0, frame = 0
 563              		@ frame_needed = 0, uses_anonymous_args = 0
 564              		@ link register save eliminated.
 565              	.LVL58:
 493:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 494:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 495:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 496:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 497:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 498:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable generall call */
 499:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENGC;
 566              		.loc 1 499 0
 567 0000 0388     		ldrh	r3, [r0, #0]
 496:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 568              		.loc 1 496 0
 569 0002 29B9     		cbnz	r1, .L46
 500:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 501:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 502:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 503:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable generall call */
 504:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 570              		.loc 1 504 0
 571 0004 23F04001 		bic	r1, r3, #64
 572              	.LVL59:
 573 0008 0B04     		lsls	r3, r1, #16
 574 000a 1A0C     		lsrs	r2, r3, #16
 575 000c 0280     		strh	r2, [r0, #0]	@ movhi
 576 000e 7047     		bx	lr
 577              	.LVL60:
 578              	.L46:
 499:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENGC;
 579              		.loc 1 499 0
 580 0010 99B2     		uxth	r1, r3
 581              	.LVL61:
 582 0012 41F04003 		orr	r3, r1, #64
 583 0016 0380     		strh	r3, [r0, #0]	@ movhi
 584 0018 7047     		bx	lr
 585              		.cfi_endproc
 586              	.LFE120:
 588 001a 00BF     		.section	.text.I2C_SoftwareResetCmd,"ax",%progbits
 589              		.align	2
 590              		.global	I2C_SoftwareResetCmd
 591              		.thumb
 592              		.thumb_func
 594              	I2C_SoftwareResetCmd:
 595              	.LFB121:
 505:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 506:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 507:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 508:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 509:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C software reset.
 510:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   When software reset is enabled, the I2C IOs are released (this can
 511:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         be useful to recover from bus errors).  
 512:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 513:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C software reset.
 514:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 515:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 516:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 517:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 518:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 596              		.loc 1 518 0
 597              		.cfi_startproc
 598              		@ args = 0, pretend = 0, frame = 0
 599              		@ frame_needed = 0, uses_anonymous_args = 0
 600              		@ link register save eliminated.
 601              	.LVL62:
 519:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 520:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 521:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 522:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 523:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 524:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Peripheral under reset */
 525:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_SWRST;
 602              		.loc 1 525 0
 603 0000 0388     		ldrh	r3, [r0, #0]
 522:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 604              		.loc 1 522 0
 605 0002 19B9     		cbnz	r1, .L50
 526:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 527:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 528:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 529:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Peripheral not under reset */
 530:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 606              		.loc 1 530 0
 607 0004 5B04     		lsls	r3, r3, #17
 608 0006 5A0C     		lsrs	r2, r3, #17
 609 0008 0280     		strh	r2, [r0, #0]	@ movhi
 610 000a 7047     		bx	lr
 611              	.L50:
 525:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_SWRST;
 612              		.loc 1 525 0
 613 000c 6FEA4341 		mvn	r1, r3, lsl #17
 614              	.LVL63:
 615 0010 6FEA5143 		mvn	r3, r1, lsr #17
 616 0014 0380     		strh	r3, [r0, #0]	@ movhi
 617 0016 7047     		bx	lr
 618              		.cfi_endproc
 619              	.LFE121:
 621              		.section	.text.I2C_StretchClockCmd,"ax",%progbits
 622              		.align	2
 623              		.global	I2C_StretchClockCmd
 624              		.thumb
 625              		.thumb_func
 627              	I2C_StretchClockCmd:
 628              	.LFB122:
 531:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 532:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 533:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 534:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 535:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C Clock stretching.
 536:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 537:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx Clock stretching.
 538:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 539:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 540:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 541:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 542:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 629              		.loc 1 542 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 0
 632              		@ frame_needed = 0, uses_anonymous_args = 0
 633              		@ link register save eliminated.
 634              	.LVL64:
 543:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 544:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 545:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 546:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState == DISABLE)
 547:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 548:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C Clock stretching */
 549:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 635              		.loc 1 549 0
 636 0000 0388     		ldrh	r3, [r0, #0]
 546:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState == DISABLE)
 637              		.loc 1 546 0
 638 0002 29B1     		cbz	r1, .L54
 550:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 551:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 552:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 553:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C Clock stretching */
 554:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 639              		.loc 1 554 0
 640 0004 23F08001 		bic	r1, r3, #128
 641              	.LVL65:
 642 0008 0B04     		lsls	r3, r1, #16
 643 000a 1A0C     		lsrs	r2, r3, #16
 644 000c 0280     		strh	r2, [r0, #0]	@ movhi
 645 000e 7047     		bx	lr
 646              	.LVL66:
 647              	.L54:
 549:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 648              		.loc 1 549 0
 649 0010 99B2     		uxth	r1, r3
 650              	.LVL67:
 651 0012 41F08003 		orr	r3, r1, #128
 652 0016 0380     		strh	r3, [r0, #0]	@ movhi
 653 0018 7047     		bx	lr
 654              		.cfi_endproc
 655              	.LFE122:
 657 001a 00BF     		.section	.text.I2C_FastModeDutyCycleConfig,"ax",%progbits
 658              		.align	2
 659              		.global	I2C_FastModeDutyCycleConfig
 660              		.thumb
 661              		.thumb_func
 663              	I2C_FastModeDutyCycleConfig:
 664              	.LFB123:
 555:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 556:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 557:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 558:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 559:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C fast mode duty cycle.
 560:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 561:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_DutyCycle: specifies the fast mode duty cycle.
 562:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 563:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
 564:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
 565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 566:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
 568:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 665              		.loc 1 568 0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 0
 668              		@ frame_needed = 0, uses_anonymous_args = 0
 669              		@ link register save eliminated.
 670              	.LVL68:
 569:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 570:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 571:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
 572:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 573:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 574:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=2 */
 575:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CCR &= I2C_DutyCycle_2;
 671              		.loc 1 575 0
 672 0000 838B     		ldrh	r3, [r0, #28]
 572:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 673              		.loc 1 572 0
 674 0002 B1F5804F 		cmp	r1, #16384
 675 0006 05D0     		beq	.L56
 676              		.loc 1 575 0
 677 0008 23F48042 		bic	r2, r3, #16384
 678 000c 1104     		lsls	r1, r2, #16
 679              	.LVL69:
 680 000e 0B0C     		lsrs	r3, r1, #16
 681 0010 8383     		strh	r3, [r0, #28]	@ movhi
 682 0012 7047     		bx	lr
 683              	.LVL70:
 684              	.L56:
 576:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 577:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 578:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 579:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=16/9 */
 580:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CCR |= I2C_DutyCycle_16_9;
 685              		.loc 1 580 0
 686 0014 9BB2     		uxth	r3, r3
 687 0016 43F4804C 		orr	ip, r3, #16384
 688 001a A0F81CC0 		strh	ip, [r0, #28]	@ movhi
 689 001e 7047     		bx	lr
 690              		.cfi_endproc
 691              	.LFE123:
 693              		.section	.text.I2C_NACKPositionConfig,"ax",%progbits
 694              		.align	2
 695              		.global	I2C_NACKPositionConfig
 696              		.thumb
 697              		.thumb_func
 699              	I2C_NACKPositionConfig:
 700              	.LFB124:
 581:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 582:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 583:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 584:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 585:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C NACK position in master receiver mode.
 586:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   This function is useful in I2C Master Receiver mode when the number
 587:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         of data to be received is equal to 2. In this case, this function 
 588:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         should be called (with parameter I2C_NACKPosition_Next) before data 
 589:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         reception starts,as described in the 2-byte reception procedure 
 590:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         recommended in Reference Manual in Section: Master receiver.                
 591:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 592:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_NACKPosition: specifies the NACK position. 
 593:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 594:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Next: indicates that the next byte will be the last
 595:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                        received byte.  
 596:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Current: indicates that current byte is the last 
 597:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                           received byte.
 598:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            
 599:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_PECPositionConfig() 
 600:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          but is intended to be used in I2C mode while I2C_PECPositionConfig() 
 601:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          is intended to used in SMBUS mode. 
 602:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            
 603:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 604:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 605:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
 606:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 701              		.loc 1 606 0
 702              		.cfi_startproc
 703              		@ args = 0, pretend = 0, frame = 0
 704              		@ frame_needed = 0, uses_anonymous_args = 0
 705              		@ link register save eliminated.
 706              	.LVL71:
 607:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 608:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 609:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
 610:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
 611:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the input parameter */
 612:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_NACKPosition == I2C_NACKPosition_Next)
 613:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 614:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is the last received byte */
 615:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_NACKPosition_Next;
 707              		.loc 1 615 0
 708 0000 0388     		ldrh	r3, [r0, #0]
 612:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_NACKPosition == I2C_NACKPosition_Next)
 709              		.loc 1 612 0
 710 0002 B1F5006F 		cmp	r1, #2048
 711 0006 05D0     		beq	.L61
 616:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 617:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 618:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 619:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is the last received byte */
 620:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_NACKPosition_Current;
 712              		.loc 1 620 0
 713 0008 23F40061 		bic	r1, r3, #2048
 714              	.LVL72:
 715 000c 0B04     		lsls	r3, r1, #16
 716 000e 1A0C     		lsrs	r2, r3, #16
 717 0010 0280     		strh	r2, [r0, #0]	@ movhi
 718 0012 7047     		bx	lr
 719              	.LVL73:
 720              	.L61:
 615:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_NACKPosition_Next;
 721              		.loc 1 615 0
 722 0014 99B2     		uxth	r1, r3
 723              	.LVL74:
 724 0016 41F40063 		orr	r3, r1, #2048
 725 001a 0380     		strh	r3, [r0, #0]	@ movhi
 726 001c 7047     		bx	lr
 727              		.cfi_endproc
 728              	.LFE124:
 730 001e 00BF     		.section	.text.I2C_SMBusAlertConfig,"ax",%progbits
 731              		.align	2
 732              		.global	I2C_SMBusAlertConfig
 733              		.thumb
 734              		.thumb_func
 736              	I2C_SMBusAlertConfig:
 737              	.LFB125:
 621:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 622:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 623:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 624:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 625:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Drives the SMBusAlert pin high or low for the specified I2C.
 626:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 627:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_SMBusAlert: specifies SMBAlert pin level. 
 628:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 629:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
 630:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
 631:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 632:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 633:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
 634:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 738              		.loc 1 634 0
 739              		.cfi_startproc
 740              		@ args = 0, pretend = 0, frame = 0
 741              		@ frame_needed = 0, uses_anonymous_args = 0
 742              		@ link register save eliminated.
 743              	.LVL75:
 635:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 636:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 637:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
 638:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 639:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 640:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin Low */
 641:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_SMBusAlert_Low;
 744              		.loc 1 641 0
 745 0000 0388     		ldrh	r3, [r0, #0]
 638:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 746              		.loc 1 638 0
 747 0002 B1F5005F 		cmp	r1, #8192
 748 0006 05D0     		beq	.L65
 642:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 643:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 644:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 645:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin High  */
 646:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_SMBusAlert_High;
 749              		.loc 1 646 0
 750 0008 23F40051 		bic	r1, r3, #8192
 751              	.LVL76:
 752 000c 0B04     		lsls	r3, r1, #16
 753 000e 1A0C     		lsrs	r2, r3, #16
 754 0010 0280     		strh	r2, [r0, #0]	@ movhi
 755 0012 7047     		bx	lr
 756              	.LVL77:
 757              	.L65:
 641:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_SMBusAlert_Low;
 758              		.loc 1 641 0
 759 0014 99B2     		uxth	r1, r3
 760              	.LVL78:
 761 0016 41F40053 		orr	r3, r1, #8192
 762 001a 0380     		strh	r3, [r0, #0]	@ movhi
 763 001c 7047     		bx	lr
 764              		.cfi_endproc
 765              	.LFE125:
 767 001e 00BF     		.section	.text.I2C_ARPCmd,"ax",%progbits
 768              		.align	2
 769              		.global	I2C_ARPCmd
 770              		.thumb
 771              		.thumb_func
 773              	I2C_ARPCmd:
 774              	.LFB126:
 647:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 648:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 649:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 650:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 651:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C ARP.
 652:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 653:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx ARP. 
 654:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 655:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 656:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 657:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 658:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 775              		.loc 1 658 0
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 0
 778              		@ frame_needed = 0, uses_anonymous_args = 0
 779              		@ link register save eliminated.
 780              	.LVL79:
 659:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 660:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 661:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 662:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 663:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 664:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C ARP */
 665:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENARP;
 781              		.loc 1 665 0
 782 0000 0388     		ldrh	r3, [r0, #0]
 662:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 783              		.loc 1 662 0
 784 0002 29B9     		cbnz	r1, .L69
 666:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 667:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 668:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 669:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C ARP */
 670:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 785              		.loc 1 670 0
 786 0004 23F01001 		bic	r1, r3, #16
 787              	.LVL80:
 788 0008 0B04     		lsls	r3, r1, #16
 789 000a 1A0C     		lsrs	r2, r3, #16
 790 000c 0280     		strh	r2, [r0, #0]	@ movhi
 791 000e 7047     		bx	lr
 792              	.LVL81:
 793              	.L69:
 665:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENARP;
 794              		.loc 1 665 0
 795 0010 99B2     		uxth	r1, r3
 796              	.LVL82:
 797 0012 41F01003 		orr	r3, r1, #16
 798 0016 0380     		strh	r3, [r0, #0]	@ movhi
 799 0018 7047     		bx	lr
 800              		.cfi_endproc
 801              	.LFE126:
 803 001a 00BF     		.section	.text.I2C_SendData,"ax",%progbits
 804              		.align	2
 805              		.global	I2C_SendData
 806              		.thumb
 807              		.thumb_func
 809              	I2C_SendData:
 810              	.LFB127:
 671:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 672:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 673:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 674:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 675:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 676:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 677:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group2 Data transfers functions
 678:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Data transfers functions 
 679:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 680:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 681:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 682:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                         Data transfers functions
 683:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 684:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 685:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 686:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 687:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 688:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 689:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 690:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Sends a data byte through the I2Cx peripheral.
 691:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 692:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Data: Byte to be transmitted..
 693:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 694:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 695:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
 696:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 811              		.loc 1 696 0
 812              		.cfi_startproc
 813              		@ args = 0, pretend = 0, frame = 0
 814              		@ frame_needed = 0, uses_anonymous_args = 0
 815              		@ link register save eliminated.
 816              	.LVL83:
 697:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 698:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 699:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write in the DR register the data to be sent */
 700:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->DR = Data;
 817              		.loc 1 700 0
 818 0000 0182     		strh	r1, [r0, #16]	@ movhi
 701:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 819              		.loc 1 701 0
 820 0002 7047     		bx	lr
 821              		.cfi_endproc
 822              	.LFE127:
 824              		.section	.text.I2C_ReceiveData,"ax",%progbits
 825              		.align	2
 826              		.global	I2C_ReceiveData
 827              		.thumb
 828              		.thumb_func
 830              	I2C_ReceiveData:
 831              	.LFB128:
 702:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 703:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 704:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the most recent received data by the I2Cx peripheral.
 705:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 706:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The value of the received data.
 707:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 708:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
 709:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 832              		.loc 1 709 0
 833              		.cfi_startproc
 834              		@ args = 0, pretend = 0, frame = 0
 835              		@ frame_needed = 0, uses_anonymous_args = 0
 836              		@ link register save eliminated.
 837              	.LVL84:
 710:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 711:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 712:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the data in the DR register */
 713:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return (uint8_t)I2Cx->DR;
 838              		.loc 1 713 0
 839 0000 008A     		ldrh	r0, [r0, #16]
 840              	.LVL85:
 714:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 841              		.loc 1 714 0
 842 0002 C0B2     		uxtb	r0, r0
 843 0004 7047     		bx	lr
 844              		.cfi_endproc
 845              	.LFE128:
 847 0006 00BF     		.section	.text.I2C_TransmitPEC,"ax",%progbits
 848              		.align	2
 849              		.global	I2C_TransmitPEC
 850              		.thumb
 851              		.thumb_func
 853              	I2C_TransmitPEC:
 854              	.LFB129:
 715:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 716:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 717:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 718:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 719:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 720:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group3 PEC management functions
 721:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   PEC management functions 
 722:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 723:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 724:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 725:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                          PEC management functions
 726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 727:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 729:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 730:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 731:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 732:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 733:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C PEC transfer.
 734:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 735:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C PEC transmission.
 736:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 737:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 738:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 739:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 740:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 855              		.loc 1 740 0
 856              		.cfi_startproc
 857              		@ args = 0, pretend = 0, frame = 0
 858              		@ frame_needed = 0, uses_anonymous_args = 0
 859              		@ link register save eliminated.
 860              	.LVL86:
 741:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 742:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 743:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 744:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 745:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 746:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC transmission */
 747:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PEC;
 861              		.loc 1 747 0
 862 0000 0388     		ldrh	r3, [r0, #0]
 744:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 863              		.loc 1 744 0
 864 0002 29B9     		cbnz	r1, .L75
 748:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 749:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 750:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 751:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC transmission */
 752:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 865              		.loc 1 752 0
 866 0004 23F48051 		bic	r1, r3, #4096
 867              	.LVL87:
 868 0008 0B04     		lsls	r3, r1, #16
 869 000a 1A0C     		lsrs	r2, r3, #16
 870 000c 0280     		strh	r2, [r0, #0]	@ movhi
 871 000e 7047     		bx	lr
 872              	.LVL88:
 873              	.L75:
 747:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PEC;
 874              		.loc 1 747 0
 875 0010 99B2     		uxth	r1, r3
 876              	.LVL89:
 877 0012 41F48053 		orr	r3, r1, #4096
 878 0016 0380     		strh	r3, [r0, #0]	@ movhi
 879 0018 7047     		bx	lr
 880              		.cfi_endproc
 881              	.LFE129:
 883 001a 00BF     		.section	.text.I2C_PECPositionConfig,"ax",%progbits
 884              		.align	2
 885              		.global	I2C_PECPositionConfig
 886              		.thumb
 887              		.thumb_func
 889              	I2C_PECPositionConfig:
 890              	.LFB130:
 753:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 754:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 755:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 756:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 757:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C PEC position.
 758:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 759:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_PECPosition: specifies the PEC position. 
 760:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 761:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Next: indicates that the next byte is PEC
 762:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Current: indicates that current byte is PEC
 763:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *       
 764:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_NACKPositionConfig()
 765:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          but is intended to be used in SMBUS mode while I2C_NACKPositionConfig() 
 766:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          is intended to used in I2C mode.
 767:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                
 768:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 769:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 770:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
 771:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 891              		.loc 1 771 0
 892              		.cfi_startproc
 893              		@ args = 0, pretend = 0, frame = 0
 894              		@ frame_needed = 0, uses_anonymous_args = 0
 895              		@ link register save eliminated.
 896              	.LVL90:
 772:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 773:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 774:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
 775:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_PECPosition == I2C_PECPosition_Next)
 776:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 777:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is PEC */
 778:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_PECPosition_Next;
 897              		.loc 1 778 0
 898 0000 0388     		ldrh	r3, [r0, #0]
 775:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_PECPosition == I2C_PECPosition_Next)
 899              		.loc 1 775 0
 900 0002 B1F5006F 		cmp	r1, #2048
 901 0006 05D0     		beq	.L79
 779:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 780:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 781:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 782:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is PEC */
 783:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_PECPosition_Current;
 902              		.loc 1 783 0
 903 0008 23F40061 		bic	r1, r3, #2048
 904              	.LVL91:
 905 000c 0B04     		lsls	r3, r1, #16
 906 000e 1A0C     		lsrs	r2, r3, #16
 907 0010 0280     		strh	r2, [r0, #0]	@ movhi
 908 0012 7047     		bx	lr
 909              	.LVL92:
 910              	.L79:
 778:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_PECPosition_Next;
 911              		.loc 1 778 0
 912 0014 99B2     		uxth	r1, r3
 913              	.LVL93:
 914 0016 41F40063 		orr	r3, r1, #2048
 915 001a 0380     		strh	r3, [r0, #0]	@ movhi
 916 001c 7047     		bx	lr
 917              		.cfi_endproc
 918              	.LFE130:
 920 001e 00BF     		.section	.text.I2C_CalculatePEC,"ax",%progbits
 921              		.align	2
 922              		.global	I2C_CalculatePEC
 923              		.thumb
 924              		.thumb_func
 926              	I2C_CalculatePEC:
 927              	.LFB131:
 784:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 785:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 786:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 787:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 788:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the PEC value calculation of the transferred bytes.
 789:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 790:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx PEC value calculation.
 791:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 792:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 793:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 794:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 795:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 928              		.loc 1 795 0
 929              		.cfi_startproc
 930              		@ args = 0, pretend = 0, frame = 0
 931              		@ frame_needed = 0, uses_anonymous_args = 0
 932              		@ link register save eliminated.
 933              	.LVL94:
 796:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 797:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 798:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 799:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 800:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 801:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC calculation */
 802:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENPEC;
 934              		.loc 1 802 0
 935 0000 0388     		ldrh	r3, [r0, #0]
 799:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 936              		.loc 1 799 0
 937 0002 29B9     		cbnz	r1, .L83
 803:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 804:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 805:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 806:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC calculation */
 807:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 938              		.loc 1 807 0
 939 0004 23F02001 		bic	r1, r3, #32
 940              	.LVL95:
 941 0008 0B04     		lsls	r3, r1, #16
 942 000a 1A0C     		lsrs	r2, r3, #16
 943 000c 0280     		strh	r2, [r0, #0]	@ movhi
 944 000e 7047     		bx	lr
 945              	.LVL96:
 946              	.L83:
 802:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENPEC;
 947              		.loc 1 802 0
 948 0010 99B2     		uxth	r1, r3
 949              	.LVL97:
 950 0012 41F02003 		orr	r3, r1, #32
 951 0016 0380     		strh	r3, [r0, #0]	@ movhi
 952 0018 7047     		bx	lr
 953              		.cfi_endproc
 954              	.LFE131:
 956 001a 00BF     		.section	.text.I2C_GetPEC,"ax",%progbits
 957              		.align	2
 958              		.global	I2C_GetPEC
 959              		.thumb
 960              		.thumb_func
 962              	I2C_GetPEC:
 963              	.LFB132:
 808:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 809:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 810:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 811:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 812:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the PEC value for the specified I2C.
 813:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 814:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The PEC value.
 815:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 816:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
 817:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 964              		.loc 1 817 0
 965              		.cfi_startproc
 966              		@ args = 0, pretend = 0, frame = 0
 967              		@ frame_needed = 0, uses_anonymous_args = 0
 968              		@ link register save eliminated.
 969              	.LVL98:
 818:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 819:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 820:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the selected I2C PEC value */
 821:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return ((I2Cx->SR2) >> 8);
 970              		.loc 1 821 0
 971 0000 008B     		ldrh	r0, [r0, #24]
 972              	.LVL99:
 822:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 973              		.loc 1 822 0
 974 0002 C0F30720 		ubfx	r0, r0, #8, #8
 975 0006 7047     		bx	lr
 976              		.cfi_endproc
 977              	.LFE132:
 979              		.section	.text.I2C_DMACmd,"ax",%progbits
 980              		.align	2
 981              		.global	I2C_DMACmd
 982              		.thumb
 983              		.thumb_func
 985              	I2C_DMACmd:
 986              	.LFB133:
 823:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 824:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 825:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 826:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 827:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 828:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group4 DMA transfers management functions
 829:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   DMA transfers management functions 
 830:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 831:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 832:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 833:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                          DMA transfers management functions
 834:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 835:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C DMA channels 
 836:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   requests.
 837:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
 838:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 839:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 840:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 841:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 842:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 843:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C DMA requests.
 844:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 845:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA transfer.
 846:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 847:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 848:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 849:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 850:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 987              		.loc 1 850 0
 988              		.cfi_startproc
 989              		@ args = 0, pretend = 0, frame = 0
 990              		@ frame_needed = 0, uses_anonymous_args = 0
 991              		@ link register save eliminated.
 992              	.LVL100:
 851:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 852:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 853:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 854:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 855:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 856:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C DMA requests */
 857:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_DMAEN;
 993              		.loc 1 857 0
 994 0000 8388     		ldrh	r3, [r0, #4]
 854:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 995              		.loc 1 854 0
 996 0002 29B9     		cbnz	r1, .L88
 858:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 859:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 860:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 861:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C DMA requests */
 862:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 997              		.loc 1 862 0
 998 0004 23F40061 		bic	r1, r3, #2048
 999              	.LVL101:
 1000 0008 0B04     		lsls	r3, r1, #16
 1001 000a 1A0C     		lsrs	r2, r3, #16
 1002 000c 8280     		strh	r2, [r0, #4]	@ movhi
 1003 000e 7047     		bx	lr
 1004              	.LVL102:
 1005              	.L88:
 857:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_DMAEN;
 1006              		.loc 1 857 0
 1007 0010 99B2     		uxth	r1, r3
 1008              	.LVL103:
 1009 0012 41F40063 		orr	r3, r1, #2048
 1010 0016 8380     		strh	r3, [r0, #4]	@ movhi
 1011 0018 7047     		bx	lr
 1012              		.cfi_endproc
 1013              	.LFE133:
 1015 001a 00BF     		.section	.text.I2C_DMALastTransferCmd,"ax",%progbits
 1016              		.align	2
 1017              		.global	I2C_DMALastTransferCmd
 1018              		.thumb
 1019              		.thumb_func
 1021              	I2C_DMALastTransferCmd:
 1022              	.LFB134:
 863:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 864:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 865:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 866:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 867:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Specifies that the next DMA transfer is the last one.
 868:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 869:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA last transfer.
 870:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 871:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 872:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 873:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 874:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1023              		.loc 1 874 0
 1024              		.cfi_startproc
 1025              		@ args = 0, pretend = 0, frame = 0
 1026              		@ frame_needed = 0, uses_anonymous_args = 0
 1027              		@ link register save eliminated.
 1028              	.LVL104:
 875:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 876:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 877:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 878:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 879:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 880:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is the last transfer */
 881:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_LAST;
 1029              		.loc 1 881 0
 1030 0000 8388     		ldrh	r3, [r0, #4]
 878:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1031              		.loc 1 878 0
 1032 0002 29B9     		cbnz	r1, .L92
 882:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 883:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 884:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 885:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is not the last transfer */
 886:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 1033              		.loc 1 886 0
 1034 0004 23F48051 		bic	r1, r3, #4096
 1035              	.LVL105:
 1036 0008 0B04     		lsls	r3, r1, #16
 1037 000a 1A0C     		lsrs	r2, r3, #16
 1038 000c 8280     		strh	r2, [r0, #4]	@ movhi
 1039 000e 7047     		bx	lr
 1040              	.LVL106:
 1041              	.L92:
 881:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_LAST;
 1042              		.loc 1 881 0
 1043 0010 99B2     		uxth	r1, r3
 1044              	.LVL107:
 1045 0012 41F48053 		orr	r3, r1, #4096
 1046 0016 8380     		strh	r3, [r0, #4]	@ movhi
 1047 0018 7047     		bx	lr
 1048              		.cfi_endproc
 1049              	.LFE134:
 1051 001a 00BF     		.section	.text.I2C_ReadRegister,"ax",%progbits
 1052              		.align	2
 1053              		.global	I2C_ReadRegister
 1054              		.thumb
 1055              		.thumb_func
 1057              	I2C_ReadRegister:
 1058              	.LFB135:
 887:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 888:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 889:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 890:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 891:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 892:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 893:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 894:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group5 Interrupts events and flags management functions
 895:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Interrupts, events and flags management functions
 896:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 897:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 898:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 899:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                 Interrupts, events and flags management functions
 900:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 901:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C Interrupts 
 902:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   sources and check or clear the flags or pending bits status.
 903:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   The user should identify which mode will be used in his application to manage 
 904:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
 905:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 906:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 907:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           I2C State Monitoring Functions                    
 908:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================   
 909:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This I2C driver provides three different ways for I2C state monitoring
 910:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   depending on the application requirements and constraints:
 911:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          
 912:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    
 913:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      1. Basic state monitoring (Using I2C_CheckEvent() function)
 914:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -----------------------------------------------------------
 915:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         It compares the status registers (SR1 and SR2) content to a given event
 916:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         (can be the combination of one or more flags).
 917:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         It returns SUCCESS if the current status includes the given flags 
 918:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         and returns ERROR if one or more flags are missing in the current status.
 919:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 920:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 921:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function is suitable for most applications as well as for startup 
 922:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                activity since the events are fully described in the product reference 
 923:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                manual (RM0090).
 924:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - It is also suitable for users who need to define their own events.
 925:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 926:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations
 927:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - If an error occurs (ie. error flags are set besides to the monitored 
 928:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                flags), the I2C_CheckEvent() function may return SUCCESS despite 
 929:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the communication hold or corrupted real state. 
 930:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                In this case, it is advised to use error interrupts to monitor 
 931:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the error events and handle them in the interrupt IRQ handler.
 932:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          
 933:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      @note 
 934:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          For error management, it is advised to use the following functions:
 935:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_ITConfig() to configure and enable the error interrupts (I2C_IT_ERR).
 936:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2Cx_ER_IRQHandler() which is called when the error interrupt occurs.
 937:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              Where x is the peripheral instance (I2C1, I2C2 ...)
 938:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_GetFlagStatus() or I2C_GetITStatus()  to be called into the 
 939:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              I2Cx_ER_IRQHandler() function in order to determine which error occurred.
 940:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_ClearFlag() or I2C_ClearITPendingBit() and/or I2C_SoftwareResetCmd() 
 941:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              and/or I2C_GenerateStop() in order to clear the error flag and source 
 942:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              and return to correct  communication status.
 943:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              
 944:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 945:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      2. Advanced state monitoring (Using the function I2C_GetLastEvent())
 946:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -------------------------------------------------------------------- 
 947:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         Using the function I2C_GetLastEvent() which returns the image of both status 
 948:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         registers in a single word (uint32_t) (Status Register 2 value is shifted left 
 949:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         by 16 bits and concatenated to Status Register 1).
 950:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 951:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 952:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function is suitable for the same applications above but it 
 953:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                allows to overcome the mentioned limitation of I2C_GetFlagStatus() 
 954:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                function.
 955:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - The returned value could be compared to events already defined in 
 956:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the library (stm32f4xx_i2c.h) or to custom values defined by user.
 957:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                This function is suitable when multiple flags are monitored at the 
 958:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                same time.
 959:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - At the opposite of I2C_CheckEvent() function, this function allows 
 960:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                user to choose when an event is accepted (when all events flags are 
 961:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                set and no other flags are set or just when the needed flags are set 
 962:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                like I2C_CheckEvent() function.
 963:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 964:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations
 965:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - User may need to define his own events.
 966:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - Same remark concerning the error management is applicable for this 
 967:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                function if user decides to check only regular communication flags 
 968:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                (and ignores error flags).
 969:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       
 970:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 971:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      3. Flag-based state monitoring (Using the function I2C_GetFlagStatus())
 972:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -----------------------------------------------------------------------
 973:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      
 974:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       Using the function I2C_GetFlagStatus() which simply returns the status of 
 975:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       one single flag (ie. I2C_FLAG_RXNE ...). 
 976:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 977:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 978:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function could be used for specific applications or in debug 
 979:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                phase.
 980:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - It is suitable when only one flag checking is needed (most I2C 
 981:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                events are monitored through multiple flags).
 982:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations: 
 983:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - When calling this function, the Status register is accessed. 
 984:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                Some flags are cleared when the status register is accessed. 
 985:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                So checking the status of one Flag, may clear other ones.
 986:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - Function may need to be called twice or more in order to monitor 
 987:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                one single event.
 988:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 989:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    For detailed description of Events, please refer to section I2C_Events in 
 990:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    stm32f4xx_i2c.h file.
 991:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****        
 992:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 993:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 994:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 995:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    
 996:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 997:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Reads the specified I2C register and returns its value.
 998:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_Register: specifies the register to read.
 999:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1000:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR1:  CR1 register.
1001:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR2:   CR2 register.
1002:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR1:  OAR1 register.
1003:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR2:  OAR2 register.
1004:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_DR:    DR register.
1005:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR1:   SR1 register.
1006:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR2:   SR2 register.
1007:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CCR:   CCR register.
1008:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_TRISE: TRISE register.
1009:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The value of the read register.
1010:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1011:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
1012:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1059              		.loc 1 1012 0
 1060              		.cfi_startproc
 1061              		@ args = 0, pretend = 0, frame = 8
 1062              		@ frame_needed = 0, uses_anonymous_args = 0
 1063              		@ link register save eliminated.
 1064              	.LVL108:
 1065 0000 82B0     		sub	sp, sp, #8
 1066              	.LCFI3:
 1067              		.cfi_def_cfa_offset 8
1013:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   __IO uint32_t tmp = 0;
 1068              		.loc 1 1013 0
 1069 0002 0023     		movs	r3, #0
 1070 0004 0193     		str	r3, [sp, #4]
 1071              	.LVL109:
1014:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1015:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1016:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1017:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_REGISTER(I2C_Register));
1018:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1019:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmp = (uint32_t) I2Cx;
 1072              		.loc 1 1019 0
 1073 0006 0190     		str	r0, [sp, #4]
1020:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmp += I2C_Register;
 1074              		.loc 1 1020 0
 1075 0008 019A     		ldr	r2, [sp, #4]
 1076 000a 8918     		adds	r1, r1, r2
 1077              	.LVL110:
 1078 000c 0191     		str	r1, [sp, #4]
 1079              	.LVL111:
1021:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1022:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the selected register value */
1023:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return (*(__IO uint16_t *) tmp);
 1080              		.loc 1 1023 0
 1081 000e 019B     		ldr	r3, [sp, #4]
 1082 0010 1888     		ldrh	r0, [r3, #0]
 1083              	.LVL112:
1024:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1084              		.loc 1 1024 0
 1085 0012 80B2     		uxth	r0, r0
 1086 0014 02B0     		add	sp, sp, #8
 1087 0016 7047     		bx	lr
 1088              		.cfi_endproc
 1089              	.LFE135:
 1091              		.section	.text.I2C_ITConfig,"ax",%progbits
 1092              		.align	2
 1093              		.global	I2C_ITConfig
 1094              		.thumb
 1095              		.thumb_func
 1097              	I2C_ITConfig:
 1098              	.LFB136:
1025:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1026:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1027:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C interrupts.
1028:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1029:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the I2C interrupts sources to be enabled or disabled. 
1030:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1031:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BUF: Buffer interrupt mask
1032:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_EVT: Event interrupt mask
1033:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ERR: Error interrupt mask
1034:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the specified I2C interrupts.
1035:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1036:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1037:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1038:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
1039:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1099              		.loc 1 1039 0
 1100              		.cfi_startproc
 1101              		@ args = 0, pretend = 0, frame = 0
 1102              		@ frame_needed = 0, uses_anonymous_args = 0
 1103              		@ link register save eliminated.
 1104              	.LVL113:
1040:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1041:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1042:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1043:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CONFIG_IT(I2C_IT));
1044:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1045:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
1046:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1047:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C interrupts */
1048:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_IT;
 1105              		.loc 1 1048 0
 1106 0000 8388     		ldrh	r3, [r0, #4]
 1107 0002 9BB2     		uxth	r3, r3
1045:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1108              		.loc 1 1045 0
 1109 0004 1AB9     		cbnz	r2, .L97
1049:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1050:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1051:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1052:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C interrupts */
1053:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~I2C_IT;
 1110              		.loc 1 1053 0
 1111 0006 23EA0102 		bic	r2, r3, r1
 1112              	.LVL114:
 1113 000a 8280     		strh	r2, [r0, #4]	@ movhi
 1114 000c 7047     		bx	lr
 1115              	.LVL115:
 1116              	.L97:
1048:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_IT;
 1117              		.loc 1 1048 0
 1118 000e 1943     		orrs	r1, r1, r3
 1119              	.LVL116:
 1120 0010 8180     		strh	r1, [r0, #4]	@ movhi
 1121 0012 7047     		bx	lr
 1122              		.cfi_endproc
 1123              	.LFE136:
 1125              		.section	.text.I2C_CheckEvent,"ax",%progbits
 1126              		.align	2
 1127              		.global	I2C_CheckEvent
 1128              		.thumb
 1129              		.thumb_func
 1131              	I2C_CheckEvent:
 1132              	.LFB137:
1054:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1055:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
1056:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1057:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1058:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1059:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           1. Basic state monitoring                    
1060:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1061:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1062:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1063:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1064:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the last I2Cx Event is equal to the one passed
1065:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         as parameter.
1066:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1067:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_EVENT: specifies the event to be checked. 
1068:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1069:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED: EV1
1070:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED: EV1
1071:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED: EV1
1072:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED: EV1
1073:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED: EV1
1074:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_RECEIVED: EV2
1075:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_DUALF): EV2
1076:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_GENCALL): EV2
1077:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_TRANSMITTED: EV3
1078:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_DUALF): EV3
1079:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_GENCALL): EV3
1080:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_ACK_FAILURE: EV3_2
1081:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_STOP_DETECTED: EV4
1082:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_SELECT: EV5
1083:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED: EV6     
1084:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED: EV6
1085:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_RECEIVED: EV7
1086:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTING: EV8
1087:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTED: EV8_2
1088:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_ADDRESS10: EV9
1089:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *     
1090:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1091:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1092:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
1093:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval An ErrorStatus enumeration value:
1094:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - SUCCESS: Last event is equal to the I2C_EVENT
1095:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - ERROR: Last event is different from the I2C_EVENT
1096:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1097:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
1098:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1133              		.loc 1 1098 0
 1134              		.cfi_startproc
 1135              		@ args = 0, pretend = 0, frame = 0
 1136              		@ frame_needed = 0, uses_anonymous_args = 0
 1137              		@ link register save eliminated.
 1138              	.LVL117:
 1139              	.LVL118:
1099:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
1100:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
1101:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ErrorStatus status = ERROR;
1102:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1103:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1104:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1105:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_EVENT(I2C_EVENT));
1106:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1107:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1108:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1140              		.loc 1 1108 0
 1141 0000 B0F814C0 		ldrh	ip, [r0, #20]
1109:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 1142              		.loc 1 1109 0
 1143 0004 038B     		ldrh	r3, [r0, #24]
1108:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1144              		.loc 1 1108 0
 1145 0006 1FFA8CF2 		uxth	r2, ip
 1146              	.LVL119:
1110:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
1111:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1112:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1113:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 1147              		.loc 1 1113 0
 1148 000a 42EA0340 		orr	r0, r2, r3, lsl #16
 1149              	.LVL120:
 1150 000e 00EA010C 		and	ip, r0, r1
1114:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1115:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check whether the last event contains the I2C_EVENT */
1116:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if ((lastevent & I2C_EVENT) == I2C_EVENT)
 1151              		.loc 1 1116 0
 1152 0012 2CF07F42 		bic	r2, ip, #-16777216
 1153              	.LVL121:
1117:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1118:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* SUCCESS: last event is equal to I2C_EVENT */
1119:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     status = SUCCESS;
1120:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1121:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1122:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1123:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* ERROR: last event is different from I2C_EVENT */
1124:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     status = ERROR;
1125:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1126:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return status */
1127:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return status;
1128:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1154              		.loc 1 1128 0
 1155 0016 8B1A     		subs	r3, r1, r2
 1156              	.LVL122:
 1157 0018 5842     		rsbs	r0, r3, #0
 1158 001a 40EB0300 		adc	r0, r0, r3
 1159 001e 7047     		bx	lr
 1160              		.cfi_endproc
 1161              	.LFE137:
 1163              		.section	.text.I2C_GetLastEvent,"ax",%progbits
 1164              		.align	2
 1165              		.global	I2C_GetLastEvent
 1166              		.thumb
 1167              		.thumb_func
 1169              	I2C_GetLastEvent:
 1170              	.LFB138:
1129:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1130:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1131:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1132:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           2. Advanced state monitoring                   
1133:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1134:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1135:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1136:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1137:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the last I2Cx Event.
1138:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1139:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *     
1140:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1141:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1142:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
1143:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The last event
1144:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1145:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
1146:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1171              		.loc 1 1146 0
 1172              		.cfi_startproc
 1173              		@ args = 0, pretend = 0, frame = 0
 1174              		@ frame_needed = 0, uses_anonymous_args = 0
 1175              		@ link register save eliminated.
 1176              	.LVL123:
 1177              	.LVL124:
1147:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
1148:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
1149:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1150:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1151:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1152:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1153:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1154:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1178              		.loc 1 1154 0
 1179 0000 828A     		ldrh	r2, [r0, #20]
1155:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 1180              		.loc 1 1155 0
 1181 0002 038B     		ldrh	r3, [r0, #24]
1154:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1182              		.loc 1 1154 0
 1183 0004 91B2     		uxth	r1, r2
 1184              	.LVL125:
1156:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
1157:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1158:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1159:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 1185              		.loc 1 1159 0
 1186 0006 41EA0340 		orr	r0, r1, r3, lsl #16
 1187              	.LVL126:
1160:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1161:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return status */
1162:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return lastevent;
1163:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1188              		.loc 1 1163 0
 1189 000a 20F07F40 		bic	r0, r0, #-16777216
 1190 000e 7047     		bx	lr
 1191              		.cfi_endproc
 1192              	.LFE138:
 1194              		.section	.text.I2C_GetFlagStatus,"ax",%progbits
 1195              		.align	2
 1196              		.global	I2C_GetFlagStatus
 1197              		.thumb
 1198              		.thumb_func
 1200              	I2C_GetFlagStatus:
 1201              	.LFB139:
1164:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1165:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1166:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1167:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           3. Flag-based state monitoring                   
1168:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1169:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1170:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1171:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1172:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C flag is set or not.
1173:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1174:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to check. 
1175:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1176:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_DUALF: Dual flag (Slave mode)
1177:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBHOST: SMBus host header (Slave mode)
1178:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBDEFAULT: SMBus default header (Slave mode)
1179:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_GENCALL: General call header flag (Slave mode)
1180:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TRA: Transmitter/Receiver flag
1181:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BUSY: Bus busy flag
1182:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_MSL: Master/Slave flag
1183:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1184:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1185:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1186:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1187:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1188:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1189:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1190:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TXE: Data register empty flag (Transmitter)
1191:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_RXNE: Data register not empty (Receiver) flag
1192:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_STOPF: Stop detection flag (Slave mode)
1193:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADD10: 10-bit header sent flag (Master mode)
1194:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BTF: Byte transfer finished flag
1195:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADDR: Address sent flag (Master mode) "ADSL"
1196:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                Address matched flag (Slave mode)"ENDAD"
1197:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
1198:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_FLAG (SET or RESET).
1199:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1200:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1201:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1202              		.loc 1 1201 0
 1203              		.cfi_startproc
 1204              		@ args = 0, pretend = 0, frame = 8
 1205              		@ frame_needed = 0, uses_anonymous_args = 0
 1206              		@ link register save eliminated.
 1207              	.LVL127:
 1208 0000 82B0     		sub	sp, sp, #8
 1209              	.LCFI4:
 1210              		.cfi_def_cfa_offset 8
 1211              	.LVL128:
1202:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   FlagStatus bitstatus = RESET;
1203:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   __IO uint32_t i2creg = 0, i2cxbase = 0;
 1212              		.loc 1 1203 0
 1213 0002 0023     		movs	r3, #0
1204:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1205:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1206:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1207:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
1208:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1209:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx peripheral base address */
1210:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2cxbase = (uint32_t)I2Cx;
1211:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1212:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read flag register index */
1213:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2creg = I2C_FLAG >> 28;
 1214              		.loc 1 1213 0
 1215 0004 0A0F     		lsrs	r2, r1, #28
 1216              	.LVL129:
1203:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   __IO uint32_t i2creg = 0, i2cxbase = 0;
 1217              		.loc 1 1203 0
 1218 0006 0093     		str	r3, [sp, #0]
 1219              	.LVL130:
 1220 0008 0193     		str	r3, [sp, #4]
 1221              	.LVL131:
1210:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2cxbase = (uint32_t)I2Cx;
 1222              		.loc 1 1210 0
 1223 000a 0190     		str	r0, [sp, #4]
 1224              		.loc 1 1213 0
 1225 000c 0092     		str	r2, [sp, #0]
1214:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1215:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1216:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_FLAG &= FLAG_MASK;
1217:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1218:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if(i2creg != 0)
 1226              		.loc 1 1218 0
 1227 000e 009B     		ldr	r3, [sp, #0]
1216:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_FLAG &= FLAG_MASK;
 1228              		.loc 1 1216 0
 1229 0010 21F07F41 		bic	r1, r1, #-16777216
 1230              	.LVL132:
 1231              		.loc 1 1218 0
 1232 0014 53B1     		cbz	r3, .L101
1219:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1220:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR1 register address */
1221:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x14;
 1233              		.loc 1 1221 0
 1234 0016 0198     		ldr	r0, [sp, #4]
 1235              	.LVL133:
 1236 0018 1430     		adds	r0, r0, #20
 1237              	.LVL134:
 1238 001a 0190     		str	r0, [sp, #4]
 1239              	.LVL135:
 1240              	.L102:
1222:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1223:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1224:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1225:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Flag in I2Cx SR2 Register */
1226:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
1227:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR2 register address */
1228:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x18;
1229:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1230:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1231:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 1241              		.loc 1 1231 0
 1242 001c 0198     		ldr	r0, [sp, #4]
 1243              	.LVL136:
 1244 001e 0368     		ldr	r3, [r0, #0]
 1245              	.LVL137:
1232:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1233:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is set */
1234:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = SET;
 1246              		.loc 1 1234 0
 1247 0020 1942     		tst	r1, r3
1235:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1236:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1237:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1238:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is reset */
1239:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
1240:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1241:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1242:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the I2C_FLAG status */
1243:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return  bitstatus;
1244:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1248              		.loc 1 1244 0
 1249 0022 0CBF     		ite	eq
 1250 0024 0020     		moveq	r0, #0
 1251 0026 0120     		movne	r0, #1
 1252 0028 02B0     		add	sp, sp, #8
 1253 002a 7047     		bx	lr
 1254              	.LVL138:
 1255              	.L101:
1228:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x18;
 1256              		.loc 1 1228 0
 1257 002c 019A     		ldr	r2, [sp, #4]
 1258 002e 1832     		adds	r2, r2, #24
 1259              	.LVL139:
1226:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 1260              		.loc 1 1226 0
 1261 0030 090C     		lsrs	r1, r1, #16
 1262              	.LVL140:
1228:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x18;
 1263              		.loc 1 1228 0
 1264 0032 0192     		str	r2, [sp, #4]
 1265              	.LVL141:
 1266 0034 F2E7     		b	.L102
 1267              		.cfi_endproc
 1268              	.LFE139:
 1270 0036 00BF     		.section	.text.I2C_ClearFlag,"ax",%progbits
 1271              		.align	2
 1272              		.global	I2C_ClearFlag
 1273              		.thumb
 1274              		.thumb_func
 1276              	I2C_ClearFlag:
 1277              	.LFB140:
1245:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1246:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1247:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's pending flags.
1248:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1249:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to clear. 
1250:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1251:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1252:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1253:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1254:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1255:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1256:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1257:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1258:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *   
1259:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1260:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetFlagStatus()) followed by a write operation 
1261:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1262:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1263:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetFlagStatus()) followed by writing the 
1264:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          second byte of the address in DR register.
1265:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1266:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetFlagStatus()) followed by a 
1267:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1268:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1269:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetFlagStatus()) followed by a read operation to 
1270:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1271:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared software sequence: a read operation to I2C_SR1
1272:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          register (I2C_GetFlagStatus()) followed by a write operation to I2C_DR
1273:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          register (I2C_SendData()).
1274:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  
1275:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1276:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1277:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1278:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1278              		.loc 1 1278 0
 1279              		.cfi_startproc
 1280              		@ args = 0, pretend = 0, frame = 0
 1281              		@ frame_needed = 0, uses_anonymous_args = 0
 1282              		@ link register save eliminated.
 1283              	.LVL142:
 1284              	.LVL143:
1279:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
1280:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1281:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1282:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
1283:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1284:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flagpos = I2C_FLAG & FLAG_MASK;
1285:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1286:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 1285              		.loc 1 1286 0
 1286 0000 C943     		mvns	r1, r1
 1287              	.LVL144:
 1288 0002 8182     		strh	r1, [r0, #20]	@ movhi
1287:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1289              		.loc 1 1287 0
 1290 0004 7047     		bx	lr
 1291              		.cfi_endproc
 1292              	.LFE140:
 1294 0006 00BF     		.section	.text.I2C_GetITStatus,"ax",%progbits
 1295              		.align	2
 1296              		.global	I2C_GetITStatus
 1297              		.thumb
 1298              		.thumb_func
 1300              	I2C_GetITStatus:
 1301              	.LFB141:
1288:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1289:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1290:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C interrupt has occurred or not.
1291:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1292:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt source to check. 
1293:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1294:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert flag
1295:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error flag
1296:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception flag
1297:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun flag (Slave mode)
1298:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure flag
1299:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost flag (Master mode)
1300:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error flag
1301:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TXE: Data register empty flag (Transmitter)
1302:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_RXNE: Data register not empty (Receiver) flag
1303:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_STOPF: Stop detection flag (Slave mode)
1304:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADD10: 10-bit header sent flag (Master mode)
1305:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BTF: Byte transfer finished flag
1306:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
1307:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                              Address matched flag (Slave mode)"ENDAD"
1308:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SB: Start bit flag (Master mode)
1309:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_IT (SET or RESET).
1310:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1311:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1312:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1302              		.loc 1 1312 0
 1303              		.cfi_startproc
 1304              		@ args = 0, pretend = 0, frame = 0
 1305              		@ frame_needed = 0, uses_anonymous_args = 0
 1306              		@ link register save eliminated.
 1307              	.LVL145:
 1308              	.LVL146:
1313:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ITStatus bitstatus = RESET;
1314:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t enablestatus = 0;
1315:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1316:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1317:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1318:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_IT(I2C_IT));
1319:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1320:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check if the interrupt source is enabled or not */
1321:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 1309              		.loc 1 1321 0
 1310 0000 8388     		ldrh	r3, [r0, #4]
1322:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1323:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1324:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_IT &= FLAG_MASK;
1325:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1326:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the status of the specified I2C flag */
1327:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 1311              		.loc 1 1327 0
 1312 0002 828A     		ldrh	r2, [r0, #20]
 1313 0004 90B2     		uxth	r0, r2
 1314              	.LVL147:
1321:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 1315              		.loc 1 1321 0
 1316 0006 9BB2     		uxth	r3, r3
 1317              	.LVL148:
 1318              		.loc 1 1327 0
 1319 0008 0840     		ands	r0, r1, r0
 1320 000a 06D0     		beq	.L105
1321:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 1321              		.loc 1 1321 0 discriminator 1
 1322 000c 01F0E061 		and	r1, r1, #117440512
 1323              	.LVL149:
1311:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
 1324              		.loc 1 1311 0 discriminator 1
 1325 0010 13EA1141 		ands	r1, r3, r1, lsr #16
 1326              	.LVL150:
1328:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1329:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_IT is set */
1330:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = SET;
 1327              		.loc 1 1330 0 discriminator 1
 1328 0014 0CBF     		ite	eq
 1329 0016 0020     		moveq	r0, #0
 1330 0018 0120     		movne	r0, #1
 1331              	.L105:
 1332              	.LVL151:
1331:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1332:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1333:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1334:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_IT is reset */
1335:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
1336:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1337:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the I2C_IT status */
1338:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return  bitstatus;
1339:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1333              		.loc 1 1339 0
 1334 001a 7047     		bx	lr
 1335              		.cfi_endproc
 1336              	.LFE141:
 1338              		.section	.text.I2C_ClearITPendingBit,"ax",%progbits
 1339              		.align	2
 1340              		.global	I2C_ClearITPendingBit
 1341              		.thumb
 1342              		.thumb_func
 1344              	I2C_ClearITPendingBit:
 1345              	.LFB142:
1340:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1341:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1342:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's interrupt pending bits.
1343:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1344:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt pending bit to clear. 
1345:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1346:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert interrupt
1347:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error interrupt
1348:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception  interrupt
1349:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun interrupt (Slave mode)
1350:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure interrupt
1351:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost interrupt (Master mode)
1352:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error interrupt
1353:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
1354:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1355:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1356:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1357:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1358:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetITStatus()) followed by writing the second 
1359:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          byte of the address in I2C_DR register.
1360:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1361:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetITStatus()) followed by a 
1362:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1363:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1364:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a read operation to 
1365:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1366:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared by software sequence: a read operation to 
1367:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1368:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_DR register (I2C_SendData()).
1369:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1370:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1371:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1372:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1346              		.loc 1 1372 0
 1347              		.cfi_startproc
 1348              		@ args = 0, pretend = 0, frame = 0
 1349              		@ frame_needed = 0, uses_anonymous_args = 0
 1350              		@ link register save eliminated.
 1351              	.LVL152:
 1352              	.LVL153:
1373:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
1374:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1375:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1376:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_IT(I2C_IT));
1377:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1378:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1379:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flagpos = I2C_IT & FLAG_MASK;
1380:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1381:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1382:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 1353              		.loc 1 1382 0
 1354 0000 C943     		mvns	r1, r1
 1355              	.LVL154:
 1356 0002 8182     		strh	r1, [r0, #20]	@ movhi
1383:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1357              		.loc 1 1383 0
 1358 0004 7047     		bx	lr
 1359              		.cfi_endproc
 1360              	.LFE142:
 1362 0006 00BF     		.text
 1363              	.Letext0:
 1364              		.file 2 "c:\\program files\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 1365              		.file 3 "../../lib/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1366              		.file 4 "../../lib/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
 1367              		.file 5 "../../lib/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_i2c.h"
 1368              		.file 6 "../../lib/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_i2c.c
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:18     .text.I2C_DeInit:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:23     .text.I2C_DeInit:00000000 I2C_DeInit
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:97     .text.I2C_Init:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:102    .text.I2C_Init:00000000 I2C_Init
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:268    .text.I2C_StructInit:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:273    .text.I2C_StructInit:00000000 I2C_StructInit
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:304    .text.I2C_Cmd:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:309    .text.I2C_Cmd:00000000 I2C_Cmd
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:340    .text.I2C_GenerateSTART:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:345    .text.I2C_GenerateSTART:00000000 I2C_GenerateSTART
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:376    .text.I2C_GenerateSTOP:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:381    .text.I2C_GenerateSTOP:00000000 I2C_GenerateSTOP
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:412    .text.I2C_Send7bitAddress:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:417    .text.I2C_Send7bitAddress:00000000 I2C_Send7bitAddress
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:446    .text.I2C_AcknowledgeConfig:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:451    .text.I2C_AcknowledgeConfig:00000000 I2C_AcknowledgeConfig
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:482    .text.I2C_OwnAddress2Config:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:487    .text.I2C_OwnAddress2Config:00000000 I2C_OwnAddress2Config
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:517    .text.I2C_DualAddressCmd:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:522    .text.I2C_DualAddressCmd:00000000 I2C_DualAddressCmd
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:553    .text.I2C_GeneralCallCmd:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:558    .text.I2C_GeneralCallCmd:00000000 I2C_GeneralCallCmd
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:589    .text.I2C_SoftwareResetCmd:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:594    .text.I2C_SoftwareResetCmd:00000000 I2C_SoftwareResetCmd
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:622    .text.I2C_StretchClockCmd:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:627    .text.I2C_StretchClockCmd:00000000 I2C_StretchClockCmd
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:658    .text.I2C_FastModeDutyCycleConfig:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:663    .text.I2C_FastModeDutyCycleConfig:00000000 I2C_FastModeDutyCycleConfig
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:694    .text.I2C_NACKPositionConfig:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:699    .text.I2C_NACKPositionConfig:00000000 I2C_NACKPositionConfig
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:731    .text.I2C_SMBusAlertConfig:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:736    .text.I2C_SMBusAlertConfig:00000000 I2C_SMBusAlertConfig
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:768    .text.I2C_ARPCmd:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:773    .text.I2C_ARPCmd:00000000 I2C_ARPCmd
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:804    .text.I2C_SendData:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:809    .text.I2C_SendData:00000000 I2C_SendData
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:825    .text.I2C_ReceiveData:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:830    .text.I2C_ReceiveData:00000000 I2C_ReceiveData
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:848    .text.I2C_TransmitPEC:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:853    .text.I2C_TransmitPEC:00000000 I2C_TransmitPEC
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:884    .text.I2C_PECPositionConfig:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:889    .text.I2C_PECPositionConfig:00000000 I2C_PECPositionConfig
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:921    .text.I2C_CalculatePEC:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:926    .text.I2C_CalculatePEC:00000000 I2C_CalculatePEC
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:957    .text.I2C_GetPEC:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:962    .text.I2C_GetPEC:00000000 I2C_GetPEC
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:980    .text.I2C_DMACmd:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:985    .text.I2C_DMACmd:00000000 I2C_DMACmd
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:1016   .text.I2C_DMALastTransferCmd:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:1021   .text.I2C_DMALastTransferCmd:00000000 I2C_DMALastTransferCmd
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:1052   .text.I2C_ReadRegister:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:1057   .text.I2C_ReadRegister:00000000 I2C_ReadRegister
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:1092   .text.I2C_ITConfig:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:1097   .text.I2C_ITConfig:00000000 I2C_ITConfig
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:1126   .text.I2C_CheckEvent:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:1131   .text.I2C_CheckEvent:00000000 I2C_CheckEvent
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:1164   .text.I2C_GetLastEvent:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:1169   .text.I2C_GetLastEvent:00000000 I2C_GetLastEvent
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:1195   .text.I2C_GetFlagStatus:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:1200   .text.I2C_GetFlagStatus:00000000 I2C_GetFlagStatus
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:1271   .text.I2C_ClearFlag:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:1276   .text.I2C_ClearFlag:00000000 I2C_ClearFlag
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:1295   .text.I2C_GetITStatus:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:1300   .text.I2C_GetITStatus:00000000 I2C_GetITStatus
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:1339   .text.I2C_ClearITPendingBit:00000000 $t
C:\DOCUME~1\ptuser\LOCALS~1\Temp\cc0klb6D.s:1344   .text.I2C_ClearITPendingBit:00000000 I2C_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
