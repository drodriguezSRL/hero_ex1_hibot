   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 23, 1
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.thumb
  12              		.file	"stm32f4xx_adc.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.ADC_DeInit,"ax",%progbits
  17              		.align	2
  18              		.global	ADC_DeInit
  19              		.thumb
  20              		.thumb_func
  22              	ADC_DeInit:
  23              	.LFB110:
  24              		.file 1 "../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c"
   1:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
   2:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
   3:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @file    stm32f4xx_adc.c
   4:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @author  MCD Application Team
   5:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @version V1.0.2
   6:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @date    05-March-2012
   7:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Initialization and Configuration (in addition to ADC multi mode 
  10:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             selection)
  11:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Analog Watchdog configuration
  12:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Temperature Sensor & Vrefint (Voltage Reference internal) & VBAT
  13:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             management 
  14:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels Configuration
  15:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels DMA Configuration
  16:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Injected channels Configuration
  17:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Interrupts and flags management
  18:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         
  19:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @verbatim
  20:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  21:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  22:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                   How to use this driver
  23:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  24:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
  25:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          1.  Enable the ADC interface clock using 
  26:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADCx, ENABLE); 
  27:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *     
  28:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          2. ADC pins configuration
  29:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *               - Enable the clock for the ADC GPIOs using the following function:
  30:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  31:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                - Configure these ADC pins in analog mode using GPIO_Init();  
  32:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  33:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          3. Configure the ADC Prescaler, conversion resolution and data 
  34:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              alignment using the ADC_Init() function.
  35:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          4. Activate the ADC peripheral using ADC_Cmd() function.
  36:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  37:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Regular channels group configuration
  38:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================    
  39:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC regular channels group features, use 
  40:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_Init() and ADC_RegularChannelConfig() functions.
  41:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  42:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  43:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configurate and activate the Discontinuous mode, use the 
  44:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_DiscModeChannelCountConfig() and ADC_DiscModeCmd() functions.
  45:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetConversionValue()
  46:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  47:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  48:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Multi mode ADCs Regular channels configuration
  49:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===============================================
  50:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Refer to "Regular channels group configuration" description to
  51:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              configure the ADC1, ADC2 and ADC3 regular channels.        
  52:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Select the Multi mode ADC regular channels features (dual or 
  53:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              triple mode) using ADC_CommonInit() function and configure 
  54:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              the DMA mode using ADC_MultiModeDMARequestAfterLastTransferCmd() 
  55:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.        
  56:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Read the ADCs converted values using the 
  57:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_GetMultiModeConversionValue() function.
  58:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  59:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          DMA for Regular channels group features configuration
  60:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================================== 
  61:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the DMA mode for regular channels group, use the 
  62:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             ADC_DMACmd() function.
  63:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the generation of DMA requests continuously at the end
  64:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             of the last DMA transfer, use the ADC_DMARequestAfterLastTransferCmd() 
  65:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             function.
  66:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  67:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Injected channels group configuration
  68:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          =====================================    
  69:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC Injected channels group features, use 
  70:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedChannelConfig() and  ADC_InjectedSequencerLengthConfig()
  71:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.
  72:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  73:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  74:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the Injected Discontinuous mode, use the 
  75:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedDiscModeCmd() function.  
  76:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the AutoInjected mode, use the ADC_AutoInjectedConvCmd() 
  77:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.        
  78:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetInjectedConversionValue() 
  79:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  80:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  81:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @endverbatim
  82:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  83:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
  84:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @attention
  85:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  86:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  87:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  88:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  89:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * You may not use this file except in compliance with the License.
  90:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * You may obtain a copy of the License at:
  91:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  92:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  93:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  94:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * Unless required by applicable law or agreed to in writing, software 
  95:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  96:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  97:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * See the License for the specific language governing permissions and
  98:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * limitations under the License.
  99:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
 100:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
 101:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 102:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 103:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Includes ------------------------------------------------------------------*/
 104:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_adc.h"
 105:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_rcc.h"
 106:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 107:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 108:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 109:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 110:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 111:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC 
 112:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief ADC driver modules
 113:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 114:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 115:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 116:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private typedef -----------------------------------------------------------*/
 117:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private define ------------------------------------------------------------*/ 
 118:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 119:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC DISCNUM mask */
 120:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_DISCNUM_RESET         ((uint32_t)0xFFFF1FFF)
 121:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 122:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC AWDCH mask */
 123:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDCH_RESET           ((uint32_t)0xFFFFFFE0)   
 124:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 125:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC Analog watchdog enable mode mask */
 126:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDMode_RESET         ((uint32_t)0xFF3FFDFF)   
 127:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 128:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR1 register Mask */
 129:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_CLEAR_MASK            ((uint32_t)0xFCFFFEFF)
 130:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 131:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC EXTEN mask */
 132:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_EXTEN_RESET           ((uint32_t)0xCFFFFFFF)  
 133:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 134:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTEN mask */
 135:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTEN_RESET          ((uint32_t)0xFFCFFFFF)  
 136:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 137:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTSEL mask */
 138:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTSEL_RESET         ((uint32_t)0xFFF0FFFF)  
 139:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 140:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR2 register Mask */
 141:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_CLEAR_MASK            ((uint32_t)0xC0FFF7FD)
 142:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 143:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SQx mask */
 144:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR3_SQ_SET               ((uint32_t)0x0000001F)  
 145:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR2_SQ_SET               ((uint32_t)0x0000001F)  
 146:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_SQ_SET               ((uint32_t)0x0000001F)  
 147:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 148:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC L Mask */
 149:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_L_RESET              ((uint32_t)0xFF0FFFFF) 
 150:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 151:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JSQx mask */
 152:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JSQ_SET              ((uint32_t)0x0000001F) 
 153:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 154:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JL mask */
 155:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_SET               ((uint32_t)0x00300000) 
 156:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_RESET             ((uint32_t)0xFFCFFFFF) 
 157:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 158:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SMPx mask */
 159:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR1_SMP_SET             ((uint32_t)0x00000007)  
 160:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR2_SMP_SET             ((uint32_t)0x00000007) 
 161:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 162:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JDRx registers offset */
 163:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JDR_OFFSET                ((uint8_t)0x28) 
 164:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 165:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CDR register base address */
 166:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CDR_ADDRESS               ((uint32_t)0x40012308)   
 167:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 168:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CCR register Mask */
 169:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR_CLEAR_MASK             ((uint32_t)0xFFFC30E0)  
 170:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 171:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private macro -------------------------------------------------------------*/
 172:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private variables ---------------------------------------------------------*/
 173:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private function prototypes -----------------------------------------------*/
 174:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private functions ---------------------------------------------------------*/
 175:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 176:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Private_Functions
 177:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 178:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 179:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 180:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group1 Initialization and Configuration functions
 181:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Initialization and Configuration functions 
 182:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 183:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim    
 184:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 185:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       Initialization and Configuration functions
 186:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 187:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to:
 188:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Initialize and configure the ADC Prescaler
 189:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Conversion Resolution (12bit..6bit)
 190:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Scan Conversion Mode (multichannels or one channel) for regular group
 191:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Continuous Conversion Mode (Continuous or Single conversion) for 
 192:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular group
 193:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - External trigger Edge and source of regular group, 
 194:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Converted data alignment (left or right)
 195:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - The number of ADC conversions that will be done using the sequencer for 
 196:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel group
 197:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Multi ADC mode selection
 198:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Direct memory access mode selection for multi ADC mode  
 199:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Delay between 2 sampling phases (used in dual or triple interleaved modes)
 200:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Enable or disable the ADC peripheral
 201:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    
 202:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 203:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 204:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 205:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 206:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 207:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Deinitializes all ADCs peripherals registers to their default reset 
 208:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         values.
 209:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None
 210:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 211:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 212:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DeInit(void)
 213:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
  25              		.loc 1 213 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 08B5     		push	{r3, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 3, -8
  33              		.cfi_offset 14, -4
 214:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable all ADCs reset state */
 215:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
  34              		.loc 1 215 0
  35 0002 4FF48070 		mov	r0, #256
  36 0006 0121     		movs	r1, #1
  37 0008 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  38              	.LVL0:
 216:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 217:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Release all ADCs from reset state */
 218:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
  39              		.loc 1 218 0
  40 000c 4FF48070 		mov	r0, #256
  41 0010 0021     		movs	r1, #0
 219:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
  42              		.loc 1 219 0
  43 0012 BDE80840 		pop	{r3, lr}
 218:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
  44              		.loc 1 218 0
  45 0016 FFF7FEBF 		b	RCC_APB2PeriphResetCmd
  46              	.LVL1:
  47              		.cfi_endproc
  48              	.LFE110:
  50 001a 00BF     		.section	.text.ADC_Init,"ax",%progbits
  51              		.align	2
  52              		.global	ADC_Init
  53              		.thumb
  54              		.thumb_func
  56              	ADC_Init:
  57              	.LFB111:
 220:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 221:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 222:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 223:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_InitStruct.
 224:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 225:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 226:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 227:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 228:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 229:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 230:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 231:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         the configuration information for the specified ADC peripheral.
 232:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 233:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 234:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 235:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
  58              		.loc 1 235 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63              	.LVL2:
  64 0000 F0B4     		push	{r4, r5, r6, r7}
  65              	.LCFI1:
  66              		.cfi_def_cfa_offset 16
  67              		.cfi_offset 4, -16
  68              		.cfi_offset 5, -12
  69              		.cfi_offset 6, -8
  70              		.cfi_offset 7, -4
  71              	.LVL3:
 236:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 237:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t tmpreg2 = 0;
 238:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 239:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 240:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_RESOLUTION(ADC_InitStruct->ADC_Resolution)); 
 241:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
 242:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode)); 
 243:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(ADC_InitStruct->ADC_ExternalTrigConvEdge)); 
 244:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));    
 245:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 246:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
 247:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 248:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 249:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR1 value */
 250:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
  72              		.loc 1 250 0
  73 0002 4568     		ldr	r5, [r0, #4]
  74              	.LVL4:
 251:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 252:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear RES and SCAN bits */
 253:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_CLEAR_MASK;
 254:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 255:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: scan conversion mode and resolution */
 256:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 257:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set RES bit according to ADC_Resolution value */ 
 258:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
  75              		.loc 1 258 0
  76 0004 0A68     		ldr	r2, [r1, #0]
  77 0006 0C79     		ldrb	r4, [r1, #4]	@ zero_extendqisi2
 259:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
 260:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR1 */
 261:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 262:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 263:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR2 value */
 264:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR2;
 265:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 266:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
 267:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
  78              		.loc 1 267 0
  79 0008 0F4B     		ldr	r3, .L3
 253:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_CLEAR_MASK;
  80              		.loc 1 253 0
  81 000a 25F04075 		bic	r5, r5, #50331648
  82              	.LVL5:
  83 000e 25F48075 		bic	r5, r5, #256
 258:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
  84              		.loc 1 258 0
  85 0012 2A43     		orrs	r2, r2, r5
  86 0014 42EA0422 		orr	r2, r2, r4, lsl #8
  87              	.LVL6:
 261:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
  88              		.loc 1 261 0
  89 0018 4260     		str	r2, [r0, #4]
 268:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 269:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: external trigger event and edge, data alignment and 
 270:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      continuous conversion mode */
 271:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 272:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
 273:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 274:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 275:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
  90              		.loc 1 275 0
  91 001a CD68     		ldr	r5, [r1, #12]
  92 001c 0C69     		ldr	r4, [r1, #16]
 264:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR2;
  93              		.loc 1 264 0
  94 001e 8768     		ldr	r7, [r0, #8]
  95              	.LVL7:
 276:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
  96              		.loc 1 276 0
  97 0020 8A68     		ldr	r2, [r1, #8]
 277:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 278:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  98              		.loc 1 278 0
  99 0022 4E79     		ldrb	r6, [r1, #5]	@ zero_extendqisi2
 275:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 100              		.loc 1 275 0
 101 0024 2C43     		orrs	r4, r4, r5
 276:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 102              		.loc 1 276 0
 103 0026 2243     		orrs	r2, r2, r4
 267:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
 104              		.loc 1 267 0
 105 0028 3B40     		ands	r3, r3, r7
 106              	.LVL8:
 275:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 107              		.loc 1 275 0
 108 002a 1343     		orrs	r3, r3, r2
 109              	.LVL9:
 110 002c 43EA4603 		orr	r3, r3, r6, lsl #1
 111              	.LVL10:
 279:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 280:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR2 */
 281:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg1;
 112              		.loc 1 281 0
 113 0030 8360     		str	r3, [r0, #8]
 282:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 283:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx SQR1 value */
 284:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->SQR1;
 285:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 286:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear L bits */
 287:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= SQR1_L_RESET;
 288:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 289:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: regular channel sequence length */
 290:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set L bits according to ADC_NbrOfConversion value */
 291:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 114              		.loc 1 291 0
 115 0032 0B7D     		ldrb	r3, [r1, #20]	@ zero_extendqisi2
 116              	.LVL11:
 284:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->SQR1;
 117              		.loc 1 284 0
 118 0034 C26A     		ldr	r2, [r0, #44]
 119              	.LVL12:
 120              		.loc 1 291 0
 121 0036 013B     		subs	r3, r3, #1
 287:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= SQR1_L_RESET;
 122              		.loc 1 287 0
 123 0038 22F47002 		bic	r2, r2, #15728640
 124              	.LVL13:
 292:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 125              		.loc 1 292 0
 126 003c DBB2     		uxtb	r3, r3
 127 003e 42EA0353 		orr	r3, r2, r3, lsl #20
 128              	.LVL14:
 293:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 294:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx SQR1 */
 295:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SQR1 = tmpreg1;
 129              		.loc 1 295 0
 130 0042 C362     		str	r3, [r0, #44]
 296:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 131              		.loc 1 296 0
 132 0044 F0BC     		pop	{r4, r5, r6, r7}
 133 0046 7047     		bx	lr
 134              	.L4:
 135              		.align	2
 136              	.L3:
 137 0048 FDF7FFC0 		.word	-1056966659
 138              		.cfi_endproc
 139              	.LFE111:
 141              		.section	.text.ADC_StructInit,"ax",%progbits
 142              		.align	2
 143              		.global	ADC_StructInit
 144              		.thumb
 145              		.thumb_func
 147              	ADC_StructInit:
 148              	.LFB112:
 297:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 298:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 299:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 300:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to initialize the global features of the ADC ( 
 301:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 302:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 303:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 304:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 305:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
 306:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         be initialized.
 307:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 308:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 309:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 310:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 149              		.loc 1 310 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 154              	.LVL15:
 311:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 312:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 155              		.loc 1 312 0
 156 0000 0023     		movs	r3, #0
 157 0002 0360     		str	r3, [r0, #0]
 313:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 314:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_ScanConvMode member */
 315:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 158              		.loc 1 315 0
 159 0004 0371     		strb	r3, [r0, #4]
 316:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 317:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 318:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 160              		.loc 1 318 0
 161 0006 4371     		strb	r3, [r0, #5]
 319:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 320:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConvEdge member */
 321:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 162              		.loc 1 321 0
 163 0008 8360     		str	r3, [r0, #8]
 322:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 323:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 324:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 164              		.loc 1 324 0
 165 000a C360     		str	r3, [r0, #12]
 325:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 326:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DataAlign member */
 327:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 166              		.loc 1 327 0
 167 000c 0361     		str	r3, [r0, #16]
 328:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 329:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_NbrOfConversion member */
 330:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_NbrOfConversion = 1;
 168              		.loc 1 330 0
 169 000e 0123     		movs	r3, #1
 170 0010 0375     		strb	r3, [r0, #20]
 171 0012 7047     		bx	lr
 172              		.cfi_endproc
 173              	.LFE112:
 175              		.section	.text.ADC_CommonInit,"ax",%progbits
 176              		.align	2
 177              		.global	ADC_CommonInit
 178              		.thumb
 179              		.thumb_func
 181              	ADC_CommonInit:
 182              	.LFB113:
 331:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 332:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 333:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 334:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCs peripherals according to the specified parameters 
 335:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_CommonInitStruct.
 336:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
 337:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         that contains the configuration information for  All ADCs peripherals.
 338:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 339:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 340:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 341:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 183              		.loc 1 341 0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187              		@ link register save eliminated.
 188              	.LVL16:
 189 0000 70B4     		push	{r4, r5, r6}
 190              	.LCFI2:
 191              		.cfi_def_cfa_offset 12
 192              		.cfi_offset 4, -12
 193              		.cfi_offset 5, -8
 194              		.cfi_offset 6, -4
 195              	.LVL17:
 342:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 343:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 344:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_MODE(ADC_CommonInitStruct->ADC_Mode));
 345:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
 346:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
 347:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
 348:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADC CCR Configuration -----------------*/
 349:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC CCR value */
 350:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADC->CCR;
 196              		.loc 1 350 0
 197 0002 074A     		ldr	r2, .L7
 351:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 352:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear MULTI, DELAY, DMA and ADCPRE bits */
 353:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR_CLEAR_MASK;
 354:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 355:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: Multi mode, Delay between two sampling time, ADC prescaler,
 356:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      and DMA access mode for multimode */
 357:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set MULTI bits according to ADC_Mode value */
 358:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ADCPRE bits according to ADC_Prescaler value */
 359:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DMA bits according to ADC_DMAAccessMode value */
 360:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
 361:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 198              		.loc 1 361 0
 199 0004 90E84200 		ldmia	r0, {r1, r6}
 362:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 200              		.loc 1 362 0
 201 0008 8568     		ldr	r5, [r0, #8]
 350:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADC->CCR;
 202              		.loc 1 350 0
 203 000a 5468     		ldr	r4, [r2, #4]
 204              	.LVL18:
 361:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 205              		.loc 1 361 0
 206 000c C068     		ldr	r0, [r0, #12]
 207              	.LVL19:
 353:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR_CLEAR_MASK;
 208              		.loc 1 353 0
 209 000e 054B     		ldr	r3, .L7+4
 361:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 210              		.loc 1 361 0
 211 0010 3143     		orrs	r1, r1, r6
 212              		.loc 1 362 0
 213 0012 2943     		orrs	r1, r1, r5
 353:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR_CLEAR_MASK;
 214              		.loc 1 353 0
 215 0014 2340     		ands	r3, r3, r4
 216              	.LVL20:
 361:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 217              		.loc 1 361 0
 218 0016 0143     		orrs	r1, r1, r0
 219 0018 0B43     		orrs	r3, r3, r1
 220              	.LVL21:
 363:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 364:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 365:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 366:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADC CCR */
 367:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC->CCR = tmpreg1;
 221              		.loc 1 367 0
 222 001a 5360     		str	r3, [r2, #4]
 368:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 223              		.loc 1 368 0
 224 001c 70BC     		pop	{r4, r5, r6}
 225 001e 7047     		bx	lr
 226              	.L8:
 227              		.align	2
 228              	.L7:
 229 0020 00230140 		.word	1073816320
 230 0024 E030FCFF 		.word	-249632
 231              		.cfi_endproc
 232              	.LFE113:
 234              		.section	.text.ADC_CommonStructInit,"ax",%progbits
 235              		.align	2
 236              		.global	ADC_CommonStructInit
 237              		.thumb
 238              		.thumb_func
 240              	ADC_CommonStructInit:
 241              	.LFB114:
 369:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 370:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 371:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_CommonInitStruct member with its default value.
 372:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
 373:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         which will be initialized.
 374:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 375:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 376:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 377:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 242              		.loc 1 377 0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 246              		@ link register save eliminated.
 247              	.LVL22:
 378:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 379:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 248              		.loc 1 379 0
 249 0000 0023     		movs	r3, #0
 250 0002 0360     		str	r3, [r0, #0]
 380:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 381:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_Prescaler member */
 382:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 251              		.loc 1 382 0
 252 0004 4360     		str	r3, [r0, #4]
 383:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 384:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DMAAccessMode member */
 385:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 253              		.loc 1 385 0
 254 0006 8360     		str	r3, [r0, #8]
 386:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 387:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_TwoSamplingDelay member */
 388:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 255              		.loc 1 388 0
 256 0008 C360     		str	r3, [r0, #12]
 257 000a 7047     		bx	lr
 258              		.cfi_endproc
 259              	.LFE114:
 261              		.section	.text.ADC_Cmd,"ax",%progbits
 262              		.align	2
 263              		.global	ADC_Cmd
 264              		.thumb
 265              		.thumb_func
 267              	ADC_Cmd:
 268              	.LFB115:
 389:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 390:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 391:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 392:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 393:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 394:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the ADCx peripheral. 
 395:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 396:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 397:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 398:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 399:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 269              		.loc 1 399 0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273              		@ link register save eliminated.
 274              	.LVL23:
 400:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 401:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 402:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 403:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 404:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 405:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 406:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 275              		.loc 1 406 0
 276 0000 8368     		ldr	r3, [r0, #8]
 403:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 277              		.loc 1 403 0
 278 0002 19B9     		cbnz	r1, .L14
 407:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 408:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 409:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 410:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC peripheral */
 411:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 279              		.loc 1 411 0
 280 0004 23F00103 		bic	r3, r3, #1
 281 0008 8360     		str	r3, [r0, #8]
 282 000a 7047     		bx	lr
 283              	.L14:
 406:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 284              		.loc 1 406 0
 285 000c 43F00103 		orr	r3, r3, #1
 286 0010 8360     		str	r3, [r0, #8]
 287 0012 7047     		bx	lr
 288              		.cfi_endproc
 289              	.LFE115:
 291              		.section	.text.ADC_AnalogWatchdogCmd,"ax",%progbits
 292              		.align	2
 293              		.global	ADC_AnalogWatchdogCmd
 294              		.thumb
 295              		.thumb_func
 297              	ADC_AnalogWatchdogCmd:
 298              	.LFB116:
 412:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 413:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 414:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 415:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 416:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 417:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 418:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group2 Analog Watchdog configuration functions
 419:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Analog Watchdog configuration functions 
 420:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 421:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 422:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 423:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                     Analog Watchdog configuration functions
 424:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 425:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 426:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the Analog Watchdog
 427:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (AWD) feature in the ADC.
 428:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 429:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration Analog Watchdog is done following these steps :
 430:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. the ADC guarded channel(s) is (are) selected using the 
 431:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_AnalogWatchdogSingleChannelConfig() function.
 432:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. The Analog watchdog lower and higher threshold are configured using the  
 433:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      ADC_AnalogWatchdogThresholdsConfig() function.
 434:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. The Analog watchdog is enabled and configured to enable the check, on one
 435:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       or more channels, using the  ADC_AnalogWatchdogCmd() function.
 436:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 437:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 438:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 439:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 440:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 441:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 442:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular or 
 443:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         injected channels
 444:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 445:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
 446:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         This parameter can be one of the following values:
 447:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
 448:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected chan
 449:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular 
 450:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on all regular channel
 451:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on all injected channel
 452:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and inj
 453:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
 454:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None	  
 455:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 456:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
 457:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 299              		.loc 1 457 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 0
 302              		@ frame_needed = 0, uses_anonymous_args = 0
 303              		@ link register save eliminated.
 304              	.LVL24:
 305              	.LVL25:
 458:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 459:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 460:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 461:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
 462:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 463:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 464:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 306              		.loc 1 464 0
 307 0000 4368     		ldr	r3, [r0, #4]
 308              	.LVL26:
 465:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 466:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
 467:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDMode_RESET;
 309              		.loc 1 467 0
 310 0002 23F44003 		bic	r3, r3, #12582912
 311              	.LVL27:
 312 0006 23F40073 		bic	r3, r3, #512
 313              	.LVL28:
 468:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 469:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the analog watchdog enable mode */
 470:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 314              		.loc 1 470 0
 315 000a 1943     		orrs	r1, r1, r3
 316              	.LVL29:
 471:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 472:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 473:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 317              		.loc 1 473 0
 318 000c 4160     		str	r1, [r0, #4]
 319 000e 7047     		bx	lr
 320              		.cfi_endproc
 321              	.LFE116:
 323              		.section	.text.ADC_AnalogWatchdogThresholdsConfig,"ax",%progbits
 324              		.align	2
 325              		.global	ADC_AnalogWatchdogThresholdsConfig
 326              		.thumb
 327              		.thumb_func
 329              	ADC_AnalogWatchdogThresholdsConfig:
 330              	.LFB117:
 474:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 475:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 476:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 477:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
 478:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 479:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
 480:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 481:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  LowThreshold:  the ADC analog watchdog Low threshold value.
 482:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 483:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 484:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 485:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
 486:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                         uint16_t LowThreshold)
 487:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 331              		.loc 1 487 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335              		@ link register save eliminated.
 336              	.LVL30:
 488:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 489:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 490:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
 491:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
 492:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 493:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx high threshold */
 494:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->HTR = HighThreshold;
 337              		.loc 1 494 0
 338 0000 4162     		str	r1, [r0, #36]
 495:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 496:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx low threshold */
 497:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->LTR = LowThreshold;
 339              		.loc 1 497 0
 340 0002 8262     		str	r2, [r0, #40]
 341 0004 7047     		bx	lr
 342              		.cfi_endproc
 343              	.LFE117:
 345 0006 00BF     		.section	.text.ADC_AnalogWatchdogSingleChannelConfig,"ax",%progbits
 346              		.align	2
 347              		.global	ADC_AnalogWatchdogSingleChannelConfig
 348              		.thumb
 349              		.thumb_func
 351              	ADC_AnalogWatchdogSingleChannelConfig:
 352              	.LFB118:
 498:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 499:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 500:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 501:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
 502:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 503:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 504:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 505:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 506:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 507:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 508:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 509:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 510:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 511:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 512:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 513:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 514:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 515:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 516:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 517:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 518:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 519:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 520:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 521:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 522:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 523:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected
 524:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 525:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 526:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
 527:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 353              		.loc 1 527 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 0
 356              		@ frame_needed = 0, uses_anonymous_args = 0
 357              		@ link register save eliminated.
 358              	.LVL31:
 359              	.LVL32:
 528:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 529:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 530:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 531:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 532:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 533:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 534:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 360              		.loc 1 534 0
 361 0000 4368     		ldr	r3, [r0, #4]
 362              	.LVL33:
 535:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 536:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the Analog watchdog channel select bits */
 537:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDCH_RESET;
 363              		.loc 1 537 0
 364 0002 23F01F03 		bic	r3, r3, #31
 365              	.LVL34:
 538:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 539:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the Analog watchdog channel */
 540:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_Channel;
 366              		.loc 1 540 0
 367 0006 1943     		orrs	r1, r1, r3
 368              	.LVL35:
 541:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 542:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 543:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 369              		.loc 1 543 0
 370 0008 4160     		str	r1, [r0, #4]
 371 000a 7047     		bx	lr
 372              		.cfi_endproc
 373              	.LFE118:
 375              		.section	.text.ADC_TempSensorVrefintCmd,"ax",%progbits
 376              		.align	2
 377              		.global	ADC_TempSensorVrefintCmd
 378              		.thumb
 379              		.thumb_func
 381              	ADC_TempSensorVrefintCmd:
 382              	.LFB119:
 544:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 545:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 546:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 547:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 548:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 549:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group3 Temperature Sensor, Vrefint (Voltage Reference internal) 
 550:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *            and VBAT (Voltage BATtery) management functions
 551:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Temperature Sensor, Vrefint and VBAT management functions 
 552:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 553:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 554:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 555:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                Temperature Sensor, Vrefint and VBAT management functions
 556:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 557:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 558:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to enable/ disable the internal 
 559:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   connections between the ADC and the Temperature Sensor, the Vrefint and the
 560:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Vbat sources.
 561:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 562:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the Temperature sensor and Vrefint channels 
 563:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   voltages is done following these steps :
 564:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of Temperature sensor and Vrefint sources 
 565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       with the ADC channels using ADC_TempSensorVrefintCmd() function. 
 566:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_TempSensor and/or ADC_Channel_Vrefint using 
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_RegularChannelConfig() or  ADC_InjectedChannelConfig() functions 
 568:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage values, using ADC_GetConversionValue() or  
 569:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 570:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 571:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the VBAT channel voltage is done following 
 572:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   these steps :
 573:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of VBAT source with the ADC channel using 
 574:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_VBATCmd() function. 
 575:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_Vbat using ADC_RegularChannelConfig() or  
 576:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_InjectedChannelConfig() functions 
 577:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage value, using ADC_GetConversionValue() or  
 578:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 579:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  
 580:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 581:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 582:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 583:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 584:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 585:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 586:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channels.
 587:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the temperature sensor and Vrefint channels.
 588:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 589:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 590:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 591:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
 592:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 383              		.loc 1 592 0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 0
 386              		@ frame_needed = 0, uses_anonymous_args = 0
 387              		@ link register save eliminated.
 388              	.LVL36:
 593:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 594:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 595:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 596:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 597:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
 598:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 389              		.loc 1 598 0
 390 0000 054B     		ldr	r3, .L22
 391 0002 5A68     		ldr	r2, [r3, #4]
 595:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 392              		.loc 1 595 0
 393 0004 18B9     		cbnz	r0, .L21
 599:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 600:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 601:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 602:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
 603:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 394              		.loc 1 603 0
 395 0006 22F40002 		bic	r2, r2, #8388608
 396 000a 5A60     		str	r2, [r3, #4]
 397 000c 7047     		bx	lr
 398              	.L21:
 598:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 399              		.loc 1 598 0
 400 000e 42F40002 		orr	r2, r2, #8388608
 401 0012 5A60     		str	r2, [r3, #4]
 402 0014 7047     		bx	lr
 403              	.L23:
 404 0016 00BF     		.align	2
 405              	.L22:
 406 0018 00230140 		.word	1073816320
 407              		.cfi_endproc
 408              	.LFE119:
 410              		.section	.text.ADC_VBATCmd,"ax",%progbits
 411              		.align	2
 412              		.global	ADC_VBATCmd
 413              		.thumb
 414              		.thumb_func
 416              	ADC_VBATCmd:
 417              	.LFB120:
 604:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 605:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 606:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 607:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 608:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the VBAT (Voltage Battery) channel.
 609:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the VBAT channel.
 610:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 611:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 612:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 613:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_VBATCmd(FunctionalState NewState)                             
 614:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 418              		.loc 1 614 0
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 0
 421              		@ frame_needed = 0, uses_anonymous_args = 0
 422              		@ link register save eliminated.
 423              	.LVL37:
 615:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 616:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 617:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 618:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 619:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the VBAT channel*/
 620:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 424              		.loc 1 620 0
 425 0000 054B     		ldr	r3, .L28
 426 0002 5A68     		ldr	r2, [r3, #4]
 617:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 427              		.loc 1 617 0
 428 0004 18B9     		cbnz	r0, .L27
 621:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 622:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 623:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 624:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the VBAT channel*/
 625:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 429              		.loc 1 625 0
 430 0006 22F48002 		bic	r2, r2, #4194304
 431 000a 5A60     		str	r2, [r3, #4]
 432 000c 7047     		bx	lr
 433              	.L27:
 620:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 434              		.loc 1 620 0
 435 000e 42F48002 		orr	r2, r2, #4194304
 436 0012 5A60     		str	r2, [r3, #4]
 437 0014 7047     		bx	lr
 438              	.L29:
 439 0016 00BF     		.align	2
 440              	.L28:
 441 0018 00230140 		.word	1073816320
 442              		.cfi_endproc
 443              	.LFE120:
 445              		.section	.text.ADC_RegularChannelConfig,"ax",%progbits
 446              		.align	2
 447              		.global	ADC_RegularChannelConfig
 448              		.thumb
 449              		.thumb_func
 451              	ADC_RegularChannelConfig:
 452              	.LFB121:
 626:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 627:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 628:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 629:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 630:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 631:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 632:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 633:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group4 Regular Channels Configuration functions
 634:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels Configuration functions 
 635:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 636:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 637:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 638:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                   Regular Channels Configuration functions
 639:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 640:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 641:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to manage the ADC's regular channels,
 642:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
 643:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 644:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration and management functions for regular channels: This subsection 
 645:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      provides functions allowing to configure the ADC regular channels :    
 646:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the rank in the regular group sequencer for each channel
 647:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the sampling time for each channel
 648:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the conversion Trigger for regular channels
 649:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the desired EOC event behavior configuration
 650:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the continuous Mode  (*)
 651:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the Discontinuous Mode 
 652:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      Please Note that the following features for regular channels are configurated
 653:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      using the ADC_Init() function : 
 654:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - scan mode activation 
 655:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - continuous mode activation (**) 
 656:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger source  
 657:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger edge 
 658:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - number of conversion in the regular channels group sequencer.
 659:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 660:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note (*) and (**) are performing the same configuration
 661:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 662:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   2. Get the conversion data: This subsection provides an important function in 
 663:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      the ADC peripheral since it returns the converted data of the current 
 664:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel. When the Conversion value is read, the EOC Flag is 
 665:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      automatically cleared.
 666:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 667:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note For multi ADC mode, the last ADC1, ADC2 and ADC3 regular conversions 
 668:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            results data (in the selected multi mode) can be returned in the same 
 669:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            time using ADC_GetMultiModeConversionValue() function. 
 670:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****        
 671:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 672:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 673:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 674:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 675:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 676:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 677:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
 678:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 679:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 680:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 681:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 682:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 683:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 684:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 685:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 686:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 687:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 688:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 689:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 690:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 691:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 692:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 693:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 694:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 695:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 696:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 697:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 698:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 699:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
 700:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the regular group sequencer.
 701:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 16.
 702:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 703:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 704:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
 705:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
 706:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
 707:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
 708:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
 709:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
 710:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
 711:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
 712:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 713:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 714:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 715:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 453              		.loc 1 715 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 0, uses_anonymous_args = 0
 457              		@ link register save eliminated.
 458              	.LVL38:
 459 0000 70B4     		push	{r4, r5, r6}
 460              	.LCFI3:
 461              		.cfi_def_cfa_offset 12
 462              		.cfi_offset 4, -12
 463              		.cfi_offset 5, -8
 464              		.cfi_offset 6, -4
 465              	.LVL39:
 716:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 717:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 718:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 719:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 720:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 721:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 722:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 723:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
 724:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 466              		.loc 1 724 0
 467 0002 0929     		cmp	r1, #9
 468 0004 21D9     		bls	.L31
 725:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 727:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 729:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 730:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 469              		.loc 1 730 0
 470 0006 01EB4104 		add	r4, r1, r1, lsl #1
 727:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 471              		.loc 1 727 0
 472 000a C668     		ldr	r6, [r0, #12]
 473              	.LVL40:
 474              		.loc 1 730 0
 475 000c 1E3C     		subs	r4, r4, #30
 476              	.LVL41:
 477 000e 0725     		movs	r5, #7
 478 0010 05FA04F5 		lsl	r5, r5, r4
 479              	.LVL42:
 731:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 732:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 733:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 480              		.loc 1 733 0
 481 0014 26EA0505 		bic	r5, r6, r5
 482              	.LVL43:
 734:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 735:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 736:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 483              		.loc 1 736 0
 484 0018 03FA04F4 		lsl	r4, r3, r4
 485              	.LVL44:
 737:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 738:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 739:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 486              		.loc 1 739 0
 487 001c 45EA0403 		orr	r3, r5, r4
 488              	.LVL45:
 740:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 741:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 742:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 489              		.loc 1 742 0
 490 0020 C360     		str	r3, [r0, #12]
 743:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 744:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 745:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 746:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 747:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 748:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 749:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 750:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 751:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 752:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 753:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 754:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 755:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 756:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 757:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 758:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 759:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 760:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 761:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 762:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 763:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 764:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 1 to 6 */
 765:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (Rank < 7)
 491              		.loc 1 765 0
 492 0022 062A     		cmp	r2, #6
 493 0024 20D9     		bls	.L36
 494              	.L33:
 766:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 767:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 768:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR3;
 769:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 770:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 771:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 772:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 773:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 774:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 775:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 776:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 777:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 778:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 779:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 780:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 781:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 782:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 783:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR3 = tmpreg1;
 784:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 785:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 7 to 12 */
 786:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else if (Rank < 13)
 495              		.loc 1 786 0
 496 0026 0C2A     		cmp	r2, #12
 787:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 788:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 789:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR2;
 790:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 791:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 792:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 497              		.loc 1 792 0
 498 0028 02EB8202 		add	r2, r2, r2, lsl #2
 499              	.LVL46:
 786:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else if (Rank < 13)
 500              		.loc 1 786 0
 501 002c 2BD9     		bls	.L37
 793:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 794:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 795:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 796:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 797:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 798:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 799:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 800:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 801:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 802:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 803:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 804:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR2 = tmpreg1;
 805:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 806:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 13 to 16 */
 807:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 808:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 809:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 810:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR1;
 502              		.loc 1 810 0
 503 002e C46A     		ldr	r4, [r0, #44]
 504              	.LVL47:
 811:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 812:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 813:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 505              		.loc 1 813 0
 506 0030 413A     		subs	r2, r2, #65
 507              	.LVL48:
 508 0032 1F23     		movs	r3, #31
 509 0034 03FA02F3 		lsl	r3, r3, r2
 510              	.LVL49:
 814:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 815:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 816:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 511              		.loc 1 816 0
 512 0038 24EA0303 		bic	r3, r4, r3
 513              	.LVL50:
 817:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 818:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 819:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 514              		.loc 1 819 0
 515 003c 01FA02F1 		lsl	r1, r1, r2
 516              	.LVL51:
 820:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 821:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 822:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 517              		.loc 1 822 0
 518 0040 43EA0102 		orr	r2, r3, r1
 519              	.LVL52:
 823:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 824:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 825:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR1 = tmpreg1;
 520              		.loc 1 825 0
 521 0044 C262     		str	r2, [r0, #44]
 522              	.L30:
 826:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 827:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 523              		.loc 1 827 0
 524 0046 70BC     		pop	{r4, r5, r6}
 525 0048 7047     		bx	lr
 526              	.LVL53:
 527              	.L31:
 747:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 528              		.loc 1 747 0
 529 004a 0669     		ldr	r6, [r0, #16]
 530              	.LVL54:
 750:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 531              		.loc 1 750 0
 532 004c 01EB4104 		add	r4, r1, r1, lsl #1
 533              	.LVL55:
 534 0050 0725     		movs	r5, #7
 535 0052 05FA04F5 		lsl	r5, r5, r4
 536              	.LVL56:
 753:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 537              		.loc 1 753 0
 538 0056 26EA0505 		bic	r5, r6, r5
 539              	.LVL57:
 756:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 540              		.loc 1 756 0
 541 005a 03FA04F4 		lsl	r4, r3, r4
 542              	.LVL58:
 759:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 543              		.loc 1 759 0
 544 005e 45EA0403 		orr	r3, r5, r4
 545              	.LVL59:
 762:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 546              		.loc 1 762 0
 547 0062 0361     		str	r3, [r0, #16]
 765:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (Rank < 7)
 548              		.loc 1 765 0
 549 0064 062A     		cmp	r2, #6
 550 0066 DED8     		bhi	.L33
 551              	.L36:
 771:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 552              		.loc 1 771 0
 553 0068 013A     		subs	r2, r2, #1
 554              	.LVL60:
 768:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR3;
 555              		.loc 1 768 0
 556 006a 446B     		ldr	r4, [r0, #52]
 557              	.LVL61:
 771:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 558              		.loc 1 771 0
 559 006c 02EB8202 		add	r2, r2, r2, lsl #2
 560              	.LVL62:
 561 0070 1F23     		movs	r3, #31
 562 0072 03FA02F3 		lsl	r3, r3, r2
 563              	.LVL63:
 774:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 564              		.loc 1 774 0
 565 0076 24EA0303 		bic	r3, r4, r3
 566              	.LVL64:
 777:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 567              		.loc 1 777 0
 568 007a 01FA02F1 		lsl	r1, r1, r2
 569              	.LVL65:
 780:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 570              		.loc 1 780 0
 571 007e 43EA0102 		orr	r2, r3, r1
 572              	.LVL66:
 783:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR3 = tmpreg1;
 573              		.loc 1 783 0
 574 0082 4263     		str	r2, [r0, #52]
 575 0084 DFE7     		b	.L30
 576              	.LVL67:
 577              	.L37:
 789:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR2;
 578              		.loc 1 789 0
 579 0086 046B     		ldr	r4, [r0, #48]
 580              	.LVL68:
 792:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 581              		.loc 1 792 0
 582 0088 233A     		subs	r2, r2, #35
 583              	.LVL69:
 584 008a 1F23     		movs	r3, #31
 585 008c 03FA02F3 		lsl	r3, r3, r2
 586              	.LVL70:
 795:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 587              		.loc 1 795 0
 588 0090 24EA0303 		bic	r3, r4, r3
 589              	.LVL71:
 798:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 590              		.loc 1 798 0
 591 0094 01FA02F1 		lsl	r1, r1, r2
 592              	.LVL72:
 801:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 593              		.loc 1 801 0
 594 0098 43EA0102 		orr	r2, r3, r1
 595              	.LVL73:
 804:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR2 = tmpreg1;
 596              		.loc 1 804 0
 597 009c 0263     		str	r2, [r0, #48]
 598 009e D2E7     		b	.L30
 599              		.cfi_endproc
 600              	.LFE121:
 602              		.section	.text.ADC_SoftwareStartConv,"ax",%progbits
 603              		.align	2
 604              		.global	ADC_SoftwareStartConv
 605              		.thumb
 606              		.thumb_func
 608              	ADC_SoftwareStartConv:
 609              	.LFB122:
 828:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 829:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 830:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the regular channels.
 831:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 832:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 833:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 834:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
 835:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 610              		.loc 1 835 0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 0
 613              		@ frame_needed = 0, uses_anonymous_args = 0
 614              		@ link register save eliminated.
 615              	.LVL74:
 836:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 837:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 838:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 839:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for regular group */
 840:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 616              		.loc 1 840 0
 617 0000 8368     		ldr	r3, [r0, #8]
 618 0002 43F08043 		orr	r3, r3, #1073741824
 619 0006 8360     		str	r3, [r0, #8]
 620 0008 7047     		bx	lr
 621              		.cfi_endproc
 622              	.LFE122:
 624 000a 00BF     		.section	.text.ADC_GetSoftwareStartConvStatus,"ax",%progbits
 625              		.align	2
 626              		.global	ADC_GetSoftwareStartConvStatus
 627              		.thumb
 628              		.thumb_func
 630              	ADC_GetSoftwareStartConvStatus:
 631              	.LFB123:
 841:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 842:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 843:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 844:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start regular conversion Status.
 845:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 846:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 847:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 848:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 849:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 632              		.loc 1 849 0
 633              		.cfi_startproc
 634              		@ args = 0, pretend = 0, frame = 0
 635              		@ frame_needed = 0, uses_anonymous_args = 0
 636              		@ link register save eliminated.
 637              	.LVL75:
 638              	.LVL76:
 850:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 851:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 852:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 853:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 854:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of SWSTART bit */
 855:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 639              		.loc 1 855 0
 640 0000 8068     		ldr	r0, [r0, #8]
 641              	.LVL77:
 856:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 857:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is set */
 858:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 859:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 860:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 861:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 862:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is reset */
 863:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 864:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 865:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 866:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the SWSTART bit status */
 867:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 868:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 642              		.loc 1 868 0
 643 0002 C0F38050 		ubfx	r0, r0, #22, #1
 644              	.LVL78:
 645 0006 7047     		bx	lr
 646              		.cfi_endproc
 647              	.LFE123:
 649              		.section	.text.ADC_EOCOnEachRegularChannelCmd,"ax",%progbits
 650              		.align	2
 651              		.global	ADC_EOCOnEachRegularChannelCmd
 652              		.thumb
 653              		.thumb_func
 655              	ADC_EOCOnEachRegularChannelCmd:
 656              	.LFB124:
 869:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 870:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 871:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 872:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the EOC on each regular channel conversion
 873:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 874:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC EOC flag rising
 875:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 876:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 877:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 878:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 879:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 657              		.loc 1 879 0
 658              		.cfi_startproc
 659              		@ args = 0, pretend = 0, frame = 0
 660              		@ frame_needed = 0, uses_anonymous_args = 0
 661              		@ link register save eliminated.
 662              	.LVL79:
 880:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 881:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 882:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 883:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 884:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 885:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 886:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC EOC rising on each regular channel conversion */
 887:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 663              		.loc 1 887 0
 664 0000 8368     		ldr	r3, [r0, #8]
 884:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 665              		.loc 1 884 0
 666 0002 19B9     		cbnz	r1, .L43
 888:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 889:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 890:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 891:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC EOC rising on each regular channel conversion */
 892:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 667              		.loc 1 892 0
 668 0004 23F48063 		bic	r3, r3, #1024
 669 0008 8360     		str	r3, [r0, #8]
 670 000a 7047     		bx	lr
 671              	.L43:
 887:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 672              		.loc 1 887 0
 673 000c 43F48063 		orr	r3, r3, #1024
 674 0010 8360     		str	r3, [r0, #8]
 675 0012 7047     		bx	lr
 676              		.cfi_endproc
 677              	.LFE124:
 679              		.section	.text.ADC_ContinuousModeCmd,"ax",%progbits
 680              		.align	2
 681              		.global	ADC_ContinuousModeCmd
 682              		.thumb
 683              		.thumb_func
 685              	ADC_ContinuousModeCmd:
 686              	.LFB125:
 893:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 894:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 895:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 896:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 897:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC continuous conversion mode 
 898:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 899:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC continuous conversion mode
 900:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 901:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 902:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 903:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 904:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 687              		.loc 1 904 0
 688              		.cfi_startproc
 689              		@ args = 0, pretend = 0, frame = 0
 690              		@ frame_needed = 0, uses_anonymous_args = 0
 691              		@ link register save eliminated.
 692              	.LVL80:
 905:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 906:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 907:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 908:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 909:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 910:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 911:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC continuous conversion mode */
 912:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 693              		.loc 1 912 0
 694 0000 8368     		ldr	r3, [r0, #8]
 909:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 695              		.loc 1 909 0
 696 0002 19B9     		cbnz	r1, .L47
 913:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 914:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 915:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 916:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC continuous conversion mode */
 917:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 697              		.loc 1 917 0
 698 0004 23F00203 		bic	r3, r3, #2
 699 0008 8360     		str	r3, [r0, #8]
 700 000a 7047     		bx	lr
 701              	.L47:
 912:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 702              		.loc 1 912 0
 703 000c 43F00203 		orr	r3, r3, #2
 704 0010 8360     		str	r3, [r0, #8]
 705 0012 7047     		bx	lr
 706              		.cfi_endproc
 707              	.LFE125:
 709              		.section	.text.ADC_DiscModeChannelCountConfig,"ax",%progbits
 710              		.align	2
 711              		.global	ADC_DiscModeChannelCountConfig
 712              		.thumb
 713              		.thumb_func
 715              	ADC_DiscModeChannelCountConfig:
 716              	.LFB126:
 918:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 919:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 920:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 921:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 922:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular group 
 923:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel.
 924:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 925:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel count value.
 926:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This number must be between 1 and 8.
 927:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 928:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 929:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 930:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 717              		.loc 1 930 0
 718              		.cfi_startproc
 719              		@ args = 0, pretend = 0, frame = 0
 720              		@ frame_needed = 0, uses_anonymous_args = 0
 721              		@ link register save eliminated.
 722              	.LVL81:
 723              	.LVL82:
 931:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 932:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 933:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 934:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 935:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 936:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 937:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 938:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 939:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
 940:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 941:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old discontinuous mode channel count */
 942:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_DISCNUM_RESET;
 943:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 944:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the discontinuous mode channel count */
 945:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Number - 1;
 724              		.loc 1 945 0
 725 0000 0139     		subs	r1, r1, #1
 726              	.LVL83:
 939:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
 727              		.loc 1 939 0
 728 0002 4368     		ldr	r3, [r0, #4]
 729              	.LVL84:
 942:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_DISCNUM_RESET;
 730              		.loc 1 942 0
 731 0004 23F46043 		bic	r3, r3, #57344
 732              	.LVL85:
 946:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 733              		.loc 1 946 0
 734 0008 43EA4131 		orr	r1, r3, r1, lsl #13
 735              	.LVL86:
 947:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 948:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 949:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 736              		.loc 1 949 0
 737 000c 4160     		str	r1, [r0, #4]
 738 000e 7047     		bx	lr
 739              		.cfi_endproc
 740              	.LFE126:
 742              		.section	.text.ADC_DiscModeCmd,"ax",%progbits
 743              		.align	2
 744              		.global	ADC_DiscModeCmd
 745              		.thumb
 746              		.thumb_func
 748              	ADC_DiscModeCmd:
 749              	.LFB127:
 950:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 951:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 952:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 953:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group channel 
 954:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         for the specified ADC
 955:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 956:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on 
 957:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         regular group channel.
 958:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 959:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 960:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 961:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 962:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 750              		.loc 1 962 0
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 0
 753              		@ frame_needed = 0, uses_anonymous_args = 0
 754              		@ link register save eliminated.
 755              	.LVL87:
 963:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 964:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 965:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 966:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 967:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 968:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 969:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 970:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 756              		.loc 1 970 0
 757 0000 4368     		ldr	r3, [r0, #4]
 967:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 758              		.loc 1 967 0
 759 0002 19B9     		cbnz	r1, .L52
 971:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 972:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 973:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 974:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 975:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 760              		.loc 1 975 0
 761 0004 23F40063 		bic	r3, r3, #2048
 762 0008 4360     		str	r3, [r0, #4]
 763 000a 7047     		bx	lr
 764              	.L52:
 970:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 765              		.loc 1 970 0
 766 000c 43F40063 		orr	r3, r3, #2048
 767 0010 4360     		str	r3, [r0, #4]
 768 0012 7047     		bx	lr
 769              		.cfi_endproc
 770              	.LFE127:
 772              		.section	.text.ADC_GetConversionValue,"ax",%progbits
 773              		.align	2
 774              		.global	ADC_GetConversionValue
 775              		.thumb
 776              		.thumb_func
 778              	ADC_GetConversionValue:
 779              	.LFB128:
 976:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 977:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 978:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 979:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 980:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
 981:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 982:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 983:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 984:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 985:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 780              		.loc 1 985 0
 781              		.cfi_startproc
 782              		@ args = 0, pretend = 0, frame = 0
 783              		@ frame_needed = 0, uses_anonymous_args = 0
 784              		@ link register save eliminated.
 785              	.LVL88:
 986:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 987:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 988:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 989:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the selected ADC conversion value */
 990:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) ADCx->DR;
 786              		.loc 1 990 0
 787 0000 C06C     		ldr	r0, [r0, #76]
 788              	.LVL89:
 991:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 789              		.loc 1 991 0
 790 0002 80B2     		uxth	r0, r0
 791 0004 7047     		bx	lr
 792              		.cfi_endproc
 793              	.LFE128:
 795 0006 00BF     		.section	.text.ADC_GetMultiModeConversionValue,"ax",%progbits
 796              		.align	2
 797              		.global	ADC_GetMultiModeConversionValue
 798              		.thumb
 799              		.thumb_func
 801              	ADC_GetMultiModeConversionValue:
 802              	.LFB129:
 992:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 993:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 994:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADC1, ADC2 and ADC3 regular conversions results 
 995:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         data in the selected multi mode.
 996:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None  
 997:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 998:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In dual mode, the value returned by this function is as following
 999:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain the regular data of ADC1.
1000:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain the regular data of ADC2.
1001:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In triple mode, the value returned by this function is as following
1002:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2
1003:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3
1004:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1005:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint32_t ADC_GetMultiModeConversionValue(void)
1006:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 803              		.loc 1 1006 0
 804              		.cfi_startproc
 805              		@ args = 0, pretend = 0, frame = 0
 806              		@ frame_needed = 0, uses_anonymous_args = 0
 807              		@ link register save eliminated.
1007:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the multi mode conversion value */
1008:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (*(__IO uint32_t *) CDR_ADDRESS);
 808              		.loc 1 1008 0
 809 0000 014B     		ldr	r3, .L55
 810 0002 1868     		ldr	r0, [r3, #0]
1009:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 811              		.loc 1 1009 0
 812 0004 7047     		bx	lr
 813              	.L56:
 814 0006 00BF     		.align	2
 815              	.L55:
 816 0008 08230140 		.word	1073816328
 817              		.cfi_endproc
 818              	.LFE129:
 820              		.section	.text.ADC_DMACmd,"ax",%progbits
 821              		.align	2
 822              		.global	ADC_DMACmd
 823              		.thumb
 824              		.thumb_func
 826              	ADC_DMACmd:
 827              	.LFB130:
1010:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1011:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1012:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1013:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1014:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group5 Regular Channels DMA Configuration functions
1015:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels DMA Configuration functions 
1016:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1017:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1018:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1019:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Regular Channels DMA Configuration functions
1020:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1021:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1022:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the DMA for ADC regular 
1023:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   channels.
1024:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Since converted regular channel values are stored into a unique data register, 
1025:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is useful to use DMA for conversion of more than one regular channel. This 
1026:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   avoids the loss of the data already stored in the ADC Data register. 
1027:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1028:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   When the DMA mode is enabled (using the ADC_DMACmd() function), after each
1029:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   conversion of a regular channel, a DMA request is generated.
1030:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1031:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for Independent ADC mode" 
1032:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   configuration (using the ADC_DMARequestAfterLastTransferCmd() function), 
1033:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1034:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1035:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1036:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1037:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for multi ADC mode" configuration 
1038:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (using the void ADC_MultiModeDMARequestAfterLastTransferCmd() function), 
1039:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1040:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1041:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1042:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1043:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1044:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1045:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1046:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1047:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1048:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
1049:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1050:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
1051:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1052:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1053:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1054:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1055:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 828              		.loc 1 1055 0
 829              		.cfi_startproc
 830              		@ args = 0, pretend = 0, frame = 0
 831              		@ frame_needed = 0, uses_anonymous_args = 0
 832              		@ link register save eliminated.
 833              	.LVL90:
1056:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1057:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1058:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1059:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
1060:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1061:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request */
1062:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 834              		.loc 1 1062 0
 835 0000 8368     		ldr	r3, [r0, #8]
1059:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 836              		.loc 1 1059 0
 837 0002 19B9     		cbnz	r1, .L60
1063:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1064:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1065:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1066:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request */
1067:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 838              		.loc 1 1067 0
 839 0004 23F48073 		bic	r3, r3, #256
 840 0008 8360     		str	r3, [r0, #8]
 841 000a 7047     		bx	lr
 842              	.L60:
1062:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 843              		.loc 1 1062 0
 844 000c 43F48073 		orr	r3, r3, #256
 845 0010 8360     		str	r3, [r0, #8]
 846 0012 7047     		bx	lr
 847              		.cfi_endproc
 848              	.LFE130:
 850              		.section	.text.ADC_DMARequestAfterLastTransferCmd,"ax",%progbits
 851              		.align	2
 852              		.global	ADC_DMARequestAfterLastTransferCmd
 853              		.thumb
 854              		.thumb_func
 856              	ADC_DMARequestAfterLastTransferCmd:
 857              	.LFB131:
1068:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1069:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1070:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1071:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1072:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer (Single-ADC mode)  
1073:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1074:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1075:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1076:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1077:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1078:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1079:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 858              		.loc 1 1079 0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 0
 861              		@ frame_needed = 0, uses_anonymous_args = 0
 862              		@ link register save eliminated.
 863              	.LVL91:
1080:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1081:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1082:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1083:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
1084:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1085:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1086:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 864              		.loc 1 1086 0
 865 0000 8368     		ldr	r3, [r0, #8]
1083:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 866              		.loc 1 1083 0
 867 0002 19B9     		cbnz	r1, .L64
1087:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1088:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1089:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1090:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1091:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 868              		.loc 1 1091 0
 869 0004 23F40073 		bic	r3, r3, #512
 870 0008 8360     		str	r3, [r0, #8]
 871 000a 7047     		bx	lr
 872              	.L64:
1086:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 873              		.loc 1 1086 0
 874 000c 43F40073 		orr	r3, r3, #512
 875 0010 8360     		str	r3, [r0, #8]
 876 0012 7047     		bx	lr
 877              		.cfi_endproc
 878              	.LFE131:
 880              		.section	.text.ADC_MultiModeDMARequestAfterLastTransferCmd,"ax",%progbits
 881              		.align	2
 882              		.global	ADC_MultiModeDMARequestAfterLastTransferCmd
 883              		.thumb
 884              		.thumb_func
 886              	ADC_MultiModeDMARequestAfterLastTransferCmd:
 887              	.LFB132:
1092:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1093:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1094:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1095:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1096:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer in multi ADC mode       
1097:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1098:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1099:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   if Enabled, DMA requests are issued as long as data are converted and 
1100:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         DMA mode for multi ADC mode (selected using ADC_CommonInit() function 
1101:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
1102:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
1103:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1104:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1105:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
1106:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 888              		.loc 1 1106 0
 889              		.cfi_startproc
 890              		@ args = 0, pretend = 0, frame = 0
 891              		@ frame_needed = 0, uses_anonymous_args = 0
 892              		@ link register save eliminated.
 893              	.LVL92:
1107:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1108:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1109:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
1110:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1111:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1112:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 894              		.loc 1 1112 0
 895 0000 054B     		ldr	r3, .L69
 896 0002 5A68     		ldr	r2, [r3, #4]
1109:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 897              		.loc 1 1109 0
 898 0004 18B9     		cbnz	r0, .L68
1113:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1114:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1115:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1116:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1117:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 899              		.loc 1 1117 0
 900 0006 22F40052 		bic	r2, r2, #8192
 901 000a 5A60     		str	r2, [r3, #4]
 902 000c 7047     		bx	lr
 903              	.L68:
1112:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 904              		.loc 1 1112 0
 905 000e 42F40052 		orr	r2, r2, #8192
 906 0012 5A60     		str	r2, [r3, #4]
 907 0014 7047     		bx	lr
 908              	.L70:
 909 0016 00BF     		.align	2
 910              	.L69:
 911 0018 00230140 		.word	1073816320
 912              		.cfi_endproc
 913              	.LFE132:
 915              		.section	.text.ADC_InjectedChannelConfig,"ax",%progbits
 916              		.align	2
 917              		.global	ADC_InjectedChannelConfig
 918              		.thumb
 919              		.thumb_func
 921              	ADC_InjectedChannelConfig:
 922              	.LFB133:
1118:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1119:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1120:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1121:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1122:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1123:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1124:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group6 Injected channels Configuration functions
1125:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Injected channels Configuration functions 
1126:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1127:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1128:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1129:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      Injected channels Configuration functions
1130:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1131:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1132:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provide functions allowing to configure the ADC Injected channels,
1133:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
1134:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1135:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration functions for Injected channels: This subsection provides 
1136:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      functions allowing to configure the ADC injected channels :    
1137:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the rank in the injected group sequencer for each channel
1138:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the sampling time for each channel    
1139:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Auto injected Mode  
1140:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Discontinuous Mode 
1141:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - scan mode activation  
1142:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External/software trigger source   
1143:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External trigger edge 
1144:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - injected channels sequencer.
1145:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1146:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Get the Specified Injected channel conversion data: This subsection 
1147:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       provides an important function in the ADC peripheral since it returns the 
1148:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       converted data of the specific injected channel.
1149:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1150:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1151:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1152:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1153:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1154:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
1155:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
1156:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1157:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1158:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1159:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
1160:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
1161:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
1162:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
1163:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
1164:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
1165:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
1166:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
1167:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
1168:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
1169:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
1170:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
1171:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
1172:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
1173:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
1174:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
1175:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
1176:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
1177:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
1178:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the injected group sequencer. 
1179:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 4.
1180:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
1181:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1182:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
1183:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
1184:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
1185:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
1186:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
1187:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
1188:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
1189:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
1190:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1191:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1192:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
1193:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 923              		.loc 1 1193 0
 924              		.cfi_startproc
 925              		@ args = 0, pretend = 0, frame = 0
 926              		@ frame_needed = 0, uses_anonymous_args = 0
 927              		@ link register save eliminated.
 928              	.LVL93:
 929 0000 70B4     		push	{r4, r5, r6}
 930              	.LCFI4:
 931              		.cfi_def_cfa_offset 12
 932              		.cfi_offset 4, -12
 933              		.cfi_offset 5, -8
 934              		.cfi_offset 6, -4
 935              	.LVL94:
1194:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
1195:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1196:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1197:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1198:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
1199:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
1200:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1201:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 936              		.loc 1 1201 0
 937 0002 0929     		cmp	r1, #9
 938 0004 20D8     		bhi	.L74
1202:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1203:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1204:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
1205:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1206:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
1207:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1208:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
1209:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1210:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
1211:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1212:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
1213:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1214:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
1215:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1216:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1217:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1218:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1219:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 939              		.loc 1 1219 0
 940 0006 0669     		ldr	r6, [r0, #16]
 941              	.LVL95:
1220:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1221:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 942              		.loc 1 1221 0
 943 0008 01EB4104 		add	r4, r1, r1, lsl #1
 944              	.LVL96:
 945 000c 0725     		movs	r5, #7
 946 000e 05FA04F5 		lsl	r5, r5, r4
 947              	.LVL97:
1222:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1223:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 948              		.loc 1 1223 0
 949 0012 26EA0505 		bic	r5, r6, r5
 950              	.LVL98:
1224:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1225:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 951              		.loc 1 1225 0
 952 0016 03FA04F4 		lsl	r4, r3, r4
 953              	.LVL99:
1226:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1227:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 954              		.loc 1 1227 0
 955 001a 45EA0403 		orr	r3, r5, r4
 956              	.LVL100:
1228:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1229:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 957              		.loc 1 1229 0
 958 001e 0361     		str	r3, [r0, #16]
 959              	.L73:
1230:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1231:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Rank configuration */
1232:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1233:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 960              		.loc 1 1233 0
 961 0020 846B     		ldr	r4, [r0, #56]
 962              	.LVL101:
1234:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get JL value: Number = JL+1 */
1235:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 963              		.loc 1 1235 0
 964 0022 C4F30153 		ubfx	r3, r4, #20, #2
1236:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
1237:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 965              		.loc 1 1237 0
 966 0026 D31A     		subs	r3, r2, r3
 967 0028 0233     		adds	r3, r3, #2
 968 002a DBB2     		uxtb	r3, r3
 969 002c 03EB8303 		add	r3, r3, r3, lsl #2
 970              	.LVL102:
 971 0030 1F22     		movs	r2, #31
 972              	.LVL103:
 973 0032 02FA03F2 		lsl	r2, r2, r3
 974              	.LVL104:
1238:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old JSQx bits for the selected rank */
1239:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= ~tmpreg2;
 975              		.loc 1 1239 0
 976 0036 24EA0204 		bic	r4, r4, r2
 977              	.LVL105:
1240:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
1241:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 978              		.loc 1 1241 0
 979 003a 01FA03F1 		lsl	r1, r1, r3
 980              	.LVL106:
1242:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the JSQx bits for the selected rank */
1243:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2;
 981              		.loc 1 1243 0
 982 003e 44EA0103 		orr	r3, r4, r1
 983              	.LVL107:
1244:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1245:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 984              		.loc 1 1245 0
 985 0042 8363     		str	r3, [r0, #56]
1246:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 986              		.loc 1 1246 0
 987 0044 70BC     		pop	{r4, r5, r6}
 988 0046 7047     		bx	lr
 989              	.LVL108:
 990              	.L74:
1206:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 991              		.loc 1 1206 0
 992 0048 01EB4104 		add	r4, r1, r1, lsl #1
1204:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 993              		.loc 1 1204 0
 994 004c C668     		ldr	r6, [r0, #12]
 995              	.LVL109:
1206:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 996              		.loc 1 1206 0
 997 004e 1E3C     		subs	r4, r4, #30
 998              	.LVL110:
 999 0050 0725     		movs	r5, #7
 1000 0052 05FA04F5 		lsl	r5, r5, r4
 1001              	.LVL111:
1208:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 1002              		.loc 1 1208 0
 1003 0056 26EA0505 		bic	r5, r6, r5
 1004              	.LVL112:
1210:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 1005              		.loc 1 1210 0
 1006 005a 03FA04F4 		lsl	r4, r3, r4
 1007              	.LVL113:
1212:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 1008              		.loc 1 1212 0
 1009 005e 45EA0403 		orr	r3, r5, r4
 1010              	.LVL114:
1214:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 1011              		.loc 1 1214 0
 1012 0062 C360     		str	r3, [r0, #12]
 1013 0064 DCE7     		b	.L73
 1014              		.cfi_endproc
 1015              	.LFE133:
 1017 0066 00BF     		.section	.text.ADC_InjectedSequencerLengthConfig,"ax",%progbits
 1018              		.align	2
 1019              		.global	ADC_InjectedSequencerLengthConfig
 1020              		.thumb
 1021              		.thumb_func
 1023              	ADC_InjectedSequencerLengthConfig:
 1024              	.LFB134:
1247:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1248:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1249:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the sequencer length for injected channels
1250:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1251:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Length: The sequencer length. 
1252:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a number between 1 to 4.
1253:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1254:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1255:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
1256:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1025              		.loc 1 1256 0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 0, uses_anonymous_args = 0
 1029              		@ link register save eliminated.
 1030              	.LVL115:
 1031              	.LVL116:
1257:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
1258:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
1259:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1260:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1261:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
1262:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1263:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1264:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
1265:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1266:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old injected sequence length JL bits */
1267:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= JSQR_JL_RESET;
1268:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1269:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the injected sequence length JL bits */
1270:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Length - 1; 
 1032              		.loc 1 1270 0
 1033 0000 0139     		subs	r1, r1, #1
 1034              	.LVL117:
1264:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1035              		.loc 1 1264 0
 1036 0002 836B     		ldr	r3, [r0, #56]
 1037              	.LVL118:
1267:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= JSQR_JL_RESET;
 1038              		.loc 1 1267 0
 1039 0004 23F44013 		bic	r3, r3, #3145728
 1040              	.LVL119:
1271:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 1041              		.loc 1 1271 0
 1042 0008 43EA0151 		orr	r1, r3, r1, lsl #20
 1043              	.LVL120:
1272:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1273:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1274:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1044              		.loc 1 1274 0
 1045 000c 8163     		str	r1, [r0, #56]
 1046 000e 7047     		bx	lr
 1047              		.cfi_endproc
 1048              	.LFE134:
 1050              		.section	.text.ADC_SetInjectedOffset,"ax",%progbits
 1051              		.align	2
 1052              		.global	ADC_SetInjectedOffset
 1053              		.thumb
 1054              		.thumb_func
 1056              	ADC_SetInjectedOffset:
 1057              	.LFB135:
1275:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1276:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1277:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1278:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Set the injected channels conversion value offset
1279:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1280:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1281:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1282:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1283:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1284:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1285:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1286:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1287:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12bit value.
1288:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1289:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1290:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1291:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1058              		.loc 1 1291 0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 8
 1061              		@ frame_needed = 0, uses_anonymous_args = 0
 1062              		@ link register save eliminated.
 1063              	.LVL121:
 1064 0000 82B0     		sub	sp, sp, #8
 1065              	.LCFI5:
 1066              		.cfi_def_cfa_offset 8
1292:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     __IO uint32_t tmp = 0;
 1067              		.loc 1 1292 0
 1068 0002 0023     		movs	r3, #0
 1069 0004 0193     		str	r3, [sp, #4]
 1070              	.LVL122:
1293:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1294:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1295:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1296:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
1297:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1298:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 1071              		.loc 1 1298 0
 1072 0006 0190     		str	r0, [sp, #4]
1299:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel;
 1073              		.loc 1 1299 0
 1074 0008 019B     		ldr	r3, [sp, #4]
 1075 000a C918     		adds	r1, r1, r3
 1076              	.LVL123:
 1077 000c 0191     		str	r1, [sp, #4]
 1078              	.LVL124:
1300:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1301:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the selected injected channel data offset */
1302:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 1079              		.loc 1 1302 0
 1080 000e 019B     		ldr	r3, [sp, #4]
 1081 0010 1A60     		str	r2, [r3, #0]
1303:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1082              		.loc 1 1303 0
 1083 0012 02B0     		add	sp, sp, #8
 1084 0014 7047     		bx	lr
 1085              		.cfi_endproc
 1086              	.LFE135:
 1088 0016 00BF     		.section	.text.ADC_ExternalTrigInjectedConvConfig,"ax",%progbits
 1089              		.align	2
 1090              		.global	ADC_ExternalTrigInjectedConvConfig
 1091              		.thumb
 1092              		.thumb_func
 1094              	ADC_ExternalTrigInjectedConvConfig:
 1095              	.LFB136:
1304:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1305:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1306:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
1307:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1308:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion.
1309:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:                    
1310:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected 
1311:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected 
1312:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected 
1313:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected 
1314:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC2: Timer3 capture compare2 selected 
1315:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected 
1316:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC1: Timer4 capture compare1 selected             
1317:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC2: Timer4 capture compare2 selected 
1318:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected             
1319:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected 
1320:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected             
1321:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected                  
1322:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected
1323:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC3: Timer8 capture compare3 selected             
1324:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
1325:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected  
1326:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1327:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1328:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
1329:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1096              		.loc 1 1329 0
 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 0
 1099              		@ frame_needed = 0, uses_anonymous_args = 0
 1100              		@ link register save eliminated.
 1101              	.LVL125:
 1102              	.LVL126:
1330:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
1331:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1332:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1333:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
1334:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1335:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1336:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1103              		.loc 1 1336 0
 1104 0000 8368     		ldr	r3, [r0, #8]
 1105              	.LVL127:
1337:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1338:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external event selection for injected group */
1339:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTSEL_RESET;
 1106              		.loc 1 1339 0
 1107 0002 23F47023 		bic	r3, r3, #983040
 1108              	.LVL128:
1340:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1341:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the external event selection for injected group */
1342:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 1109              		.loc 1 1342 0
 1110 0006 1943     		orrs	r1, r1, r3
 1111              	.LVL129:
1343:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1344:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1345:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1112              		.loc 1 1345 0
 1113 0008 8160     		str	r1, [r0, #8]
 1114 000a 7047     		bx	lr
 1115              		.cfi_endproc
 1116              	.LFE136:
 1118              		.section	.text.ADC_ExternalTrigInjectedConvEdgeConfig,"ax",%progbits
 1119              		.align	2
 1120              		.global	ADC_ExternalTrigInjectedConvEdgeConfig
 1121              		.thumb
 1122              		.thumb_func
 1124              	ADC_ExternalTrigInjectedConvEdgeConfig:
 1125              	.LFB137:
1346:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1347:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1348:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1349:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger edge for injected channels conversion.
1350:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1351:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConvEdge: specifies the ADC external trigger edge
1352:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         to start injected conversion. 
1353:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1354:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_None: external trigger disabled for 
1355:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                     injected conversion
1356:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Rising: detection on rising edge
1357:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Falling: detection on falling edge
1358:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
1359:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                               and falling edge
1360:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1361:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1362:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEd
1363:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1126              		.loc 1 1363 0
 1127              		.cfi_startproc
 1128              		@ args = 0, pretend = 0, frame = 0
 1129              		@ frame_needed = 0, uses_anonymous_args = 0
 1130              		@ link register save eliminated.
 1131              	.LVL130:
 1132              	.LVL131:
1364:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
1365:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1366:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1367:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
1368:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1369:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1133              		.loc 1 1369 0
 1134 0000 8368     		ldr	r3, [r0, #8]
 1135              	.LVL132:
1370:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external trigger edge for injected group */
1371:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTEN_RESET;
 1136              		.loc 1 1371 0
 1137 0002 23F44013 		bic	r3, r3, #3145728
 1138              	.LVL133:
1372:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the new external trigger edge for injected group */
1373:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConvEdge;
 1139              		.loc 1 1373 0
 1140 0006 1943     		orrs	r1, r1, r3
 1141              	.LVL134:
1374:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1375:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1142              		.loc 1 1375 0
 1143 0008 8160     		str	r1, [r0, #8]
 1144 000a 7047     		bx	lr
 1145              		.cfi_endproc
 1146              	.LFE137:
 1148              		.section	.text.ADC_SoftwareStartInjectedConv,"ax",%progbits
 1149              		.align	2
 1150              		.global	ADC_SoftwareStartInjectedConv
 1151              		.thumb
 1152              		.thumb_func
 1154              	ADC_SoftwareStartInjectedConv:
 1155              	.LFB138:
1376:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1377:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1378:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1379:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the injected channels.
1380:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1381:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1382:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1383:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
1384:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1156              		.loc 1 1384 0
 1157              		.cfi_startproc
 1158              		@ args = 0, pretend = 0, frame = 0
 1159              		@ frame_needed = 0, uses_anonymous_args = 0
 1160              		@ link register save eliminated.
 1161              	.LVL135:
1385:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1386:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1387:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for injected group */
1388:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 1162              		.loc 1 1388 0
 1163 0000 8368     		ldr	r3, [r0, #8]
 1164 0002 43F48003 		orr	r3, r3, #4194304
 1165 0006 8360     		str	r3, [r0, #8]
 1166 0008 7047     		bx	lr
 1167              		.cfi_endproc
 1168              	.LFE138:
 1170 000a 00BF     		.section	.text.ADC_GetSoftwareStartInjectedConvCmdStatus,"ax",%progbits
 1171              		.align	2
 1172              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 1173              		.thumb
 1174              		.thumb_func
 1176              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 1177              	.LFB139:
1389:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1390:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1391:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1392:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
1393:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1394:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
1395:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1396:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
1397:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1178              		.loc 1 1397 0
 1179              		.cfi_startproc
 1180              		@ args = 0, pretend = 0, frame = 0
 1181              		@ frame_needed = 0, uses_anonymous_args = 0
 1182              		@ link register save eliminated.
 1183              	.LVL136:
 1184              	.LVL137:
1398:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
1399:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1400:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1401:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1402:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of JSWSTART bit */
1403:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 1185              		.loc 1 1403 0
 1186 0000 8068     		ldr	r0, [r0, #8]
 1187              	.LVL138:
1404:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1405:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is set */
1406:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
1407:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1408:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1409:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1410:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is reset */
1411:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
1412:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1413:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the JSWSTART bit status */
1414:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
1415:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1188              		.loc 1 1415 0
 1189 0002 C0F38050 		ubfx	r0, r0, #22, #1
 1190              	.LVL139:
 1191 0006 7047     		bx	lr
 1192              		.cfi_endproc
 1193              	.LFE139:
 1195              		.section	.text.ADC_AutoInjectedConvCmd,"ax",%progbits
 1196              		.align	2
 1197              		.global	ADC_AutoInjectedConvCmd
 1198              		.thumb
 1199              		.thumb_func
 1201              	ADC_AutoInjectedConvCmd:
 1202              	.LFB140:
1416:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1417:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1418:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group 
1419:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         conversion after regular one.
1420:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1421:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
1422:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1423:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1424:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1425:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1426:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1203              		.loc 1 1426 0
 1204              		.cfi_startproc
 1205              		@ args = 0, pretend = 0, frame = 0
 1206              		@ frame_needed = 0, uses_anonymous_args = 0
 1207              		@ link register save eliminated.
 1208              	.LVL140:
1427:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1428:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1429:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1430:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
1431:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1432:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
1433:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 1209              		.loc 1 1433 0
 1210 0000 4368     		ldr	r3, [r0, #4]
1430:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1211              		.loc 1 1430 0
 1212 0002 19B9     		cbnz	r1, .L84
1434:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1435:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1436:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1437:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
1438:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 1213              		.loc 1 1438 0
 1214 0004 23F48063 		bic	r3, r3, #1024
 1215 0008 4360     		str	r3, [r0, #4]
 1216 000a 7047     		bx	lr
 1217              	.L84:
1433:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 1218              		.loc 1 1433 0
 1219 000c 43F48063 		orr	r3, r3, #1024
 1220 0010 4360     		str	r3, [r0, #4]
 1221 0012 7047     		bx	lr
 1222              		.cfi_endproc
 1223              	.LFE140:
 1225              		.section	.text.ADC_InjectedDiscModeCmd,"ax",%progbits
 1226              		.align	2
 1227              		.global	ADC_InjectedDiscModeCmd
 1228              		.thumb
 1229              		.thumb_func
 1231              	ADC_InjectedDiscModeCmd:
 1232              	.LFB141:
1439:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1440:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1441:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1442:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1443:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group 
1444:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel for the specified ADC
1445:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1446:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on injected
1447:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         group channel.
1448:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1449:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1450:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1451:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1452:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1233              		.loc 1 1452 0
 1234              		.cfi_startproc
 1235              		@ args = 0, pretend = 0, frame = 0
 1236              		@ frame_needed = 0, uses_anonymous_args = 0
 1237              		@ link register save eliminated.
 1238              	.LVL141:
1453:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1454:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1455:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1456:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
1457:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1458:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
1459:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 1239              		.loc 1 1459 0
 1240 0000 4368     		ldr	r3, [r0, #4]
1456:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1241              		.loc 1 1456 0
 1242 0002 19B9     		cbnz	r1, .L88
1460:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1461:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1462:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1463:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
1464:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 1243              		.loc 1 1464 0
 1244 0004 23F48053 		bic	r3, r3, #4096
 1245 0008 4360     		str	r3, [r0, #4]
 1246 000a 7047     		bx	lr
 1247              	.L88:
1459:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 1248              		.loc 1 1459 0
 1249 000c 43F48053 		orr	r3, r3, #4096
 1250 0010 4360     		str	r3, [r0, #4]
 1251 0012 7047     		bx	lr
 1252              		.cfi_endproc
 1253              	.LFE141:
 1255              		.section	.text.ADC_GetInjectedConversionValue,"ax",%progbits
 1256              		.align	2
 1257              		.global	ADC_GetInjectedConversionValue
 1258              		.thumb
 1259              		.thumb_func
 1261              	ADC_GetInjectedConversionValue:
 1262              	.LFB142:
1465:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1466:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1467:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1468:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1469:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1470:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1471:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1472:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1473:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1474:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1475:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1476:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1477:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
1478:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1479:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1480:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1263              		.loc 1 1480 0
 1264              		.cfi_startproc
 1265              		@ args = 0, pretend = 0, frame = 8
 1266              		@ frame_needed = 0, uses_anonymous_args = 0
 1267              		@ link register save eliminated.
 1268              	.LVL142:
 1269 0000 82B0     		sub	sp, sp, #8
 1270              	.LCFI6:
 1271              		.cfi_def_cfa_offset 8
1481:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   __IO uint32_t tmp = 0;
 1272              		.loc 1 1481 0
 1273 0002 0023     		movs	r3, #0
 1274 0004 0193     		str	r3, [sp, #4]
 1275              	.LVL143:
1482:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1483:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1484:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1485:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1486:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1487:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 1276              		.loc 1 1487 0
 1277 0006 0190     		str	r0, [sp, #4]
1488:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel + JDR_OFFSET;
 1278              		.loc 1 1488 0
 1279 0008 019B     		ldr	r3, [sp, #4]
 1280 000a 2833     		adds	r3, r3, #40
 1281 000c 5918     		adds	r1, r3, r1
 1282              	.LVL144:
 1283 000e 0191     		str	r1, [sp, #4]
 1284              	.LVL145:
1489:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1490:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Returns the selected injected channel conversion data value */
1491:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp); 
 1285              		.loc 1 1491 0
 1286 0010 019B     		ldr	r3, [sp, #4]
 1287 0012 1868     		ldr	r0, [r3, #0]
 1288              	.LVL146:
1492:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1289              		.loc 1 1492 0
 1290 0014 80B2     		uxth	r0, r0
 1291 0016 02B0     		add	sp, sp, #8
 1292 0018 7047     		bx	lr
 1293              		.cfi_endproc
 1294              	.LFE142:
 1296 001a 00BF     		.section	.text.ADC_ITConfig,"ax",%progbits
 1297              		.align	2
 1298              		.global	ADC_ITConfig
 1299              		.thumb
 1300              		.thumb_func
 1302              	ADC_ITConfig:
 1303              	.LFB143:
1493:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1494:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1495:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1496:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1497:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group7 Interrupts and flags management functions
1498:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Interrupts and flags management functions
1499:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1500:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1501:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1502:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Interrupts and flags management functions
1503:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1504:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1505:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the ADC Interrupts and 
1506:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   to get the status and clear flags and Interrupts pending bits.
1507:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1508:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Each ADC provides 4 Interrupts sources and 6 Flags which can be divided into 
1509:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   3 groups:
1510:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1511:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   I. Flags and Interrupts for ADC regular channels
1512:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1513:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1514:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1515:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_OVR : Overrun detection when regular converted data are lost
1516:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1517:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_EOC : Regular channel end of conversion ==> to indicate (depending 
1518:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               on EOCS bit, managed by ADC_EOCOnEachRegularChannelCmd() ) the end of:
1519:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> a regular CHANNEL conversion 
1520:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> sequence of regular GROUP conversions .
1521:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1522:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      3. ADC_FLAG_STRT: Regular channel start ==> to indicate when regular CHANNEL 
1523:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               conversion starts.
1524:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1525:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1526:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1527:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_OVR : specifies the interrupt source for Overrun detection event.  
1528:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_IT_EOC : specifies the interrupt source for Regular channel end of 
1529:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      conversion event.
1530:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1531:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1532:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   II. Flags and Interrupts for ADC Injected channels
1533:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1534:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1535:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1536:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_JEOC : Injected channel end of conversion ==> to indicate at 
1537:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                the end of injected GROUP conversion  
1538:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1539:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_JSTRT: Injected channel start ==> to indicate hardware when 
1540:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                injected GROUP conversion starts.
1541:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1542:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1543:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1544:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_JEOC : specifies the interrupt source for Injected channel end of 
1545:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       conversion event.     
1546:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1547:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   III. General Flags and Interrupts for the ADC
1548:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ================================================= 
1549:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1550:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1551:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_AWD: Analog watchdog ==> to indicate if the converted voltage 
1552:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               crosses the programmed thresholds values.
1553:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1554:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1555:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1556:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_AWD : specifies the interrupt source for Analog watchdog event. 
1557:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1558:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1559:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   The user should identify which mode will be used in his application to manage 
1560:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   the ADC controller events: Polling mode or Interrupt mode.
1561:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1562:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Polling Mode it is advised to use the following functions:
1563:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_GetFlagStatus() : to check if flags events occur. 
1564:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_ClearFlag()     : to clear the flags events.
1565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       
1566:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Interrupt Mode it is advised to use the following functions:
1567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ITConfig()          : to enable or disable the interrupt source.
1568:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_GetITStatus()       : to check if Interrupt occurs.
1569:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ClearITPendingBit() : to clear the Interrupt pending Bit 
1570:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                  (corresponding Flag). 
1571:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1572:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1573:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1574:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1575:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
1576:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1577:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
1578:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1579:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1580:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1581:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1582:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt enable                       
1583:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
1584:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1585:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1586:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1587:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
1588:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1304              		.loc 1 1588 0
 1305              		.cfi_startproc
 1306              		@ args = 0, pretend = 0, frame = 0
 1307              		@ frame_needed = 0, uses_anonymous_args = 0
 1308              		@ link register save eliminated.
 1309              	.LVL147:
 1310              	.LVL148:
1589:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0;
1590:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1591:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1592:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1593:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1594:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1595:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1596:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)ADC_IT;
1597:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint32_t)0x01 << itmask;    
 1311              		.loc 1 1597 0
 1312 0000 C9B2     		uxtb	r1, r1
 1313              	.LVL149:
 1314 0002 0123     		movs	r3, #1
 1315 0004 03FA01F1 		lsl	r1, r3, r1
 1316              	.LVL150:
1598:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1599:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
1600:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1601:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC interrupts */
1602:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= itmask;
 1317              		.loc 1 1602 0
 1318 0008 4368     		ldr	r3, [r0, #4]
1599:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1319              		.loc 1 1599 0
 1320 000a 1AB9     		cbnz	r2, .L93
1603:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1604:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1605:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1606:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC interrupts */
1607:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
 1321              		.loc 1 1607 0
 1322 000c 23EA0101 		bic	r1, r3, r1
 1323              	.LVL151:
 1324 0010 4160     		str	r1, [r0, #4]
 1325 0012 7047     		bx	lr
 1326              	.LVL152:
 1327              	.L93:
1602:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= itmask;
 1328              		.loc 1 1602 0
 1329 0014 1943     		orrs	r1, r1, r3
 1330              	.LVL153:
 1331 0016 4160     		str	r1, [r0, #4]
 1332 0018 7047     		bx	lr
 1333              		.cfi_endproc
 1334              	.LFE143:
 1336 001a 00BF     		.section	.text.ADC_GetFlagStatus,"ax",%progbits
 1337              		.align	2
 1338              		.global	ADC_GetFlagStatus
 1339              		.thumb
 1340              		.thumb_func
 1342              	ADC_GetFlagStatus:
 1343              	.LFB144:
1608:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1609:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1610:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1611:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1612:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1613:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1614:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1615:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1616:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1617:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1618:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1619:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1620:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1621:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                                                 
1622:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1623:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1624:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1625:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1344              		.loc 1 1625 0
 1345              		.cfi_startproc
 1346              		@ args = 0, pretend = 0, frame = 0
 1347              		@ frame_needed = 0, uses_anonymous_args = 0
 1348              		@ link register save eliminated.
 1349              	.LVL154:
 1350              	.LVL155:
1626:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
1627:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1628:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1629:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
1630:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1631:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC flag */
1632:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 1351              		.loc 1 1632 0
 1352 0000 0368     		ldr	r3, [r0, #0]
 1353              	.LVL156:
 1354 0002 1942     		tst	r1, r3
1633:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1634:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is set */
1635:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
1636:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1637:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1638:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1639:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is reset */
1640:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
1641:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1642:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_FLAG status */
1643:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
1644:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1355              		.loc 1 1644 0
 1356 0004 0CBF     		ite	eq
 1357 0006 0020     		moveq	r0, #0
 1358 0008 0120     		movne	r0, #1
 1359              	.LVL157:
 1360 000a 7047     		bx	lr
 1361              		.cfi_endproc
 1362              	.LFE144:
 1364              		.section	.text.ADC_ClearFlag,"ax",%progbits
 1365              		.align	2
 1366              		.global	ADC_ClearFlag
 1367              		.thumb
 1368              		.thumb_func
 1370              	ADC_ClearFlag:
 1371              	.LFB145:
1645:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1646:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1647:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's pending flags.
1648:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1649:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1650:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be any combination of the following values:
1651:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1652:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1653:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1654:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1655:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1656:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                          
1657:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1658:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1659:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1660:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1372              		.loc 1 1660 0
 1373              		.cfi_startproc
 1374              		@ args = 0, pretend = 0, frame = 0
 1375              		@ frame_needed = 0, uses_anonymous_args = 0
 1376              		@ link register save eliminated.
 1377              	.LVL158:
1661:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1662:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1663:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
1664:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1665:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC flags */
1666:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 1378              		.loc 1 1666 0
 1379 0000 C943     		mvns	r1, r1
 1380              	.LVL159:
 1381 0002 0160     		str	r1, [r0, #0]
 1382 0004 7047     		bx	lr
 1383              		.cfi_endproc
 1384              	.LFE145:
 1386 0006 00BF     		.section	.text.ADC_GetITStatus,"ax",%progbits
 1387              		.align	2
 1388              		.global	ADC_GetITStatus
 1389              		.thumb
 1390              		.thumb_func
 1392              	ADC_GetITStatus:
 1393              	.LFB146:
1667:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1668:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1669:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1670:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1671:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx:   where x can be 1, 2 or 3 to select the ADC peripheral.
1672:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1673:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1674:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1675:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1676:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1677:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                        
1678:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1679:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1680:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1681:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1394              		.loc 1 1681 0
 1395              		.cfi_startproc
 1396              		@ args = 0, pretend = 0, frame = 0
 1397              		@ frame_needed = 0, uses_anonymous_args = 0
 1398              		@ link register save eliminated.
 1399              	.LVL160:
 1400              	.LVL161:
1682:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ITStatus bitstatus = RESET;
1683:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
1684:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1685:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1686:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1687:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
1688:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1689:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1690:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = ADC_IT >> 8;
1691:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1692:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC_IT enable bit status */
1693:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 1401              		.loc 1 1693 0
 1402 0000 4368     		ldr	r3, [r0, #4]
 1403              	.LVL162:
1694:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1695:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC interrupt */
1696:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 1404              		.loc 1 1696 0
 1405 0002 0068     		ldr	r0, [r0, #0]
 1406              	.LVL163:
 1407 0004 10EA1120 		ands	r0, r0, r1, lsr #8
 1408 0008 07D0     		beq	.L97
1693:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 1409              		.loc 1 1693 0 discriminator 1
 1410 000a C9B2     		uxtb	r1, r1
 1411              	.LVL164:
 1412 000c 0122     		movs	r2, #1
 1413 000e 02FA01F1 		lsl	r1, r2, r1
 1414              		.loc 1 1696 0 discriminator 1
 1415 0012 1942     		tst	r1, r3
1697:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1698:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is set */
1699:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 1416              		.loc 1 1699 0 discriminator 1
 1417 0014 0CBF     		ite	eq
 1418 0016 0020     		moveq	r0, #0
 1419 0018 0120     		movne	r0, #1
 1420              	.L97:
 1421              	.LVL165:
1700:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1701:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1702:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1703:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is reset */
1704:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
1705:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1706:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_IT status */
1707:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
1708:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1422              		.loc 1 1708 0
 1423 001a 7047     		bx	lr
 1424              		.cfi_endproc
 1425              	.LFE146:
 1427              		.section	.text.ADC_ClearITPendingBit,"ax",%progbits
 1428              		.align	2
 1429              		.global	ADC_ClearITPendingBit
 1430              		.thumb
 1431              		.thumb_func
 1433              	ADC_ClearITPendingBit:
 1434              	.LFB147:
1709:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1710:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1711:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1712:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1713:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1714:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1715:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1716:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1717:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1718:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                         
1719:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1720:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1721:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1722:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1435              		.loc 1 1722 0
 1436              		.cfi_startproc
 1437              		@ args = 0, pretend = 0, frame = 0
 1438              		@ frame_needed = 0, uses_anonymous_args = 0
 1439              		@ link register save eliminated.
 1440              	.LVL166:
 1441              	.LVL167:
1723:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t itmask = 0;
1724:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1725:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1727:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
1729:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1730:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 1442              		.loc 1 1730 0
 1443 0000 6FEA1121 		mvn	r1, r1, lsr #8
 1444              	.LVL168:
 1445 0004 0160     		str	r1, [r0, #0]
 1446 0006 7047     		bx	lr
 1447              		.cfi_endproc
 1448              	.LFE147:
 1450              		.text
 1451              	.Letext0:
 1452              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 1453              		.file 3 "../../lib/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1454              		.file 4 "../../lib/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_adc.h"
 1455              		.file 5 "../../lib/CMSIS/Include/core_cm4.h"
 1456              		.file 6 "../../lib/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_adc.c
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:17     .text.ADC_DeInit:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:22     .text.ADC_DeInit:00000000 ADC_DeInit
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:51     .text.ADC_Init:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:56     .text.ADC_Init:00000000 ADC_Init
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:137    .text.ADC_Init:00000048 $d
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:142    .text.ADC_StructInit:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:147    .text.ADC_StructInit:00000000 ADC_StructInit
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:176    .text.ADC_CommonInit:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:181    .text.ADC_CommonInit:00000000 ADC_CommonInit
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:229    .text.ADC_CommonInit:00000020 $d
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:235    .text.ADC_CommonStructInit:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:240    .text.ADC_CommonStructInit:00000000 ADC_CommonStructInit
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:262    .text.ADC_Cmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:267    .text.ADC_Cmd:00000000 ADC_Cmd
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:292    .text.ADC_AnalogWatchdogCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:297    .text.ADC_AnalogWatchdogCmd:00000000 ADC_AnalogWatchdogCmd
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:324    .text.ADC_AnalogWatchdogThresholdsConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:329    .text.ADC_AnalogWatchdogThresholdsConfig:00000000 ADC_AnalogWatchdogThresholdsConfig
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:346    .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:351    .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 ADC_AnalogWatchdogSingleChannelConfig
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:376    .text.ADC_TempSensorVrefintCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:381    .text.ADC_TempSensorVrefintCmd:00000000 ADC_TempSensorVrefintCmd
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:406    .text.ADC_TempSensorVrefintCmd:00000018 $d
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:411    .text.ADC_VBATCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:416    .text.ADC_VBATCmd:00000000 ADC_VBATCmd
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:441    .text.ADC_VBATCmd:00000018 $d
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:446    .text.ADC_RegularChannelConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:451    .text.ADC_RegularChannelConfig:00000000 ADC_RegularChannelConfig
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:603    .text.ADC_SoftwareStartConv:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:608    .text.ADC_SoftwareStartConv:00000000 ADC_SoftwareStartConv
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:625    .text.ADC_GetSoftwareStartConvStatus:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:630    .text.ADC_GetSoftwareStartConvStatus:00000000 ADC_GetSoftwareStartConvStatus
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:650    .text.ADC_EOCOnEachRegularChannelCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:655    .text.ADC_EOCOnEachRegularChannelCmd:00000000 ADC_EOCOnEachRegularChannelCmd
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:680    .text.ADC_ContinuousModeCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:685    .text.ADC_ContinuousModeCmd:00000000 ADC_ContinuousModeCmd
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:710    .text.ADC_DiscModeChannelCountConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:715    .text.ADC_DiscModeChannelCountConfig:00000000 ADC_DiscModeChannelCountConfig
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:743    .text.ADC_DiscModeCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:748    .text.ADC_DiscModeCmd:00000000 ADC_DiscModeCmd
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:773    .text.ADC_GetConversionValue:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:778    .text.ADC_GetConversionValue:00000000 ADC_GetConversionValue
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:796    .text.ADC_GetMultiModeConversionValue:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:801    .text.ADC_GetMultiModeConversionValue:00000000 ADC_GetMultiModeConversionValue
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:816    .text.ADC_GetMultiModeConversionValue:00000008 $d
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:821    .text.ADC_DMACmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:826    .text.ADC_DMACmd:00000000 ADC_DMACmd
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:851    .text.ADC_DMARequestAfterLastTransferCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:856    .text.ADC_DMARequestAfterLastTransferCmd:00000000 ADC_DMARequestAfterLastTransferCmd
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:881    .text.ADC_MultiModeDMARequestAfterLastTransferCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:886    .text.ADC_MultiModeDMARequestAfterLastTransferCmd:00000000 ADC_MultiModeDMARequestAfterLastTransferCmd
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:911    .text.ADC_MultiModeDMARequestAfterLastTransferCmd:00000018 $d
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:916    .text.ADC_InjectedChannelConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:921    .text.ADC_InjectedChannelConfig:00000000 ADC_InjectedChannelConfig
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1018   .text.ADC_InjectedSequencerLengthConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1023   .text.ADC_InjectedSequencerLengthConfig:00000000 ADC_InjectedSequencerLengthConfig
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1051   .text.ADC_SetInjectedOffset:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1056   .text.ADC_SetInjectedOffset:00000000 ADC_SetInjectedOffset
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1089   .text.ADC_ExternalTrigInjectedConvConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1094   .text.ADC_ExternalTrigInjectedConvConfig:00000000 ADC_ExternalTrigInjectedConvConfig
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1119   .text.ADC_ExternalTrigInjectedConvEdgeConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1124   .text.ADC_ExternalTrigInjectedConvEdgeConfig:00000000 ADC_ExternalTrigInjectedConvEdgeConfig
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1149   .text.ADC_SoftwareStartInjectedConv:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1154   .text.ADC_SoftwareStartInjectedConv:00000000 ADC_SoftwareStartInjectedConv
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1171   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1176   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 ADC_GetSoftwareStartInjectedConvCmdStatus
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1196   .text.ADC_AutoInjectedConvCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1201   .text.ADC_AutoInjectedConvCmd:00000000 ADC_AutoInjectedConvCmd
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1226   .text.ADC_InjectedDiscModeCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1231   .text.ADC_InjectedDiscModeCmd:00000000 ADC_InjectedDiscModeCmd
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1256   .text.ADC_GetInjectedConversionValue:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1261   .text.ADC_GetInjectedConversionValue:00000000 ADC_GetInjectedConversionValue
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1297   .text.ADC_ITConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1302   .text.ADC_ITConfig:00000000 ADC_ITConfig
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1337   .text.ADC_GetFlagStatus:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1342   .text.ADC_GetFlagStatus:00000000 ADC_GetFlagStatus
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1365   .text.ADC_ClearFlag:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1370   .text.ADC_ClearFlag:00000000 ADC_ClearFlag
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1387   .text.ADC_GetITStatus:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1392   .text.ADC_GetITStatus:00000000 ADC_GetITStatus
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1428   .text.ADC_ClearITPendingBit:00000000 $t
C:\Users\root\AppData\Local\Temp\ccY6tY0P.s:1433   .text.ADC_ClearITPendingBit:00000000 ADC_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
