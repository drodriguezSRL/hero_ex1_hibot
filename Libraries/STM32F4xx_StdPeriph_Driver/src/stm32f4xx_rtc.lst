   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 23, 1
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.thumb
  12              		.file	"stm32f4xx_rtc.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.RTC_DeInit,"ax",%progbits
  17              		.align	2
  18              		.global	RTC_DeInit
  19              		.thumb
  20              		.thumb_func
  22              	RTC_DeInit:
  23              	.LFB110:
  24              		.file 1 "../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c"
   1:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
   2:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @version V1.0.2
   6:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @date    05-March-2012
   7:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Initialization
  10:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Calendar (Time and Date) configuration
  11:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Alarms (Alarm A and Alarm B) configuration
  12:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - WakeUp Timer configuration
  13:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Daylight Saving configuration
  14:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Output pin Configuration
  15:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Coarse digital Calibration configuration
  16:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Smooth digital Calibration configuration
  17:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - TimeStamp configuration
  18:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Tampers configuration
  19:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Backup Data Registers configuration
  20:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Shift control synchronisation    
  21:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Interrupts and flags management
  23:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  24:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @verbatim
  25:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  26:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  27:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                               Backup Domain Operating Condition
  28:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  29:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The real-time clock (RTC), the RTC backup registers, and the backup 
  30:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  31:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          VDD supply is powered off.
  32:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To retain the content of the RTC backup registers, backup SRAM, 
  33:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          and supply the RTC when VDD is turned off, VBAT pin can be connected 
  34:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to an optional standby voltage supplied by a battery or by another 
  35:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          source.
  36:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  37:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To allow the RTC to operate even when the main digital supply (VDD) 
  38:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          is turned off, the VBAT pin powers the following blocks:
  39:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - The RTC
  40:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - The LSE oscillator
  41:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - The backup SRAM when the low power backup regulator is enabled
  42:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            4 - PC13 to PC15 I/Os, plus PI8 I/O (when available)
  43:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  44:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VDD (analog switch connected 
  45:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VDD), the following functions are available:
  46:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as either GPIO or LSE pins
  47:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as a GPIO or as the RTC_AF1 pin
  48:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as a GPIO or as the RTC_AF2 pin
  49:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  50:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VBAT (analog switch connected 
  51:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VBAT because VDD is not present), the following functions are available:
  52:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as LSE pins only
  53:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as the RTC_AF1 pin 
  54:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as the RTC_AF2 pin
  55:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  56:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  57:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Backup Domain Reset
  58:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  59:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The backup domain reset sets all RTC registers and the RCC_BDCR 
  60:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          register to their reset values. The BKPSRAM is not affected by this
  61:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          reset. The only way of resetting the BKPSRAM is through the Flash 
  62:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          interface by requesting a protection level change from 1 to 0.
  63:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          A backup domain reset is generated when one of the following events
  64:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          occurs:
  65:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - Software reset, triggered by setting the BDRST bit in the 
  66:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC Backup domain control register (RCC_BDCR). You can use the
  67:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC_BackupResetCmd().
  68:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - VDD or VBAT power on, if both supplies have previously been
  69:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                powered off.
  70:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  71:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  72:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   Backup Domain Access
  73:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  74:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          After reset, the backup domain (RTC registers, RTC backup data 
  75:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          registers and backup SRAM) is protected against possible unwanted 
  76:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          write accesses. 
  77:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To enable access to the RTC Domain and RTC registers, proceed as follows:
  78:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Power Controller (PWR) APB1 interface clock using the
  79:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RCC_APB1PeriphClockCmd() function.
  80:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  81:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Select the RTC clock source using the RCC_RTCCLKConfig() function.
  82:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable RTC Clock using the RCC_RTCCLKCmd() function.
  83:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  84:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  85:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   RTC Driver: how to use it
  86:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  87:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC domain access (see description in the section above)
  88:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Prescaler (Asynchronous and Synchronous) and
  89:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC hour format using the RTC_Init() function.
  90:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  91:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Time and Date configuration
  92:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===========================
  93:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  94:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and RTC_SetDate() functions.
  95:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  96:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              functions.
  97:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Use the RTC_DayLightSavingConfig() function to add or sub one
  98:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              hour to the RTC Calendar.    
  99:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 100:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Alarm configuration
 101:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================
 102:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Alarm use the RTC_SetAlarm() function.
 103:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 104:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Alarm, use the RTC_GetAlarm() function.
 105:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 106:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 107:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          RTC Wakeup configuration
 108:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ========================
 109:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 111:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 112:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 113:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 114:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 115:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 116:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 117:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Outputs configuration
 118:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =====================
 119:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC has 2 different outputs:
 120:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 121:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and WaKeUp signals.          
 122:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the selected RTC signal on RTC_AF1 pin, use the 
 123:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_OutputConfig() function.                
 124:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB: this output is 512Hz signal or 1Hz .  
 125:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 126:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 127:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 128:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Smooth digital Calibration configuration
 129:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================    
 130:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Original Digital Calibration Value and the corresponding
 131:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 132:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 133:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 134:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Coarse digital Calibration configuration
 135:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================
 136:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Coarse Calibration Value and the corresponding
 137:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              sign using the RTC_CoarseCalibConfig() function.
 138:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() 
 139:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 140:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 141:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          TimeStamp configuration
 142:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =======================
 143:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 144:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              using the RTC_TimeStampCmd() function.
 145:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp Time and Date register, use the 
 146:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStamp() function.
 147:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp SubSecond register, use the 
 148:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStampSubSecond() function.
 149:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 150:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 151:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TamperPinSelection()
 152:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin.     
 153:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 154:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Tamper configuration
 155:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ====================
 156:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *             - Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function. 
 159:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() function
 161:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 162:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 163:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper precharge or discharge duration using 
 164:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TamperPinsPrechargeDuration() function.
 165:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 166:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Time stamp on Tamper detection event using  
 167:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TSOnTamperDetecCmd() function.
 168:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 169:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 depending on the value of the TSINSEL bit in the 
 170:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TimeStampPinSelection()
 171:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin. 
 172:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 173:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Backup Data Registers configuration
 174:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================
 175:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 176:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.  
 177:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 178:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 179:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 180:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 181:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                  RTC and low power modes
 182:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 183:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The MCU can be woken up from a low power mode by an RTC alternate 
 184:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           function.
 185:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 186:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 187:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           These RTC alternate functions can wake up the system from the Stop 
 188:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           and Standby lowpower modes.
 189:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The system can also wake up from low power modes without depending 
 190:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 191:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           or the RTC wakeup events.
 192:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC provides a programmable time base for waking up from the 
 193:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Stop or Standby mode at regular intervals.
 194:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Wakeup from STOP and Standby modes is possible only when the RTC 
 195:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           clock source is LSE or LSI.
 196:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 197:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 198:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF1 alternate functions
 199:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 200:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF1 pin (PC13) can be used for the following purposes:
 201:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM output
 202:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB output
 203:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 204:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 205:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 206:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 207:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    
 208:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin 
 209:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |          |          |           |              | selection  |  selection   
 210:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 211:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 212:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 213:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 214:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 215:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 216:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 217:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | Calibration out |          |          |           |              |    Don't   |     Don't    
 218:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     
 219:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 220:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |          |          |           |              |            |     Don't    
 221:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     0    |    0     |     1     |      0       |      0     |     care     
 222:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 223:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |          |          |           |              |            |              
 224:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       
 225:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |          |          |           |              |            |              
 226:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 227:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |          |          |           |              |    Don't   |              
 228:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0    |    0     |     0     |      1       |    care    |      0       
 229:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 230:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  
 231:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 232:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 233:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 234:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 235:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF2 alternate functions
 236:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 237:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF2 pin (PI8) can be used for the following purposes:
 238:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 239:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 240:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 241:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 242:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 243:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 244:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |           |              | selection  |  selection   |Configuration |
 245:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 246:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |           |              |            |     Don't    |              |
 247:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 248:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 249:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |           |              |            |              |              |
 250:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 251:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |           |              |            |              |              |
 252:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 253:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |           |              |    Don't   |              |              |
 254:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 255:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 256:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 257:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 258:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 259:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 260:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @endverbatim
 261:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 262:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 263:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @attention
 264:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 265:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
 266:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 267:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 268:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * You may not use this file except in compliance with the License.
 269:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * You may obtain a copy of the License at:
 270:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 271:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 272:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 273:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * Unless required by applicable law or agreed to in writing, software 
 274:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 275:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 276:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * See the License for the specific language governing permissions and
 277:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * limitations under the License.
 278:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 279:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 280:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 281:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 282:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 283:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 284:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 285:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 286:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 287:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 288:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 289:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 290:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 291:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 292:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 293:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 294:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 295:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 296:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 297:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Masks Definition */
 298:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 299:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 300:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 301:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 302:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 303:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 304:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 305:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F | \
 306:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RECALPF | RTC_FLAG_SHPF))
 307:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 308:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 309:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 310:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 311:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 312:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 313:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 314:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 315:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 316:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 317:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 318:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 319:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 320:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 321:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 322:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 323:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 324:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 325:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 326:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 327:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 328:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 329:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 330:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                  Initialization and Configuration functions
 331:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 332:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 333:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to initialize and configure the RTC
 334:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 335:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Write protection, enter and exit the RTC initialization mode, RTC registers
 336:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   synchronization check and reference clock detection enable.
 337:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 338:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   1. The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 339:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      split into 2 programmable prescalers to minimize power consumption.
 340:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 341:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - When both prescalers are used, it is recommended to configure the asynchronous
 342:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****        prescaler to a high value to minimize consumption.
 343:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 344:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   2. All RTC registers are Write protected. Writing to the RTC registers
 345:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      is enabled by writing a key into the Write Protection register, RTC_WPR.
 346:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 347:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   3. To Configure the RTC Calendar, user application should enter initialization
 348:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      mode. In this mode, the calendar counter is stopped and its value can be 
 349:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      updated. When the initialization sequence is complete, the calendar restarts 
 350:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      counting after 4 RTCCLK cycles.
 351:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 352:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   4. To read the calendar through the shadow registers after Calendar initialization,
 353:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      calendar update or after wakeup from low power modes the software must first 
 354:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      clear the RSF flag. The software must then wait until it is set again before 
 355:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      reading the calendar, which means that the calendar registers have been 
 356:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      correctly copied into the RTC_TR and RTC_DR shadow registers.
 357:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      The RTC_WaitForSynchro() function implements the above software sequence 
 358:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      (RSF clear and RSF check).
 359:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 360:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 361:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 362:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 363:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 364:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 365:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 366:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 367:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         registers.       
 368:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 369:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 370:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 371:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 372:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 373:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 374:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  25              		.loc 1 374 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 16
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30 0000 84B0     		sub	sp, sp, #16
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 16
 375:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 376:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 377:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 378:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 379:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 380:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
  33              		.loc 1 380 0
  34 0002 3849     		ldr	r1, .L48
 375:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
  35              		.loc 1 375 0
  36 0004 0023     		movs	r3, #0
  37 0006 0193     		str	r3, [sp, #4]
  38              	.LVL0:
  39              		.loc 1 380 0
  40 0008 CA22     		movs	r2, #202
  41 000a 4A62     		str	r2, [r1, #36]
 381:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
  42              		.loc 1 381 0
  43 000c 5322     		movs	r2, #83
  44 000e 4A62     		str	r2, [r1, #36]
  45              	.LBB84:
  46              	.LBB85:
 382:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 383:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 384:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 385:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 386:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 387:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 388:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 389:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 390:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 391:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
 392:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 393:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 394:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
 395:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 396:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 397:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 398:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 399:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 400:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 401:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 402:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 403:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 404:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 405:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 406:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 407:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 408:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 409:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 410:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 411:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 412:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 413:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 414:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 415:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 416:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)0x00000000;
 417:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALR = (uint32_t)0x00000000;
 418:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMASSR = (uint32_t)0x00000000;
 419:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBSSR = (uint32_t)0x00000000;
 420:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 421:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 422:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 423:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 424:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 425:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 426:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 427:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 428:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 429:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 430:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 431:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
 432:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 433:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 434:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 435:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 436:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 437:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 438:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 439:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 440:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 441:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 442:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 443:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 444:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 445:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 446:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 447:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 448:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 449:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 450:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 451:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 452:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 453:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 454:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 455:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 456:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 457:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 458:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 459:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 460:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 461:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 462:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 463:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 464:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 465:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 466:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 467:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 468:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 469:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 470:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 471:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 472:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 473:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 474:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 475:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 476:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 477:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 478:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 479:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 480:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 481:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 482:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 483:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 484:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 485:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 486:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 487:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 488:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 489:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 490:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 491:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 492:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 493:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 494:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 495:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 496:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 497:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 498:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 499:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 500:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 501:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 502:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 503:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 504:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 505:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 506:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 507:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 508:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 509:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 510:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 511:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 512:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 513:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 514:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 515:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 516:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 517:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 518:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 519:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 520:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 521:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 522:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 523:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 524:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 525:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 526:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 527:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 528:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 529:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 530:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 531:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 532:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 533:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 534:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 535:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 536:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 537:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 538:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 539:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 540:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 541:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 542:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 543:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 544:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 545:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 546:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 547:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 548:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 549:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 550:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 551:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 552:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
  47              		.loc 1 552 0
  48 0010 0293     		str	r3, [sp, #8]
  49              	.LVL1:
 553:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 554:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 555:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      
 556:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 557:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
  50              		.loc 1 557 0
  51 0012 CB68     		ldr	r3, [r1, #12]
  52 0014 5806     		lsls	r0, r3, #25
  53 0016 18D4     		bmi	.L7
 558:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 559:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 560:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
  54              		.loc 1 560 0
  55 0018 4FF0FF33 		mov	r3, #-1
  56 001c CB60     		str	r3, [r1, #12]
  57 001e 00E0     		b	.L5
  58              	.LVL2:
  59              	.L44:
 561:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 562:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 563:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 564:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 566:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
  60              		.loc 1 567 0
  61 0020 4AB9     		cbnz	r2, .L4
  62              	.LVL3:
  63              	.L5:
 565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
  64              		.loc 1 565 0
  65 0022 CA68     		ldr	r2, [r1, #12]
 566:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
  66              		.loc 1 566 0
  67 0024 029B     		ldr	r3, [sp, #8]
  68 0026 0133     		adds	r3, r3, #1
  69              	.LVL4:
  70 0028 0293     		str	r3, [sp, #8]
  71              	.LVL5:
  72              		.loc 1 567 0
  73 002a 029B     		ldr	r3, [sp, #8]
  74              	.LVL6:
 565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
  75              		.loc 1 565 0
  76 002c 02F04002 		and	r2, r2, #64
  77              	.LVL7:
  78              		.loc 1 567 0
  79 0030 B3F5803F 		cmp	r3, #65536
  80 0034 F4D1     		bne	.L44
  81              	.L4:
  82              	.LBB86:
  83              	.LBB87:
 568:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 569:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
  84              		.loc 1 569 0
  85 0036 2B4B     		ldr	r3, .L48
  86 0038 DB68     		ldr	r3, [r3, #12]
  87              	.LVL8:
  88              	.LBE87:
  89              	.LBE86:
  90              	.LBE85:
  91              	.LBE84:
 384:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
  92              		.loc 1 384 0
  93 003a 5906     		lsls	r1, r3, #25
  94 003c 05D4     		bmi	.L7
  95              	.LVL9:
  96              	.L6:
 386:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
  97              		.loc 1 386 0
  98 003e 0020     		movs	r0, #0
  99              	.LVL10:
 100              	.L13:
 439:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 101              		.loc 1 439 0
 102 0040 FF22     		movs	r2, #255
 103 0042 284B     		ldr	r3, .L48
 104 0044 5A62     		str	r2, [r3, #36]
 442:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 105              		.loc 1 442 0
 106 0046 04B0     		add	sp, sp, #16
 107 0048 7047     		bx	lr
 108              	.LVL11:
 109              	.L7:
 391:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
 110              		.loc 1 391 0
 111 004a 2649     		ldr	r1, .L48
 112 004c 0023     		movs	r3, #0
 113 004e 0B60     		str	r3, [r1, #0]
 392:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 114              		.loc 1 392 0
 115 0050 42F20113 		movw	r3, #8449
 116 0054 4B60     		str	r3, [r1, #4]
 394:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
 117              		.loc 1 394 0
 118 0056 8B68     		ldr	r3, [r1, #8]
 119 0058 03F00703 		and	r3, r3, #7
 120 005c 8B60     		str	r3, [r1, #8]
 121 005e 00E0     		b	.L3
 122              	.LVL12:
 123              	.L45:
 401:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 124              		.loc 1 401 0 discriminator 1
 125 0060 4AB9     		cbnz	r2, .L8
 126              	.LVL13:
 127              	.L3:
 399:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 128              		.loc 1 399 0 discriminator 1
 129 0062 CA68     		ldr	r2, [r1, #12]
 400:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 130              		.loc 1 400 0 discriminator 1
 131 0064 019B     		ldr	r3, [sp, #4]
 132 0066 0133     		adds	r3, r3, #1
 133              	.LVL14:
 134 0068 0193     		str	r3, [sp, #4]
 135              	.LVL15:
 401:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 136              		.loc 1 401 0 discriminator 1
 137 006a 019B     		ldr	r3, [sp, #4]
 138              	.LVL16:
 399:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 139              		.loc 1 399 0 discriminator 1
 140 006c 02F00402 		and	r2, r2, #4
 141              	.LVL17:
 401:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 142              		.loc 1 401 0 discriminator 1
 143 0070 B3F5803F 		cmp	r3, #65536
 144 0074 F4D1     		bne	.L45
 145              	.L8:
 403:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 146              		.loc 1 403 0
 147 0076 1B4B     		ldr	r3, .L48
 148 0078 DA68     		ldr	r2, [r3, #12]
 149              	.LVL18:
 150 007a 5207     		lsls	r2, r2, #29
 151 007c DFD5     		bpl	.L6
 410:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 152              		.loc 1 410 0
 153 007e 9A68     		ldr	r2, [r3, #8]
 154 0080 0022     		movs	r2, #0
 155 0082 9A60     		str	r2, [r3, #8]
 411:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 156              		.loc 1 411 0
 157 0084 4FF6FF71 		movw	r1, #65535
 158 0088 5961     		str	r1, [r3, #20]
 412:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 159              		.loc 1 412 0
 160 008a 1749     		ldr	r1, .L48+4
 161 008c 1961     		str	r1, [r3, #16]
 413:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 162              		.loc 1 413 0
 163 008e 9A61     		str	r2, [r3, #24]
 414:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 164              		.loc 1 414 0
 165 0090 DA61     		str	r2, [r3, #28]
 415:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 166              		.loc 1 415 0
 167 0092 1A62     		str	r2, [r3, #32]
 416:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)0x00000000;
 168              		.loc 1 416 0
 169 0094 DA62     		str	r2, [r3, #44]
 417:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALR = (uint32_t)0x00000000;
 170              		.loc 1 417 0
 171 0096 DA63     		str	r2, [r3, #60]
 418:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMASSR = (uint32_t)0x00000000;
 172              		.loc 1 418 0
 173 0098 5A64     		str	r2, [r3, #68]
 419:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBSSR = (uint32_t)0x00000000;
 174              		.loc 1 419 0
 175 009a 9A64     		str	r2, [r3, #72]
 422:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 176              		.loc 1 422 0
 177 009c DA60     		str	r2, [r3, #12]
 425:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 178              		.loc 1 425 0
 179 009e 1A64     		str	r2, [r3, #64]
 180              	.LBB88:
 181              	.LBB89:
 570:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 571:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 572:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 573:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 574:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 575:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 576:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
 577:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 578:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 579:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 580:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 581:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 582:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 583:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status);  
 584:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 585:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 586:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 587:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 588:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 589:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 590:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 591:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 592:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 593:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 594:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 595:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 596:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 597:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 598:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 599:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 600:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 601:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 602:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 603:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 604:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 605:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 606:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 607:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 608:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 609:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 610:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 611:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 612:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 613:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 614:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 615:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 616:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 617:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 618:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 619:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 182              		.loc 1 619 0
 183 00a0 0392     		str	r2, [sp, #12]
 184              	.LVL19:
 620:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 621:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 622:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 623:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 624:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 185              		.loc 1 624 0
 186 00a2 CA22     		movs	r2, #202
 187 00a4 5A62     		str	r2, [r3, #36]
 625:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 188              		.loc 1 625 0
 189 00a6 5322     		movs	r2, #83
 190 00a8 5A62     		str	r2, [r3, #36]
 626:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 627:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 628:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 191              		.loc 1 628 0
 192 00aa DA68     		ldr	r2, [r3, #12]
 193 00ac 22F0A002 		bic	r2, r2, #160
 194 00b0 DA60     		str	r2, [r3, #12]
 195 00b2 00E0     		b	.L10
 196              	.LVL20:
 197              	.L46:
 629:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 630:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 631:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   do
 632:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 633:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 634:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 635:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 198              		.loc 1 635 0
 199 00b4 49B9     		cbnz	r1, .L9
 200              	.LVL21:
 201              	.L10:
 633:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 202              		.loc 1 633 0
 203 00b6 D968     		ldr	r1, [r3, #12]
 634:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 204              		.loc 1 634 0
 205 00b8 039A     		ldr	r2, [sp, #12]
 206 00ba 0132     		adds	r2, r2, #1
 207              	.LVL22:
 208 00bc 0392     		str	r2, [sp, #12]
 209              	.LVL23:
 210              		.loc 1 635 0
 211 00be 039A     		ldr	r2, [sp, #12]
 212              	.LVL24:
 633:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 213              		.loc 1 633 0
 214 00c0 01F02001 		and	r1, r1, #32
 215              	.LVL25:
 216              		.loc 1 635 0
 217 00c4 B2F5003F 		cmp	r2, #131072
 218 00c8 F4D1     		bne	.L46
 219              	.L9:
 636:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 637:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 220              		.loc 1 637 0
 221 00ca 064B     		ldr	r3, .L48
 222 00cc D868     		ldr	r0, [r3, #12]
 223 00ce 10F02000 		ands	r0, r0, #32
 224 00d2 02D1     		bne	.L47
 638:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 639:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 640:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 641:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 642:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 643:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 644:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }        
 645:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 646:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 647:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 225              		.loc 1 647 0
 226 00d4 FF22     		movs	r2, #255
 227 00d6 5A62     		str	r2, [r3, #36]
 228 00d8 B2E7     		b	.L13
 229              	.L47:
 230              	.LVL26:
 231 00da FF22     		movs	r2, #255
 232 00dc 5A62     		str	r2, [r3, #36]
 433:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 233              		.loc 1 433 0
 234 00de 0120     		movs	r0, #1
 235 00e0 AEE7     		b	.L13
 236              	.L49:
 237 00e2 00BF     		.align	2
 238              	.L48:
 239 00e4 00280040 		.word	1073752064
 240 00e8 FF007F00 		.word	8323327
 241              	.LBE89:
 242              	.LBE88:
 243              		.cfi_endproc
 244              	.LFE110:
 246              		.section	.text.RTC_Init,"ax",%progbits
 247              		.align	2
 248              		.global	RTC_Init
 249              		.thumb
 250              		.thumb_func
 252              	RTC_Init:
 253              	.LFB111:
 456:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 254              		.loc 1 456 0
 255              		.cfi_startproc
 256              		@ args = 0, pretend = 0, frame = 8
 257              		@ frame_needed = 0, uses_anonymous_args = 0
 258              		@ link register save eliminated.
 259              	.LVL27:
 260 0000 82B0     		sub	sp, sp, #8
 261              	.LCFI1:
 262              		.cfi_def_cfa_offset 8
 263              	.LVL28:
 465:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 264              		.loc 1 465 0
 265 0002 1D49     		ldr	r1, .L64
 266 0004 CA23     		movs	r3, #202
 267 0006 4B62     		str	r3, [r1, #36]
 466:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 268              		.loc 1 466 0
 269 0008 5323     		movs	r3, #83
 270 000a 4B62     		str	r3, [r1, #36]
 271              	.LBB96:
 272              	.LBB97:
 552:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 273              		.loc 1 552 0
 274 000c 0023     		movs	r3, #0
 275 000e 0193     		str	r3, [sp, #4]
 276              	.LVL29:
 557:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 277              		.loc 1 557 0
 278 0010 CB68     		ldr	r3, [r1, #12]
 279 0012 5B06     		lsls	r3, r3, #25
 280 0014 15D4     		bmi	.L55
 560:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 281              		.loc 1 560 0
 282 0016 4FF0FF33 		mov	r3, #-1
 283 001a CB60     		str	r3, [r1, #12]
 284 001c 00E0     		b	.L54
 285              	.LVL30:
 286              	.L63:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 287              		.loc 1 567 0
 288 001e 4AB9     		cbnz	r2, .L53
 289              	.LVL31:
 290              	.L54:
 565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 291              		.loc 1 565 0
 292 0020 CA68     		ldr	r2, [r1, #12]
 566:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 293              		.loc 1 566 0
 294 0022 019B     		ldr	r3, [sp, #4]
 295 0024 0133     		adds	r3, r3, #1
 296              	.LVL32:
 297 0026 0193     		str	r3, [sp, #4]
 298              	.LVL33:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 299              		.loc 1 567 0
 300 0028 019B     		ldr	r3, [sp, #4]
 301              	.LVL34:
 565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 302              		.loc 1 565 0
 303 002a 02F04002 		and	r2, r2, #64
 304              	.LVL35:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 305              		.loc 1 567 0
 306 002e B3F5803F 		cmp	r3, #65536
 307 0032 F4D1     		bne	.L63
 308              	.L53:
 309              	.LBB98:
 310              	.LBB99:
 569:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 311              		.loc 1 569 0
 312 0034 104B     		ldr	r3, .L64
 313 0036 DB68     		ldr	r3, [r3, #12]
 314              	.LVL36:
 315              	.LBE99:
 316              	.LBE98:
 317              	.LBE97:
 318              	.LBE96:
 469:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 319              		.loc 1 469 0
 320 0038 C3F38013 		ubfx	r3, r3, #6, #1
 321              	.LVL37:
 322 003c 0BB9     		cbnz	r3, .L55
 471:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 323              		.loc 1 471 0
 324 003e 1846     		mov	r0, r3
 325              	.LVL38:
 326 0040 14E0     		b	.L52
 327              	.LVL39:
 328              	.L55:
 476:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 329              		.loc 1 476 0
 330 0042 0D4B     		ldr	r3, .L64
 331 0044 9A68     		ldr	r2, [r3, #8]
 332 0046 22F04002 		bic	r2, r2, #64
 333 004a 9A60     		str	r2, [r3, #8]
 478:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 334              		.loc 1 478 0
 335 004c 9968     		ldr	r1, [r3, #8]
 336 004e 0268     		ldr	r2, [r0, #0]
 337 0050 0A43     		orrs	r2, r2, r1
 338 0052 9A60     		str	r2, [r3, #8]
 481:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 339              		.loc 1 481 0
 340 0054 8268     		ldr	r2, [r0, #8]
 341 0056 1A61     		str	r2, [r3, #16]
 482:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 342              		.loc 1 482 0
 343 0058 1A69     		ldr	r2, [r3, #16]
 344 005a 4168     		ldr	r1, [r0, #4]
 345 005c 42EA0142 		orr	r2, r2, r1, lsl #16
 346 0060 1A61     		str	r2, [r3, #16]
 347              	.LBB100:
 348              	.LBB101:
 598:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 349              		.loc 1 598 0
 350 0062 DA68     		ldr	r2, [r3, #12]
 351 0064 22F08002 		bic	r2, r2, #128
 352 0068 DA60     		str	r2, [r3, #12]
 353              	.LVL40:
 487:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 354              		.loc 1 487 0
 355 006a 0120     		movs	r0, #1
 356              	.LVL41:
 357              	.L52:
 358              	.LBE101:
 359              	.LBE100:
 490:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 360              		.loc 1 490 0
 361 006c FF22     		movs	r2, #255
 362 006e 024B     		ldr	r3, .L64
 363 0070 5A62     		str	r2, [r3, #36]
 493:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 364              		.loc 1 493 0
 365 0072 02B0     		add	sp, sp, #8
 366 0074 7047     		bx	lr
 367              	.L65:
 368 0076 00BF     		.align	2
 369              	.L64:
 370 0078 00280040 		.word	1073752064
 371              		.cfi_endproc
 372              	.LFE111:
 374              		.section	.text.RTC_StructInit,"ax",%progbits
 375              		.align	2
 376              		.global	RTC_StructInit
 377              		.thumb
 378              		.thumb_func
 380              	RTC_StructInit:
 381              	.LFB112:
 502:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 382              		.loc 1 502 0
 383              		.cfi_startproc
 384              		@ args = 0, pretend = 0, frame = 0
 385              		@ frame_needed = 0, uses_anonymous_args = 0
 386              		@ link register save eliminated.
 387              	.LVL42:
 510:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 388              		.loc 1 510 0
 389 0000 0021     		movs	r1, #0
 390 0002 7F22     		movs	r2, #127
 391 0004 FF23     		movs	r3, #255
 392 0006 80E80E00 		stmia	r0, {r1, r2, r3}
 393 000a 7047     		bx	lr
 394              		.cfi_endproc
 395              	.LFE112:
 397              		.section	.text.RTC_WriteProtectionCmd,"ax",%progbits
 398              		.align	2
 399              		.global	RTC_WriteProtectionCmd
 400              		.thumb
 401              		.thumb_func
 403              	RTC_WriteProtectionCmd:
 404              	.LFB113:
 524:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 405              		.loc 1 524 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409              		@ link register save eliminated.
 410              	.LVL43:
 528:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 411              		.loc 1 528 0
 412 0000 28B9     		cbnz	r0, .L70
 536:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 413              		.loc 1 536 0
 414 0002 054B     		ldr	r3, .L71
 415 0004 CA22     		movs	r2, #202
 416 0006 5A62     		str	r2, [r3, #36]
 537:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 417              		.loc 1 537 0
 418 0008 5322     		movs	r2, #83
 419 000a 5A62     		str	r2, [r3, #36]
 420 000c 7047     		bx	lr
 421              	.L70:
 531:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 422              		.loc 1 531 0
 423 000e FF22     		movs	r2, #255
 424 0010 014B     		ldr	r3, .L71
 425 0012 5A62     		str	r2, [r3, #36]
 426 0014 7047     		bx	lr
 427              	.L72:
 428 0016 00BF     		.align	2
 429              	.L71:
 430 0018 00280040 		.word	1073752064
 431              		.cfi_endproc
 432              	.LFE113:
 434              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 435              		.align	2
 436              		.global	RTC_EnterInitMode
 437              		.thumb
 438              		.thumb_func
 440              	RTC_EnterInitMode:
 441              	.LFB114:
 551:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 442              		.loc 1 551 0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 8
 445              		@ frame_needed = 0, uses_anonymous_args = 0
 446              		@ link register save eliminated.
 447 0000 82B0     		sub	sp, sp, #8
 448              	.LCFI2:
 449              		.cfi_def_cfa_offset 8
 557:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 450              		.loc 1 557 0
 451 0002 0E49     		ldr	r1, .L86
 552:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 452              		.loc 1 552 0
 453 0004 0023     		movs	r3, #0
 454 0006 0193     		str	r3, [sp, #4]
 455              	.LVL44:
 557:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 456              		.loc 1 557 0
 457 0008 CB68     		ldr	r3, [r1, #12]
 458 000a 5806     		lsls	r0, r3, #25
 459 000c 14D4     		bmi	.L77
 560:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 460              		.loc 1 560 0
 461 000e 4FF0FF33 		mov	r3, #-1
 462 0012 CB60     		str	r3, [r1, #12]
 463 0014 00E0     		b	.L76
 464              	.LVL45:
 465              	.L85:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 466              		.loc 1 567 0 discriminator 1
 467 0016 4AB9     		cbnz	r2, .L75
 468              	.LVL46:
 469              	.L76:
 565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 470              		.loc 1 565 0 discriminator 1
 471 0018 CA68     		ldr	r2, [r1, #12]
 566:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 472              		.loc 1 566 0 discriminator 1
 473 001a 019B     		ldr	r3, [sp, #4]
 474 001c 0133     		adds	r3, r3, #1
 475              	.LVL47:
 476 001e 0193     		str	r3, [sp, #4]
 477              	.LVL48:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 478              		.loc 1 567 0 discriminator 1
 479 0020 019B     		ldr	r3, [sp, #4]
 480              	.LVL49:
 565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 481              		.loc 1 565 0 discriminator 1
 482 0022 02F04002 		and	r2, r2, #64
 483              	.LVL50:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 484              		.loc 1 567 0 discriminator 1
 485 0026 B3F5803F 		cmp	r3, #65536
 486 002a F4D1     		bne	.L85
 487              	.L75:
 488              	.LBB104:
 489              	.LBB105:
 569:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 490              		.loc 1 569 0
 491 002c 034B     		ldr	r3, .L86
 492 002e D868     		ldr	r0, [r3, #12]
 571:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 493              		.loc 1 571 0
 494 0030 C0F38010 		ubfx	r0, r0, #6, #1
 495              	.LVL51:
 496              	.L74:
 497              	.LBE105:
 498              	.LBE104:
 584:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 499              		.loc 1 584 0
 500 0034 02B0     		add	sp, sp, #8
 501 0036 7047     		bx	lr
 502              	.LVL52:
 503              	.L77:
 580:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 504              		.loc 1 580 0
 505 0038 0120     		movs	r0, #1
 506 003a FBE7     		b	.L74
 507              	.L87:
 508              		.align	2
 509              	.L86:
 510 003c 00280040 		.word	1073752064
 511              		.cfi_endproc
 512              	.LFE114:
 514              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 515              		.align	2
 516              		.global	RTC_ExitInitMode
 517              		.thumb
 518              		.thumb_func
 520              	RTC_ExitInitMode:
 521              	.LFB115:
 596:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 522              		.loc 1 596 0
 523              		.cfi_startproc
 524              		@ args = 0, pretend = 0, frame = 0
 525              		@ frame_needed = 0, uses_anonymous_args = 0
 526              		@ link register save eliminated.
 598:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 527              		.loc 1 598 0
 528 0000 024B     		ldr	r3, .L89
 529 0002 DA68     		ldr	r2, [r3, #12]
 530 0004 22F08002 		bic	r2, r2, #128
 531 0008 DA60     		str	r2, [r3, #12]
 532 000a 7047     		bx	lr
 533              	.L90:
 534              		.align	2
 535              	.L89:
 536 000c 00280040 		.word	1073752064
 537              		.cfi_endproc
 538              	.LFE115:
 540              		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 541              		.align	2
 542              		.global	RTC_WaitForSynchro
 543              		.thumb
 544              		.thumb_func
 546              	RTC_WaitForSynchro:
 547              	.LFB116:
 618:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 548              		.loc 1 618 0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 8
 551              		@ frame_needed = 0, uses_anonymous_args = 0
 552              		@ link register save eliminated.
 553 0000 82B0     		sub	sp, sp, #8
 554              	.LCFI3:
 555              		.cfi_def_cfa_offset 8
 624:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 556              		.loc 1 624 0
 557 0002 0F49     		ldr	r1, .L102
 619:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 558              		.loc 1 619 0
 559 0004 0023     		movs	r3, #0
 560 0006 0193     		str	r3, [sp, #4]
 561              	.LVL53:
 624:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 562              		.loc 1 624 0
 563 0008 CA23     		movs	r3, #202
 564 000a 4B62     		str	r3, [r1, #36]
 625:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 565              		.loc 1 625 0
 566 000c 5323     		movs	r3, #83
 567 000e 4B62     		str	r3, [r1, #36]
 628:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 568              		.loc 1 628 0
 569 0010 CB68     		ldr	r3, [r1, #12]
 570 0012 23F0A003 		bic	r3, r3, #160
 571 0016 CB60     		str	r3, [r1, #12]
 572 0018 00E0     		b	.L93
 573              	.LVL54:
 574              	.L101:
 635:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 575              		.loc 1 635 0 discriminator 1
 576 001a 4AB9     		cbnz	r2, .L92
 577              	.LVL55:
 578              	.L93:
 633:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 579              		.loc 1 633 0 discriminator 1
 580 001c CA68     		ldr	r2, [r1, #12]
 634:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 581              		.loc 1 634 0 discriminator 1
 582 001e 019B     		ldr	r3, [sp, #4]
 583 0020 0133     		adds	r3, r3, #1
 584              	.LVL56:
 585 0022 0193     		str	r3, [sp, #4]
 586              	.LVL57:
 635:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 587              		.loc 1 635 0 discriminator 1
 588 0024 019B     		ldr	r3, [sp, #4]
 589              	.LVL58:
 633:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 590              		.loc 1 633 0 discriminator 1
 591 0026 02F02002 		and	r2, r2, #32
 592              	.LVL59:
 635:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 593              		.loc 1 635 0 discriminator 1
 594 002a B3F5003F 		cmp	r3, #131072
 595 002e F4D1     		bne	.L101
 596              	.L92:
 637:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 597              		.loc 1 637 0
 598 0030 034B     		ldr	r3, .L102
 599 0032 D868     		ldr	r0, [r3, #12]
 600              	.LVL60:
 601              		.loc 1 647 0
 602 0034 FF22     		movs	r2, #255
 603              	.LVL61:
 604 0036 5A62     		str	r2, [r3, #36]
 648:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 649:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status); 
 650:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 605              		.loc 1 650 0
 606 0038 C0F34010 		ubfx	r0, r0, #5, #1
 607              	.LVL62:
 608 003c 02B0     		add	sp, sp, #8
 609 003e 7047     		bx	lr
 610              	.L103:
 611              		.align	2
 612              	.L102:
 613 0040 00280040 		.word	1073752064
 614              		.cfi_endproc
 615              	.LFE116:
 617              		.section	.text.RTC_RefClockCmd,"ax",%progbits
 618              		.align	2
 619              		.global	RTC_RefClockCmd
 620              		.thumb
 621              		.thumb_func
 623              	RTC_RefClockCmd:
 624              	.LFB117:
 651:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 652:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 653:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 654:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 655:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 656:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 657:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 658:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 659:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 660:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 661:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 625              		.loc 1 661 0
 626              		.cfi_startproc
 627              		@ args = 0, pretend = 0, frame = 8
 628              		@ frame_needed = 0, uses_anonymous_args = 0
 629              		@ link register save eliminated.
 630              	.LVL63:
 631 0000 82B0     		sub	sp, sp, #8
 632              	.LCFI4:
 633              		.cfi_def_cfa_offset 8
 634              	.LVL64:
 662:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 663:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 664:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 665:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 666:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 667:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 668:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 635              		.loc 1 668 0
 636 0002 1B49     		ldr	r1, .L123
 637 0004 CA23     		movs	r3, #202
 638 0006 4B62     		str	r3, [r1, #36]
 669:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 639              		.loc 1 669 0
 640 0008 5323     		movs	r3, #83
 641 000a 4B62     		str	r3, [r1, #36]
 642              	.LBB112:
 643              	.LBB113:
 552:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 644              		.loc 1 552 0
 645 000c 0023     		movs	r3, #0
 646 000e 0193     		str	r3, [sp, #4]
 647              	.LVL65:
 557:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 648              		.loc 1 557 0
 649 0010 CB68     		ldr	r3, [r1, #12]
 650 0012 5B06     		lsls	r3, r3, #25
 651 0014 19D4     		bmi	.L111
 560:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 652              		.loc 1 560 0
 653 0016 4FF0FF33 		mov	r3, #-1
 654 001a CB60     		str	r3, [r1, #12]
 655 001c 00E0     		b	.L109
 656              	.LVL66:
 657              	.L122:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 658              		.loc 1 567 0
 659 001e 4AB9     		cbnz	r2, .L108
 660              	.LVL67:
 661              	.L109:
 565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 662              		.loc 1 565 0
 663 0020 CA68     		ldr	r2, [r1, #12]
 566:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 664              		.loc 1 566 0
 665 0022 019B     		ldr	r3, [sp, #4]
 666 0024 0133     		adds	r3, r3, #1
 667              	.LVL68:
 668 0026 0193     		str	r3, [sp, #4]
 669              	.LVL69:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 670              		.loc 1 567 0
 671 0028 019B     		ldr	r3, [sp, #4]
 672              	.LVL70:
 565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 673              		.loc 1 565 0
 674 002a 02F04002 		and	r2, r2, #64
 675              	.LVL71:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 676              		.loc 1 567 0
 677 002e B3F5803F 		cmp	r3, #65536
 678 0032 F4D1     		bne	.L122
 679              	.L108:
 680              	.LBB114:
 681              	.LBB115:
 569:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 682              		.loc 1 569 0
 683 0034 0E4B     		ldr	r3, .L123
 684 0036 DB68     		ldr	r3, [r3, #12]
 685              	.LVL72:
 686              	.LBE115:
 687              	.LBE114:
 688              	.LBE113:
 689              	.LBE112:
 670:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 671:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 672:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 690              		.loc 1 672 0
 691 0038 C3F38013 		ubfx	r3, r3, #6, #1
 692              	.LVL73:
 693 003c 2BB9     		cbnz	r3, .L111
 673:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 674:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 694              		.loc 1 674 0
 695 003e 1846     		mov	r0, r3
 696              	.LVL74:
 697              	.L110:
 675:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 676:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 677:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
 678:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 679:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 680:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 681:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 682:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 683:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 684:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 685:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 686:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 687:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 688:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 689:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 690:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 691:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 692:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 693:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 694:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 695:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 698              		.loc 1 695 0
 699 0040 FF22     		movs	r2, #255
 700 0042 0B4B     		ldr	r3, .L123
 701 0044 5A62     		str	r2, [r3, #36]
 696:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 697:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status; 
 698:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 702              		.loc 1 698 0
 703 0046 02B0     		add	sp, sp, #8
 704 0048 7047     		bx	lr
 705              	.LVL75:
 706              	.L111:
 678:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 707              		.loc 1 678 0
 708 004a 58B9     		cbnz	r0, .L106
 686:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 709              		.loc 1 686 0
 710 004c 084B     		ldr	r3, .L123
 711 004e 9A68     		ldr	r2, [r3, #8]
 712 0050 22F01002 		bic	r2, r2, #16
 713 0054 9A60     		str	r2, [r3, #8]
 714              	.L112:
 715              	.LBB116:
 716              	.LBB117:
 598:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 717              		.loc 1 598 0
 718 0056 064B     		ldr	r3, .L123
 719 0058 DA68     		ldr	r2, [r3, #12]
 720 005a 22F08002 		bic	r2, r2, #128
 721 005e DA60     		str	r2, [r3, #12]
 722              	.LVL76:
 691:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 723              		.loc 1 691 0
 724 0060 0120     		movs	r0, #1
 725              	.LVL77:
 726 0062 EDE7     		b	.L110
 727              	.LVL78:
 728              	.L106:
 729              	.LBE117:
 730              	.LBE116:
 681:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 731              		.loc 1 681 0
 732 0064 024B     		ldr	r3, .L123
 733 0066 9A68     		ldr	r2, [r3, #8]
 734 0068 42F01002 		orr	r2, r2, #16
 735 006c 9A60     		str	r2, [r3, #8]
 736 006e F2E7     		b	.L112
 737              	.L124:
 738              		.align	2
 739              	.L123:
 740 0070 00280040 		.word	1073752064
 741              		.cfi_endproc
 742              	.LFE117:
 744              		.section	.text.RTC_BypassShadowCmd,"ax",%progbits
 745              		.align	2
 746              		.global	RTC_BypassShadowCmd
 747              		.thumb
 748              		.thumb_func
 750              	RTC_BypassShadowCmd:
 751              	.LFB118:
 699:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 700:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 701:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 702:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 703:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 704:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 705:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 706:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 707:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
 708:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 709:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 752              		.loc 1 709 0
 753              		.cfi_startproc
 754              		@ args = 0, pretend = 0, frame = 0
 755              		@ frame_needed = 0, uses_anonymous_args = 0
 756              		@ link register save eliminated.
 757              	.LVL79:
 710:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 711:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 712:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 713:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 714:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 758              		.loc 1 714 0
 759 0000 084B     		ldr	r3, .L129
 760 0002 CA22     		movs	r2, #202
 761 0004 5A62     		str	r2, [r3, #36]
 715:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 762              		.loc 1 715 0
 763 0006 5322     		movs	r2, #83
 764 0008 5A62     		str	r2, [r3, #36]
 716:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 717:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 718:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 719:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 720:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 765              		.loc 1 720 0
 766 000a 9A68     		ldr	r2, [r3, #8]
 717:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 767              		.loc 1 717 0
 768 000c 30B9     		cbnz	r0, .L128
 721:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 722:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 723:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 724:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 725:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 769              		.loc 1 725 0
 770 000e 02F0DF02 		and	r2, r2, #223
 771 0012 9A60     		str	r2, [r3, #8]
 772              	.L127:
 726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 727:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 729:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 773              		.loc 1 729 0
 774 0014 FF22     		movs	r2, #255
 775 0016 034B     		ldr	r3, .L129
 776 0018 5A62     		str	r2, [r3, #36]
 777 001a 7047     		bx	lr
 778              	.L128:
 720:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 779              		.loc 1 720 0
 780 001c 42F02002 		orr	r2, r2, #32
 781 0020 9A60     		str	r2, [r3, #8]
 782 0022 F7E7     		b	.L127
 783              	.L130:
 784              		.align	2
 785              	.L129:
 786 0024 00280040 		.word	1073752064
 787              		.cfi_endproc
 788              	.LFE118:
 790              		.section	.text.RTC_SetTime,"ax",%progbits
 791              		.align	2
 792              		.global	RTC_SetTime
 793              		.thumb
 794              		.thumb_func
 796              	RTC_SetTime:
 797              	.LFB119:
 730:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 731:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 732:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 733:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
 734:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 735:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 736:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 737:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 738:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 739:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 740:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 741:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Time and Date configuration functions
 742:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
 743:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 744:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Calendar
 745:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (Time and Date).
 746:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 747:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 748:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 749:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 750:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 751:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 752:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 753:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 754:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 755:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 756:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 757:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 758:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 759:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 760:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 761:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 762:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 763:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 764:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 798              		.loc 1 764 0
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 8
 801              		@ frame_needed = 0, uses_anonymous_args = 0
 802              		@ link register save eliminated.
 803              	.LVL80:
 804 0000 30B4     		push	{r4, r5}
 805              	.LCFI5:
 806              		.cfi_def_cfa_offset 8
 807              		.cfi_offset 4, -8
 808              		.cfi_offset 5, -4
 809 0002 82B0     		sub	sp, sp, #8
 810              	.LCFI6:
 811              		.cfi_def_cfa_offset 16
 812              	.LVL81:
 765:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 766:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 767:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 768:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 769:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 770:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 771:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 772:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 773:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 813              		.loc 1 773 0
 814 0004 504B     		ldr	r3, .L181
 771:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 815              		.loc 1 771 0
 816 0006 0028     		cmp	r0, #0
 817 0008 32D1     		bne	.L132
 818              		.loc 1 773 0
 819 000a 9C68     		ldr	r4, [r3, #8]
 820 000c 14F04004 		ands	r4, r4, #64
 821 0010 62D1     		bne	.L133
 774:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 775:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 776:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 777:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 778:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 779:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 780:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 822              		.loc 1 780 0
 823 0012 CC70     		strb	r4, [r1, #3]
 824              	.L134:
 781:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 782:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 783:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 784:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 785:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 786:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 787:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 788:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 789:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 790:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 791:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 792:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 793:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 794:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 795:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 796:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 797:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 798:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 799:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 800:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 801:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 802:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 803:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 804:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 805:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 806:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 807:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 808:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 809:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 810:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 811:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 812:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 813:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 825              		.loc 1 813 0
 826 0014 0B78     		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 827              	.LVL82:
 828              	.LBB132:
 829              	.LBB133:
 814:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 815:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 816:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 817:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 818:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 819:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 820:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 821:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 822:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 823:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 824:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 825:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 826:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 827:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 828:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 829:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 830:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 831:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 832:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 833:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 834:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 835:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 836:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 837:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 838:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 839:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if (RTC_WaitForSynchro() == ERROR)
 840:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 841:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 842:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 843:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
 844:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 845:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 846:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 847:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 848:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 849:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 850:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 851:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 852:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 853:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 854:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 855:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 856:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 857:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 858:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 859:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 860:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 861:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 862:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 863:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 864:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 865:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 866:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 867:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 868:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 869:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 870:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 871:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 872:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 873:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 874:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 875:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 876:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 877:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 878:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 879:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 880:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 881:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 882:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 883:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 884:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 885:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 886:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 887:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 888:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 889:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 890:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 891:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 892:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 893:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 894:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 895:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 896:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 897:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 898:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 899:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 900:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 901:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 902:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 903:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 904:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 905:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 906:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 907:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 908:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 909:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 910:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 911:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 912:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Subseconds value.
 913:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 914:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         SSR register.
 915:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 916:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Subseconds value.
 917:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 918:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 919:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 920:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 921:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 922:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 923:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 924:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 925:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 926:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 927:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 928:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 929:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 930:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 931:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 932:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 933:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 934:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 935:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 936:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 937:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 938:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 939:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 940:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 941:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 942:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 943:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 944:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 945:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 946:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 947:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 948:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 949:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 950:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 951:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 952:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 953:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 954:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 955:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 956:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 957:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 958:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 959:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 960:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 961:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 962:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 963:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 964:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 965:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 966:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 967:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 968:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 969:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 970:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 971:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 972:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 973:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 974:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 975:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 976:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 977:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 978:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 979:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 980:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 981:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 982:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 983:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 984:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 985:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 986:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 987:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 988:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 989:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 990:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 991:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 992:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 993:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 994:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 995:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 996:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 997:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 998:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
 999:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
1000:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1001:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1002:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
1003:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1004:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
1005:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
1006:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1007:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if (RTC_WaitForSynchro() == ERROR)
1008:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
1009:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
1010:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
1011:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
1012:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
1013:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
1014:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
1015:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1016:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1017:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1018:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1019:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1020:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1021:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1022:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
1023:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1024:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1025:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1026:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1027:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1028:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1029:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1030:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1031:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
1032:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1033:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1034:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1035:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1036:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1037:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
1038:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
1039:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
1040:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
1041:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1042:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1043:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1044:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1045:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1046:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1047:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1048:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1049:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1050:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1051:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1052:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1053:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1054:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1055:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1056:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1057:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1058:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1059:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1060:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1061:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
1062:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1063:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1064:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
1065:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
1066:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
1067:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
1068:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1069:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1070:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1071:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1072:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1073:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
1074:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
1075:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
1076:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1077:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1078:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1079:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1080:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1081:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1082:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1083:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1084:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1085:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1086:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1087:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1088:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               Alarms (Alarm A and Alarm B) configuration functions
1089:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1090:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1091:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Alarms.
1092:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1093:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1094:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1095:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1096:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1097:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1098:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1099:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1100:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1101:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1102:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1103:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1104:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1105:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1106:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1107:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1108:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1109:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1110:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1111:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1112:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1113:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1114:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1115:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1116:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1117:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1118:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1119:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1120:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1121:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1122:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1123:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1124:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1125:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1126:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1127:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1128:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1129:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1130:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1131:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1132:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1133:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1134:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1135:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1136:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1137:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1138:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1139:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1140:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1141:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1142:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1143:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1144:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1145:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1146:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1147:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1148:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1149:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1150:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1151:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
1152:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1153:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1154:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1155:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1156:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1157:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1158:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1159:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1160:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1161:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1162:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1163:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1164:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1165:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1166:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1167:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1168:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1169:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1170:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1171:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1172:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1173:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1174:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1175:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1176:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1177:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
1178:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1179:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1180:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1181:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
1182:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1183:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1184:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1185:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1186:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1187:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1188:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1189:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1190:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1191:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
1192:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1193:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1194:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1195:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1196:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1197:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1198:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1199:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1200:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1201:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1202:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1203:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1204:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1205:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
1206:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1207:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1208:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1209:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
1210:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1211:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1212:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1213:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
1214:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1215:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1216:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1217:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1218:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1219:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1220:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1221:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         will be initialized.
1222:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1223:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1224:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1225:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1226:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1227:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
1228:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
1229:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
1230:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
1231:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1232:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1233:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
1234:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
1235:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1236:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1237:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
1238:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1239:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1240:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1241:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1242:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1243:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1244:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1245:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1246:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1247:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1248:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1249:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1250:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1251:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1252:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1253:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1254:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1255:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1256:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1257:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1258:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1259:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1260:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1261:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1262:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1263:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1264:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1265:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
1266:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1267:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1268:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1269:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
1270:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1271:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1272:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1273:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
1274:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1275:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
1276:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1277:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
1278:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1279:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
1280:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
1281:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
1282:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
1283:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1284:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1285:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1286:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1287:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1288:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1289:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1290:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1291:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1292:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1293:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1294:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1295:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1296:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1297:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1298:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1299:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1300:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1301:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1302:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1303:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1304:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1305:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1306:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1307:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1308:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1309:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1310:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
1311:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
1312:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1313:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1314:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1315:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1316:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1317:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1318:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1319:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1320:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1321:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1322:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1323:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1324:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1325:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
1326:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1327:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
1328:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1329:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1330:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1331:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1332:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
1333:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1334:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1335:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1336:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1337:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
1338:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
1339:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
1340:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1341:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
1342:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1343:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
1344:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1345:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1346:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1347:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1348:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
1349:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1350:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1351:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1352:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1353:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1354:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1355:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1356:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1357:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1358:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Subseconds value and mask.*
1359:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1360:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1361:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1362:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1363:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1364:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Subseconds value.
1365:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1366:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Subseconds Mask.
1367:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1368:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1369:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1370:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1371:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1372:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1373:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1374:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1375:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1376:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1377:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1378:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1379:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1380:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1381:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1382:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1383:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1384:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1385:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1386:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1387:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1388:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1389:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1390:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1391:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1392:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1393:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1394:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1395:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1396:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1397:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1398:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1399:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1400:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1401:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1402:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1403:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1404:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1405:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1406:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1407:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1408:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1409:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1410:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1411:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1412:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1413:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1414:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1415:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B SubSecond registers */
1416:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
1417:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1418:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1419:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1420:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the AlarmA SubSecond register */
1421:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
1422:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1423:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1424:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1425:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B SubSecond register */
1426:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
1427:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1428:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1429:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1430:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1431:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1432:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1433:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1434:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1435:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Subseconds value.
1436:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1437:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1438:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1439:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1440:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1441:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Subseconds value.
1442:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1443:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1444:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1445:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1446:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1447:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1448:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1449:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1450:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
1451:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1452:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1453:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1454:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
1455:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1456:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1457:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
1458:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1459:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1460:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1461:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1462:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1463:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1464:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1465:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1466:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1467:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1468:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1469:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                      WakeUp Timer configuration functions
1470:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1471:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1472:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC WakeUp.
1473:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1474:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1475:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1476:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1477:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1478:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1479:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1480:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1481:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1482:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1483:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1484:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1485:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1486:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1487:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1488:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1489:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1490:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1491:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1492:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1493:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1494:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1495:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1496:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1497:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1498:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1499:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1500:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1501:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1502:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
1503:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1504:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1505:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
1506:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1507:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1508:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1509:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1510:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1511:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1512:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1513:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1514:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1515:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1516:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1517:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1518:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1519:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1520:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1521:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1522:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1523:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1524:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1525:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1526:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1527:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1528:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1529:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
1530:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1531:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1532:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1533:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1534:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1535:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1536:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1537:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1538:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1539:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1540:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1541:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1542:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1543:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
1544:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1545:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1546:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1547:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1548:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1549:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1550:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1551:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1552:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1553:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1554:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
1555:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
1556:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1557:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1558:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1559:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1560:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1561:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1562:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1563:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1564:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1566:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1568:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
1569:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
1570:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1571:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1572:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1573:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1574:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
1575:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1576:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1577:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1578:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
1579:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
1580:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
1581:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1582:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
1583:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1584:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
1585:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1586:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1587:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1588:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1589:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1590:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1591:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1592:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1593:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1594:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1595:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1596:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1597:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1598:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1599:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1600:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1601:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1602:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1603:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1604:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1605:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1606:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1607:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                     Daylight Saving configuration functions
1608:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1609:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1610:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1611:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1612:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1613:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1614:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1615:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1616:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1617:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1618:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1619:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1620:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1621:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1622:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1623:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1624:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1625:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1626:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1627:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1628:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1629:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1630:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1631:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1632:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1633:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1634:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1635:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1636:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1637:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1638:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1639:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1640:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
1641:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1642:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1643:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
1644:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1645:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1646:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1647:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1648:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1649:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1650:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1651:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1652:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1653:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1654:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1655:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1656:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1657:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1658:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
1659:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1660:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1661:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1662:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1663:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1664:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1665:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1666:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1667:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1668:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1669:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1670:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                          Output pin Configuration function
1671:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1672:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1673:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC Output source.
1674:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1675:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1676:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1677:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1678:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1679:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1680:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1681:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1682:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1683:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1684:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1685:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1686:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1687:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1688:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1689:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1690:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1691:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1692:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1693:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1694:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1695:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1696:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1697:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1698:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1699:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1700:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1701:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1702:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1703:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1704:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1705:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1706:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
1707:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1708:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1709:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
1710:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1711:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1712:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1713:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1714:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1715:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1716:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1717:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1718:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1719:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1720:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1721:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1722:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1723:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1724:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                   Digital Calibration configuration functions
1725:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1727:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1729:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1730:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1731:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1732:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1733:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1734:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1735:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1736:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1737:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1738:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *    
1739:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1740:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1741:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1742:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1743:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1744:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1745:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1746:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1747:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1748:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1749:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1750:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1751:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1752:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1753:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1754:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1755:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1756:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1757:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1758:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1759:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1760:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1761:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1762:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
1763:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1764:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
1765:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1766:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1767:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1768:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1769:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
1770:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1771:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1772:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1773:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1774:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1775:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1776:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1777:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1778:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1779:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1780:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1781:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1782:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1783:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1784:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1785:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1786:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1787:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1788:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1789:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1790:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1791:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1792:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1793:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1794:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1795:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1796:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1797:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1798:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1799:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1800:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1801:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1802:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
1803:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1804:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status =  ERROR;
1805:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1806:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1807:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1808:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
1809:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1810:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1811:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
1812:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1813:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1814:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     { 
1815:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1816:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
1817:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1818:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1819:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1820:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1821:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1822:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1823:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1824:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1825:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1826:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1827:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1828:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1829:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1830:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1831:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1832:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1833:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1834:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1835:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1836:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1837:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1838:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1839:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1840:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1841:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1842:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1843:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1844:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1845:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1846:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1847:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1848:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
1849:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1850:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1851:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1852:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1853:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
1854:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1855:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1856:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1857:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1858:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1859:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1860:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1861:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1862:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1863:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1864:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1865:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1866:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1867:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1868:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1869:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1870:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1871:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1872:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1873:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1874:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1875:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1876:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1877:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /*clear flags before config*/
1878:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
1879:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1880:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1881:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
1882:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1883:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1884:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1885:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1886:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1887:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1888:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1889:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1890:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1891:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration periode is 32s.
1892:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration periode is 16s.
1893:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibartion periode is 8s.
1894:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1895:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1896:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK puls every 2**11 pulses.
1897:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1898:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1899:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1900:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1901:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1902:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1903:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1904:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1905:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1906:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1907:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1908:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1909:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
1910:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1911:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1912:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1913:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1914:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1915:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1916:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1917:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1918:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1919:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1920:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1921:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
1922:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1923:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1924:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
1925:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1926:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       recalpfcount++;
1927:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1928:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1929:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1930:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1931:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
1932:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1933:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1934:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
1935:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1936:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1937:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1938:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1939:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1940:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
1941:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1942:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1943:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1944:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1945:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1946:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
1947:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1948:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1949:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1950:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1951:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1952:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1953:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1954:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1955:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1956:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1957:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1958:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1959:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        TimeStamp configuration functions
1960:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1961:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1962:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1963:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1964:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1965:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1966:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1967:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1968:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1969:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1970:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         activated.
1971:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1972:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1973:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1974:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1975:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1976:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1977:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1978:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1979:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1980:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1981:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1982:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1983:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1984:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1985:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1986:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1987:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1988:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1989:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
1990:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1991:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1992:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1993:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1994:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
1995:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1996:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1997:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1998:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
1999:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2000:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2001:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2002:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2003:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2004:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2005:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
2006:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
2007:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2008:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2009:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
2010:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2011:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2012:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2013:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
2014:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
2015:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2016:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
2017:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
2018:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
2019:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
2020:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
2021:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
2022:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2023:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2024:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2025:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2026:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2027:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
2028:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2029:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2030:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2031:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2032:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2033:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
2034:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
2035:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2036:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2037:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
2038:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
2039:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
2040:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
2041:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2042:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2043:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
2044:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
2045:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
2046:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
2047:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2048:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2049:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
2050:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2051:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2052:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
2053:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
2054:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
2055:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2056:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2057:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
2058:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
2059:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
2060:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2061:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2062:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2063:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2064:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Subseconds value.
2065:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
2066:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Subseconds value.
2067:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2068:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2069:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2070:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
2071:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
2072:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2073:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2074:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2075:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2076:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2077:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2078:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2079:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2080:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2081:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2082:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2083:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Tampers configuration functions
2084:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2085:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2086:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2087:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2088:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2089:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2090:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2091:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2092:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2093:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2094:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2095:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2096:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2097:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2098:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2099:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2100:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2101:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2102:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2103:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2104:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2105:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2106:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2107:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2108:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2109:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
2110:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
2111:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2112:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
2113:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2114:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2115:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
2116:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2117:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
2118:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2119:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2120:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2121:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2122:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2123:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2124:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2125:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2126:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2127:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2128:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2129:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2130:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2131:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2132:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2133:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2134:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2135:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2136:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2137:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2138:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
2139:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2140:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2141:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2142:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2143:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
2144:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2145:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2146:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2147:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2148:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2149:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2150:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2151:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2152:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2153:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2154:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2155:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2156:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2157:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2158:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2159:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2160:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2161:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2162:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2163:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2164:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2165:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2166:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
2167:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2168:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2169:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
2170:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2171:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2172:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2173:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2174:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2175:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2176:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2177:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2178:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2179:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2180:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2181:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2182:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2183:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2184:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2185:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2186:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2187:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2188:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2189:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2190:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2191:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2192:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2193:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2194:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2195:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2196:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2197:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2198:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2199:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2200:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
2201:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2202:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2203:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
2204:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2205:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2206:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2207:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2208:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2209:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2210:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2211:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are pre-charged before sampling durin
2212:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are pre-charged before sampling durin
2213:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling durin
2214:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling durin
2215:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2216:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2217:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2218:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2219:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2220:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2221:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2222:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2223:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
2224:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2225:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2226:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
2227:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2228:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2229:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2230:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2231:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2232:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is reset.   
2233:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2234:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2235:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2236:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2237:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2238:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2239:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2240:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2241:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2242:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2243:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2244:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2245:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
2246:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2247:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2248:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2249:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2250:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
2251:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2252:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2253:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2254:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2255:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2256:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2257:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2258:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2259:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2260:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2261:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2262:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2263:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2264:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2265:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
2266:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2267:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2268:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
2269:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2270:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2271:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2272:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2273:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
2274:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
2275:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2276:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2277:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2278:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2279:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2280:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2281:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2282:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2283:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2284:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2285:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2286:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Backup Data Registers configuration functions 
2287:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2288:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2289:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2290:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2291:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2292:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2293:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2294:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2295:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2296:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2297:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.
2298:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2299:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2300:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2301:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2302:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2303:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2304:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2305:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2306:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2307:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2308:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2309:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2310:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2311:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2312:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
2313:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2314:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2315:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2316:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2317:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2318:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2319:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2320:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2321:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2322:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2323:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2324:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2325:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2326:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2327:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2328:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2329:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2330:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2331:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2332:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2333:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
2334:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2335:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2336:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2337:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2338:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2339:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2340:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2341:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2342:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *           configuration functions  
2343:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2344:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2345:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2346:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration 
2347:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   functions 
2348:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2349:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2350:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2351:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2352:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2353:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2354:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2355:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2356:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2357:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2358:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
2359:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
2360:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2361:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2362:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2363:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2364:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2365:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2366:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2367:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
2368:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
2369:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2370:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2371:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2372:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2373:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2374:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2375:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2376:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2377:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2378:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2379:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2380:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2381:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2382:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2383:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2384:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
2385:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
2386:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2387:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2388:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2389:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2390:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2391:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2392:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2393:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2394:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2395:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2396:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2397:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2398:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2399:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2400:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2401:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2402:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2403:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
2404:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
2405:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2406:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2407:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2408:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2409:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2410:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2411:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2412:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2413:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2414:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2415:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2416:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Shift control synchronisation functions
2417:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2418:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2419:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2420:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2421:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2422:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2423:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2424:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2425:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2426:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2427:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2428:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2429:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2430:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2431:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2432:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2433:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2434:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2435:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
2436:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2437:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2438:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
2439:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
2440:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2441:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2442:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2443:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2444:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2445:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2446:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2447:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2448:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2449:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2450:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
2451:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2452:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2453:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
2454:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2455:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       shpfcount++;
2456:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2457:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2458:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2459:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2460:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
2461:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2462:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2463:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
2464:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2465:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2466:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
2467:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
2468:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
2469:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2470:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
2471:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2472:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
2473:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2474:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
2475:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2476:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2477:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
2478:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2479:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
2480:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2481:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2482:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2483:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2484:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
2485:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2486:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2487:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2488:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
2489:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2490:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
2491:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2492:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2493:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2494:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2495:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2496:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2497:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2498:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2499:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2500:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2501:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2502:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Interrupts and flags management functions
2503:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2504:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  All RTC interrupts are connected to the EXTI controller.
2505:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2506:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Alarm interrupt, the following sequence is required:
2507:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
2508:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2509:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
2510:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2511:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2512:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2513:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2514:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Wakeup interrupt, the following sequence is required:
2515:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 22 in interrupt mode and select the rising 
2516:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2517:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_WKUP IRQ channel in the NVIC using the NVIC_Init()
2518:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2519:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate the RTC wakeup timer event using the 
2520:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
2521:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2522:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Tamper interrupt, the following sequence is required:
2523:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2524:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2525:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2526:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2527:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC tamper event using the 
2528:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2529:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2530:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC TimeStamp interrupt, the following sequence is required:
2531:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2532:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2533:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2534:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2535:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC time-stamp event using the 
2536:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TimeStampCmd() functions.
2537:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2538:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2539:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2540:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2541:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2542:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2543:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2544:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2545:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2546:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2547:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2548:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2549:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2550:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2551:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2552:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2553:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2554:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2555:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2556:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2557:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2558:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2559:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2560:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2561:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2562:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2563:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2564:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2566:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2568:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
2569:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2570:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
2571:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2572:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2573:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2574:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2575:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
2576:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2577:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
2578:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2579:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2580:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
2581:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2582:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2583:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2584:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2585:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2586:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2587:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RECALPF: RECALPF event flag.
2588:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2589:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2590:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2591:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2592:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2593:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2594:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2595:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2596:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2597:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_SHPF: Shift operation pending flag.
2598:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2599:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2600:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2601:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2602:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2603:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2604:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2605:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
2606:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2607:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2608:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2609:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2610:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2611:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2612:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
2613:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2614:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2615:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
2616:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2617:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
2618:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2619:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2620:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2621:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
2622:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2623:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
2624:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2625:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2626:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2627:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2628:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2629:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2630:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2631:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2632:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2633:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2634:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2635:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2636:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2637:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2638:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2639:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2640:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2641:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2642:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2643:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2644:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2645:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
2646:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2647:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2648:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2649:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2650:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2651:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2652:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2653:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2654:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2655:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2656:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2657:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2658:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2659:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2660:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2661:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
2662:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
2663:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2664:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2665:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2666:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2667:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2668:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
2669:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2670:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2671:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
2672:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2673:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2674:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
2675:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2676:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2677:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
2678:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2679:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
2680:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2681:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2682:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2683:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
2684:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2685:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
2686:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2687:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2688:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2689:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2690:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2691:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2692:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2693:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2694:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2695:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2696:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2697:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2698:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2699:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2700:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2701:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2702:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2703:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2704:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2705:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2706:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2707:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
2708:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2709:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2710:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
2711:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2712:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2713:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2714:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2715:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2716:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2717:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2718:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2719:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2720:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2721:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2722:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2723:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2724:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
2725:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 830              		.loc 1 2726 0
 831 0016 0022     		movs	r2, #0
 832 0018 092B     		cmp	r3, #9
 833 001a 07D9     		bls	.L153
 834              	.LVL83:
 835              	.L137:
2727:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
2729:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 836              		.loc 1 2729 0
 837 001c 0A3B     		subs	r3, r3, #10
2728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 838              		.loc 1 2728 0
 839 001e 0132     		adds	r2, r2, #1
 840              		.loc 1 2729 0
 841 0020 DBB2     		uxtb	r3, r3
2728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 842              		.loc 1 2728 0
 843 0022 D2B2     		uxtb	r2, r2
 844              	.LVL84:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 845              		.loc 1 2726 0
 846 0024 092B     		cmp	r3, #9
 847 0026 F9D8     		bhi	.L137
 848 0028 1201     		lsls	r2, r2, #4
 849              	.LVL85:
 850 002a D2B2     		uxtb	r2, r2
 851              	.LVL86:
 852              	.L153:
 853              	.LBE133:
 854              	.LBE132:
 814:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 855              		.loc 1 814 0
 856 002c 4878     		ldrb	r0, [r1, #1]	@ zero_extendqisi2
 857              	.LVL87:
 813:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 858              		.loc 1 813 0
 859 002e 1343     		orrs	r3, r3, r2
 860 0030 1B04     		lsls	r3, r3, #16
 861              	.LBB134:
 862              	.LBB135:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 863              		.loc 1 2726 0
 864 0032 0928     		cmp	r0, #9
 865 0034 40F28580 		bls	.L154
 866 0038 0022     		movs	r2, #0
 867              	.LVL88:
 868              	.L139:
 869              		.loc 1 2729 0
 870 003a 0A38     		subs	r0, r0, #10
2728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 871              		.loc 1 2728 0
 872 003c 0132     		adds	r2, r2, #1
 873              		.loc 1 2729 0
 874 003e C0B2     		uxtb	r0, r0
2728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 875              		.loc 1 2728 0
 876 0040 D2B2     		uxtb	r2, r2
 877              	.LVL89:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 878              		.loc 1 2726 0
 879 0042 0928     		cmp	r0, #9
 880 0044 F9D8     		bhi	.L139
 881 0046 1201     		lsls	r2, r2, #4
 882              	.LVL90:
 883 0048 D5B2     		uxtb	r5, r2
 884              	.LVL91:
 885              	.L138:
 886              	.LBE135:
 887              	.LBE134:
 815:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 888              		.loc 1 815 0
 889 004a 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 890              	.LVL92:
 814:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 891              		.loc 1 814 0
 892 004c 2843     		orrs	r0, r0, r5
 893 004e 0002     		lsls	r0, r0, #8
 894              	.LBB137:
 895              	.LBB138:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 896              		.loc 1 2726 0
 897 0050 0021     		movs	r1, #0
 898              	.LVL93:
 899 0052 092A     		cmp	r2, #9
 900 0054 07D9     		bls	.L140
 901              	.LVL94:
 902              	.L141:
 903              		.loc 1 2729 0
 904 0056 0A3A     		subs	r2, r2, #10
2728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 905              		.loc 1 2728 0
 906 0058 0131     		adds	r1, r1, #1
 907              		.loc 1 2729 0
 908 005a D2B2     		uxtb	r2, r2
2728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 909              		.loc 1 2728 0
 910 005c C9B2     		uxtb	r1, r1
 911              	.LVL95:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 912              		.loc 1 2726 0
 913 005e 092A     		cmp	r2, #9
 914 0060 F9D8     		bhi	.L141
 915 0062 0901     		lsls	r1, r1, #4
 916              	.LVL96:
 917 0064 C9B2     		uxtb	r1, r1
 918              	.LVL97:
 919              	.L140:
 920              	.LBE138:
 921              	.LBE137:
 813:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 922              		.loc 1 813 0
 923 0066 1C43     		orrs	r4, r4, r3
 814:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 924              		.loc 1 814 0
 925 0068 0443     		orrs	r4, r4, r0
 815:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 926              		.loc 1 815 0
 927 006a 0A43     		orrs	r2, r2, r1
 813:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 928              		.loc 1 813 0
 929 006c 2243     		orrs	r2, r2, r4
 930              	.LVL98:
 931 006e 0CE0     		b	.L152
 932              	.LVL99:
 933              	.L132:
 788:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 934              		.loc 1 788 0
 935 0070 9A68     		ldr	r2, [r3, #8]
 936 0072 12F04002 		ands	r2, r2, #64
 937 0076 2CD1     		bne	.L135
 796:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 938              		.loc 1 796 0
 939 0078 CA70     		strb	r2, [r1, #3]
 940              	.L136:
 807:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 941              		.loc 1 807 0
 942 007a 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 806:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 943              		.loc 1 806 0
 944 007c 0878     		ldrb	r0, [r1, #0]	@ zero_extendqisi2
 945              	.LVL100:
 808:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 946              		.loc 1 808 0
 947 007e 8978     		ldrb	r1, [r1, #2]	@ zero_extendqisi2
 948              	.LVL101:
 807:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 949              		.loc 1 807 0
 950 0080 1B02     		lsls	r3, r3, #8
 806:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 951              		.loc 1 806 0
 952 0082 43EA0043 		orr	r3, r3, r0, lsl #16
 807:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 953              		.loc 1 807 0
 954 0086 0B43     		orrs	r3, r3, r1
 806:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 955              		.loc 1 806 0
 956 0088 1A43     		orrs	r2, r2, r3
 957              	.LVL102:
 958              	.L152:
 820:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 959              		.loc 1 820 0
 960 008a 2F48     		ldr	r0, .L181
 961 008c CA23     		movs	r3, #202
 962 008e 4362     		str	r3, [r0, #36]
 821:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 963              		.loc 1 821 0
 964 0090 5323     		movs	r3, #83
 965 0092 4362     		str	r3, [r0, #36]
 966              	.LBB139:
 967              	.LBB140:
 552:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 968              		.loc 1 552 0
 969 0094 0023     		movs	r3, #0
 970 0096 0093     		str	r3, [sp, #0]
 971              	.LVL103:
 557:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 972              		.loc 1 557 0
 973 0098 C368     		ldr	r3, [r0, #12]
 974 009a 5906     		lsls	r1, r3, #25
 975 009c 1FD4     		bmi	.L147
 560:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 976              		.loc 1 560 0
 977 009e 4FF0FF33 		mov	r3, #-1
 978 00a2 C360     		str	r3, [r0, #12]
 979 00a4 00E0     		b	.L146
 980              	.LVL104:
 981              	.L178:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 982              		.loc 1 567 0
 983 00a6 49B9     		cbnz	r1, .L145
 984              	.LVL105:
 985              	.L146:
 565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 986              		.loc 1 565 0
 987 00a8 C168     		ldr	r1, [r0, #12]
 566:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 988              		.loc 1 566 0
 989 00aa 009B     		ldr	r3, [sp, #0]
 990 00ac 0133     		adds	r3, r3, #1
 991              	.LVL106:
 992 00ae 0093     		str	r3, [sp, #0]
 993              	.LVL107:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 994              		.loc 1 567 0
 995 00b0 009B     		ldr	r3, [sp, #0]
 996              	.LVL108:
 565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 997              		.loc 1 565 0
 998 00b2 01F04001 		and	r1, r1, #64
 999              	.LVL109:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 1000              		.loc 1 567 0
 1001 00b6 B3F5803F 		cmp	r3, #65536
 1002 00ba F4D1     		bne	.L178
 1003              	.L145:
 1004              	.LBB141:
 1005              	.LBB142:
 569:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 1006              		.loc 1 569 0
 1007 00bc 224B     		ldr	r3, .L181
 1008 00be D868     		ldr	r0, [r3, #12]
 1009              	.LVL110:
 1010              	.LBE142:
 1011              	.LBE141:
 1012              	.LBE140:
 1013              	.LBE139:
 824:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1014              		.loc 1 824 0
 1015 00c0 C0F38010 		ubfx	r0, r0, #6, #1
 1016              	.LVL111:
 1017 00c4 58B9     		cbnz	r0, .L147
 1018              	.LVL112:
 1019              	.L144:
 854:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1020              		.loc 1 854 0
 1021 00c6 FF22     		movs	r2, #255
 1022 00c8 1F4B     		ldr	r3, .L181
 1023 00ca 5A62     		str	r2, [r3, #36]
 857:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1024              		.loc 1 857 0
 1025 00cc 02B0     		add	sp, sp, #8
 1026 00ce 30BC     		pop	{r4, r5}
 1027 00d0 7047     		bx	lr
 1028              	.LVL113:
 1029              	.L135:
 1030 00d2 CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 1031 00d4 1204     		lsls	r2, r2, #16
 1032 00d6 D0E7     		b	.L136
 1033              	.L133:
 1034 00d8 CC78     		ldrb	r4, [r1, #3]	@ zero_extendqisi2
 1035 00da 2404     		lsls	r4, r4, #16
 1036 00dc 9AE7     		b	.L134
 1037              	.LVL114:
 1038              	.L147:
 831:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 1039              		.loc 1 831 0
 1040 00de 1A4B     		ldr	r3, .L181
 1041 00e0 02F07F32 		and	r2, r2, #2139062143
 1042              	.LVL115:
 1043 00e4 22F0FE42 		bic	r2, r2, #2130706432
 1044 00e8 1A60     		str	r2, [r3, #0]
 1045              	.LBB143:
 1046              	.LBB144:
 598:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 1047              		.loc 1 598 0
 1048 00ea DA68     		ldr	r2, [r3, #12]
 1049 00ec 22F08002 		bic	r2, r2, #128
 1050 00f0 DA60     		str	r2, [r3, #12]
 1051              	.LBE144:
 1052              	.LBE143:
 837:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 1053              		.loc 1 837 0
 1054 00f2 9A68     		ldr	r2, [r3, #8]
 1055 00f4 12F02002 		ands	r2, r2, #32
 1056 00f8 01D0     		beq	.L143
 1057              	.LBB145:
 1058              	.LBB146:
 845:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 1059              		.loc 1 845 0
 1060 00fa 0120     		movs	r0, #1
 1061 00fc E3E7     		b	.L144
 1062              	.L143:
 619:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 1063              		.loc 1 619 0
 1064 00fe 0192     		str	r2, [sp, #4]
 1065              	.LVL116:
 624:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1066              		.loc 1 624 0
 1067 0100 CA22     		movs	r2, #202
 1068 0102 5A62     		str	r2, [r3, #36]
 625:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1069              		.loc 1 625 0
 1070 0104 5322     		movs	r2, #83
 1071 0106 5A62     		str	r2, [r3, #36]
 628:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 1072              		.loc 1 628 0
 1073 0108 DA68     		ldr	r2, [r3, #12]
 1074 010a 22F0A002 		bic	r2, r2, #160
 1075 010e DA60     		str	r2, [r3, #12]
 633:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 1076              		.loc 1 633 0
 1077 0110 1946     		mov	r1, r3
 1078 0112 00E0     		b	.L149
 1079              	.LVL117:
 1080              	.L179:
 635:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 1081              		.loc 1 635 0
 1082 0114 4AB9     		cbnz	r2, .L148
 1083              	.LVL118:
 1084              	.L149:
 633:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 1085              		.loc 1 633 0
 1086 0116 CA68     		ldr	r2, [r1, #12]
 634:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 1087              		.loc 1 634 0
 1088 0118 019B     		ldr	r3, [sp, #4]
 1089 011a 0133     		adds	r3, r3, #1
 1090              	.LVL119:
 1091 011c 0193     		str	r3, [sp, #4]
 1092              	.LVL120:
 635:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 1093              		.loc 1 635 0
 1094 011e 019B     		ldr	r3, [sp, #4]
 1095              	.LVL121:
 633:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 1096              		.loc 1 633 0
 1097 0120 02F02002 		and	r2, r2, #32
 1098              	.LVL122:
 635:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 1099              		.loc 1 635 0
 1100 0124 B3F5003F 		cmp	r3, #131072
 1101 0128 F4D1     		bne	.L179
 1102              	.L148:
 637:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 1103              		.loc 1 637 0
 1104 012a 074B     		ldr	r3, .L181
 1105 012c D868     		ldr	r0, [r3, #12]
 1106 012e 10F02000 		ands	r0, r0, #32
 1107 0132 02D1     		bne	.L180
 647:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1108              		.loc 1 647 0
 1109 0134 FF22     		movs	r2, #255
 1110              	.LVL123:
 1111 0136 5A62     		str	r2, [r3, #36]
 1112 0138 C5E7     		b	.L144
 1113              	.LVL124:
 1114              	.L180:
 1115 013a FF22     		movs	r2, #255
 1116              	.LVL125:
 1117 013c 5A62     		str	r2, [r3, #36]
 845:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 1118              		.loc 1 845 0
 1119 013e 0120     		movs	r0, #1
 1120 0140 C1E7     		b	.L144
 1121              	.LVL126:
 1122              	.L154:
 1123              	.LBE146:
 1124              	.LBE145:
 1125              	.LBB147:
 1126              	.LBB136:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 1127              		.loc 1 2726 0
 1128 0142 0025     		movs	r5, #0
 1129 0144 81E7     		b	.L138
 1130              	.L182:
 1131 0146 00BF     		.align	2
 1132              	.L181:
 1133 0148 00280040 		.word	1073752064
 1134              	.LBE136:
 1135              	.LBE147:
 1136              		.cfi_endproc
 1137              	.LFE119:
 1139              		.section	.text.RTC_TimeStructInit,"ax",%progbits
 1140              		.align	2
 1141              		.global	RTC_TimeStructInit
 1142              		.thumb
 1143              		.thumb_func
 1145              	RTC_TimeStructInit:
 1146              	.LFB120:
 867:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1147              		.loc 1 867 0
 1148              		.cfi_startproc
 1149              		@ args = 0, pretend = 0, frame = 0
 1150              		@ frame_needed = 0, uses_anonymous_args = 0
 1151              		@ link register save eliminated.
 1152              	.LVL127:
 869:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 1153              		.loc 1 869 0
 1154 0000 0023     		movs	r3, #0
 1155 0002 C370     		strb	r3, [r0, #3]
 870:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 1156              		.loc 1 870 0
 1157 0004 0370     		strb	r3, [r0, #0]
 871:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 1158              		.loc 1 871 0
 1159 0006 4370     		strb	r3, [r0, #1]
 872:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 1160              		.loc 1 872 0
 1161 0008 8370     		strb	r3, [r0, #2]
 1162 000a 7047     		bx	lr
 1163              		.cfi_endproc
 1164              	.LFE120:
 1166              		.section	.text.RTC_GetTime,"ax",%progbits
 1167              		.align	2
 1168              		.global	RTC_GetTime
 1169              		.thumb
 1170              		.thumb_func
 1172              	RTC_GetTime:
 1173              	.LFB121:
 886:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1174              		.loc 1 886 0
 1175              		.cfi_startproc
 1176              		@ args = 0, pretend = 0, frame = 0
 1177              		@ frame_needed = 0, uses_anonymous_args = 0
 1178              		@ link register save eliminated.
 1179              	.LVL128:
 1180 0000 F0B4     		push	{r4, r5, r6, r7}
 1181              	.LCFI7:
 1182              		.cfi_def_cfa_offset 16
 1183              		.cfi_offset 4, -16
 1184              		.cfi_offset 5, -12
 1185              		.cfi_offset 6, -8
 1186              		.cfi_offset 7, -4
 1187              	.LVL129:
 893:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 1188              		.loc 1 893 0
 1189 0002 174B     		ldr	r3, .L186
 1190 0004 1B68     		ldr	r3, [r3, #0]
 1191              	.LVL130:
 896:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 1192              		.loc 1 896 0
 1193 0006 C3F30544 		ubfx	r4, r3, #16, #6
 897:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1194              		.loc 1 897 0
 1195 000a C3F30622 		ubfx	r2, r3, #8, #7
 899:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1196              		.loc 1 899 0
 1197 000e 03F4800C 		and	ip, r3, #4194304
 896:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 1198              		.loc 1 896 0
 1199 0012 E7B2     		uxtb	r7, r4
 897:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1200              		.loc 1 897 0
 1201 0014 D6B2     		uxtb	r6, r2
 898:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1202              		.loc 1 898 0
 1203 0016 03F07F05 		and	r5, r3, #127
 899:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1204              		.loc 1 899 0
 1205 001a 4FEA1C4C 		lsr	ip, ip, #16
 896:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 1206              		.loc 1 896 0
 1207 001e 0F70     		strb	r7, [r1, #0]
 897:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1208              		.loc 1 897 0
 1209 0020 4E70     		strb	r6, [r1, #1]
 898:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1210              		.loc 1 898 0
 1211 0022 8D70     		strb	r5, [r1, #2]
 899:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1212              		.loc 1 899 0
 1213 0024 81F803C0 		strb	ip, [r1, #3]
 902:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1214              		.loc 1 902 0
 1215 0028 B8B9     		cbnz	r0, .L184
 1216              	.LVL131:
 1217              	.LBB148:
 1218              	.LBB149:
2730:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2731:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2732:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
2733:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2734:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2735:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2736:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2737:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2738:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted word
2739:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2740:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2741:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2742:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
2743:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 1219              		.loc 1 2743 0
 1220 002a 3F09     		lsrs	r7, r7, #4
 1221              	.LVL132:
 1222              	.LBE149:
 1223              	.LBE148:
 1224              	.LBB152:
 1225              	.LBB153:
 1226 002c 3609     		lsrs	r6, r6, #4
 1227              	.LBE153:
 1228              	.LBE152:
 1229              	.LBB156:
 1230              	.LBB157:
 1231 002e 2D09     		lsrs	r5, r5, #4
 1232              	.LBE157:
 1233              	.LBE156:
 1234              	.LBB160:
 1235              	.LBB150:
 1236 0030 07EB8707 		add	r7, r7, r7, lsl #2
2744:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 1237              		.loc 1 2744 0
 1238 0034 04F00F04 		and	r4, r4, #15
 1239              	.LVL133:
 1240              	.LBE150:
 1241              	.LBE160:
 1242              	.LBB161:
 1243              	.LBB154:
2743:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 1244              		.loc 1 2743 0
 1245 0038 06EB8606 		add	r6, r6, r6, lsl #2
 1246              		.loc 1 2744 0
 1247 003c 02F00F02 		and	r2, r2, #15
 1248              	.LBE154:
 1249              	.LBE161:
 1250              	.LBB162:
 1251              	.LBB158:
2743:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 1252              		.loc 1 2743 0
 1253 0040 05EB8505 		add	r5, r5, r5, lsl #2
 1254              		.loc 1 2744 0
 1255 0044 03F00F03 		and	r3, r3, #15
 1256              	.LVL134:
 1257              	.LBE158:
 1258              	.LBE162:
 1259              	.LBB163:
 1260              	.LBB151:
 1261 0048 04EB4707 		add	r7, r4, r7, lsl #1
 1262              	.LBE151:
 1263              	.LBE163:
 1264              	.LBB164:
 1265              	.LBB155:
 1266 004c 02EB4606 		add	r6, r2, r6, lsl #1
 1267              	.LBE155:
 1268              	.LBE164:
 1269              	.LBB165:
 1270              	.LBB159:
 1271 0050 03EB4505 		add	r5, r3, r5, lsl #1
 1272              	.LBE159:
 1273              	.LBE165:
 905:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 1274              		.loc 1 905 0
 1275 0054 0F70     		strb	r7, [r1, #0]
 1276              	.LVL135:
 906:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1277              		.loc 1 906 0
 1278 0056 4E70     		strb	r6, [r1, #1]
 1279              	.LVL136:
 907:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 1280              		.loc 1 907 0
 1281 0058 8D70     		strb	r5, [r1, #2]
 1282              	.L184:
 909:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1283              		.loc 1 909 0
 1284 005a F0BC     		pop	{r4, r5, r6, r7}
 1285 005c 7047     		bx	lr
 1286              	.L187:
 1287 005e 00BF     		.align	2
 1288              	.L186:
 1289 0060 00280040 		.word	1073752064
 1290              		.cfi_endproc
 1291              	.LFE121:
 1293              		.section	.text.RTC_GetSubSecond,"ax",%progbits
 1294              		.align	2
 1295              		.global	RTC_GetSubSecond
 1296              		.thumb
 1297              		.thumb_func
 1299              	RTC_GetSubSecond:
 1300              	.LFB122:
 919:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1301              		.loc 1 919 0
 1302              		.cfi_startproc
 1303              		@ args = 0, pretend = 0, frame = 0
 1304              		@ frame_needed = 0, uses_anonymous_args = 0
 1305              		@ link register save eliminated.
 1306              	.LVL137:
 923:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 1307              		.loc 1 923 0
 1308 0000 014B     		ldr	r3, .L189
 1309 0002 986A     		ldr	r0, [r3, #40]
 1310              	.LVL138:
 926:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 1311              		.loc 1 926 0
 1312 0004 5B68     		ldr	r3, [r3, #4]
 929:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1313              		.loc 1 929 0
 1314 0006 7047     		bx	lr
 1315              	.L190:
 1316              		.align	2
 1317              	.L189:
 1318 0008 00280040 		.word	1073752064
 1319              		.cfi_endproc
 1320              	.LFE122:
 1322              		.section	.text.RTC_SetDate,"ax",%progbits
 1323              		.align	2
 1324              		.global	RTC_SetDate
 1325              		.thumb
 1326              		.thumb_func
 1328              	RTC_SetDate:
 1329              	.LFB123:
 944:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1330              		.loc 1 944 0
 1331              		.cfi_startproc
 1332              		@ args = 0, pretend = 0, frame = 8
 1333              		@ frame_needed = 0, uses_anonymous_args = 0
 1334              		@ link register save eliminated.
 1335              	.LVL139:
 1336 0000 30B4     		push	{r4, r5}
 1337              	.LCFI8:
 1338              		.cfi_def_cfa_offset 8
 1339              		.cfi_offset 4, -8
 1340              		.cfi_offset 5, -4
 1341 0002 82B0     		sub	sp, sp, #8
 1342              	.LCFI9:
 1343              		.cfi_def_cfa_offset 16
 1344              	.LVL140:
 951:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 1345              		.loc 1 951 0
 1346 0004 0028     		cmp	r0, #0
 1347 0006 37D1     		bne	.L192
 951:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 1348              		.loc 1 951 0 is_stmt 0 discriminator 1
 1349 0008 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 1350 000a 03F01002 		and	r2, r3, #16
 1351 000e D2B2     		uxtb	r2, r2
 1352 0010 22B1     		cbz	r2, .L193
 953:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 1353              		.loc 1 953 0 is_stmt 1
 1354 0012 03F0EF03 		and	r3, r3, #239
 1355 0016 0A33     		adds	r3, r3, #10
 1356 0018 DBB2     		uxtb	r3, r3
 1357 001a 4B70     		strb	r3, [r1, #1]
 1358              	.L193:
 981:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1359              		.loc 1 981 0
 1360 001c CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 1361              	.LVL141:
 1362              	.LBB180:
 1363              	.LBB181:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 1364              		.loc 1 2726 0
 1365 001e 0020     		movs	r0, #0
 1366              	.LVL142:
 1367 0020 092A     		cmp	r2, #9
 1368 0022 07D9     		bls	.L209
 1369              	.LVL143:
 1370              	.L194:
2729:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 1371              		.loc 1 2729 0
 1372 0024 0A3A     		subs	r2, r2, #10
2728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 1373              		.loc 1 2728 0
 1374 0026 0130     		adds	r0, r0, #1
2729:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 1375              		.loc 1 2729 0
 1376 0028 D2B2     		uxtb	r2, r2
2728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 1377              		.loc 1 2728 0
 1378 002a C0B2     		uxtb	r0, r0
 1379              	.LVL144:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 1380              		.loc 1 2726 0
 1381 002c 092A     		cmp	r2, #9
 1382 002e F9D8     		bhi	.L194
 1383 0030 0001     		lsls	r0, r0, #4
 1384              	.LVL145:
 1385 0032 C0B2     		uxtb	r0, r0
 1386              	.LVL146:
 1387              	.L209:
 1388              	.LBE181:
 1389              	.LBE180:
 981:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1390              		.loc 1 981 0
 1391 0034 0243     		orrs	r2, r2, r0
 1392 0036 1204     		lsls	r2, r2, #16
 1393              	.LVL147:
 1394              	.LBB182:
 1395              	.LBB183:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 1396              		.loc 1 2726 0
 1397 0038 092B     		cmp	r3, #9
 1398 003a 7DD9     		bls	.L211
 1399 003c 0020     		movs	r0, #0
 1400              	.LVL148:
 1401              	.L196:
2729:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 1402              		.loc 1 2729 0
 1403 003e 0A3B     		subs	r3, r3, #10
2728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 1404              		.loc 1 2728 0
 1405 0040 0130     		adds	r0, r0, #1
2729:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 1406              		.loc 1 2729 0
 1407 0042 DBB2     		uxtb	r3, r3
2728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 1408              		.loc 1 2728 0
 1409 0044 C0B2     		uxtb	r0, r0
 1410              	.LVL149:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 1411              		.loc 1 2726 0
 1412 0046 092B     		cmp	r3, #9
 1413 0048 F9D8     		bhi	.L196
 1414 004a 0001     		lsls	r0, r0, #4
 1415              	.LVL150:
 1416 004c C4B2     		uxtb	r4, r0
 1417              	.LVL151:
 1418              	.L195:
 1419              	.LBE183:
 1420              	.LBE182:
 983:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1421              		.loc 1 983 0
 1422 004e 8878     		ldrb	r0, [r1, #2]	@ zero_extendqisi2
 1423              	.LVL152:
 982:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1424              		.loc 1 982 0
 1425 0050 2343     		orrs	r3, r3, r4
 1426 0052 1B02     		lsls	r3, r3, #8
 1427              	.LBB185:
 1428              	.LBB186:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 1429              		.loc 1 2726 0
 1430 0054 0928     		cmp	r0, #9
 1431 0056 71D9     		bls	.L212
 1432 0058 0024     		movs	r4, #0
 1433              	.LVL153:
 1434              	.L198:
2729:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 1435              		.loc 1 2729 0
 1436 005a 0A38     		subs	r0, r0, #10
2728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 1437              		.loc 1 2728 0
 1438 005c 0134     		adds	r4, r4, #1
2729:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 1439              		.loc 1 2729 0
 1440 005e C0B2     		uxtb	r0, r0
2728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 1441              		.loc 1 2728 0
 1442 0060 E4B2     		uxtb	r4, r4
 1443              	.LVL154:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 1444              		.loc 1 2726 0
 1445 0062 0928     		cmp	r0, #9
 1446 0064 F9D8     		bhi	.L198
 1447 0066 2401     		lsls	r4, r4, #4
 1448              	.LVL155:
 1449 0068 E5B2     		uxtb	r5, r4
 1450              	.LVL156:
 1451              	.L197:
 1452              	.LBE186:
 1453              	.LBE185:
 984:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1454              		.loc 1 984 0
 1455 006a 0C78     		ldrb	r4, [r1, #0]	@ zero_extendqisi2
 981:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1456              		.loc 1 981 0
 1457 006c 42EA4434 		orr	r4, r2, r4, lsl #13
 982:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1458              		.loc 1 982 0
 1459 0070 1C43     		orrs	r4, r4, r3
 983:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1460              		.loc 1 983 0
 1461 0072 2843     		orrs	r0, r0, r5
 981:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1462              		.loc 1 981 0
 1463 0074 0443     		orrs	r4, r4, r0
 1464              	.LVL157:
 1465 0076 09E0     		b	.L210
 1466              	.LVL158:
 1467              	.L192:
 975:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1468              		.loc 1 975 0
 1469 0078 4C78     		ldrb	r4, [r1, #1]	@ zero_extendqisi2
 974:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1470              		.loc 1 974 0
 1471 007a CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 976:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1472              		.loc 1 976 0
 1473 007c 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
 977:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 1474              		.loc 1 977 0
 1475 007e 0878     		ldrb	r0, [r1, #0]	@ zero_extendqisi2
 1476              	.LVL159:
 975:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1477              		.loc 1 975 0
 1478 0080 2402     		lsls	r4, r4, #8
 974:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1479              		.loc 1 974 0
 1480 0082 44EA0244 		orr	r4, r4, r2, lsl #16
 975:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1481              		.loc 1 975 0
 1482 0086 1C43     		orrs	r4, r4, r3
 974:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1483              		.loc 1 974 0
 1484 0088 44EA4034 		orr	r4, r4, r0, lsl #13
 1485              	.LVL160:
 1486              	.L210:
 988:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1487              		.loc 1 988 0
 1488 008c 2C49     		ldr	r1, .L241
 1489              	.LVL161:
 1490 008e CA23     		movs	r3, #202
 1491 0090 4B62     		str	r3, [r1, #36]
 989:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1492              		.loc 1 989 0
 1493 0092 5323     		movs	r3, #83
 1494 0094 4B62     		str	r3, [r1, #36]
 1495              	.LBB188:
 1496              	.LBB189:
 552:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 1497              		.loc 1 552 0
 1498 0096 0023     		movs	r3, #0
 1499 0098 0093     		str	r3, [sp, #0]
 1500              	.LVL162:
 557:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 1501              		.loc 1 557 0
 1502 009a CB68     		ldr	r3, [r1, #12]
 1503 009c 5806     		lsls	r0, r3, #25
 1504 009e 19D4     		bmi	.L204
 560:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 1505              		.loc 1 560 0
 1506 00a0 4FF0FF33 		mov	r3, #-1
 1507 00a4 CB60     		str	r3, [r1, #12]
 1508 00a6 00E0     		b	.L203
 1509              	.LVL163:
 1510              	.L238:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 1511              		.loc 1 567 0
 1512 00a8 4AB9     		cbnz	r2, .L202
 1513              	.LVL164:
 1514              	.L203:
 565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 1515              		.loc 1 565 0
 1516 00aa CA68     		ldr	r2, [r1, #12]
 566:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 1517              		.loc 1 566 0
 1518 00ac 009B     		ldr	r3, [sp, #0]
 1519 00ae 0133     		adds	r3, r3, #1
 1520              	.LVL165:
 1521 00b0 0093     		str	r3, [sp, #0]
 1522              	.LVL166:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 1523              		.loc 1 567 0
 1524 00b2 009B     		ldr	r3, [sp, #0]
 1525              	.LVL167:
 565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 1526              		.loc 1 565 0
 1527 00b4 02F04002 		and	r2, r2, #64
 1528              	.LVL168:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 1529              		.loc 1 567 0
 1530 00b8 B3F5803F 		cmp	r3, #65536
 1531 00bc F4D1     		bne	.L238
 1532              	.L202:
 1533              	.LBB190:
 1534              	.LBB191:
 569:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 1535              		.loc 1 569 0
 1536 00be 204B     		ldr	r3, .L241
 1537 00c0 D868     		ldr	r0, [r3, #12]
 1538              	.LVL169:
 1539              	.LBE191:
 1540              	.LBE190:
 1541              	.LBE189:
 1542              	.LBE188:
 992:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1543              		.loc 1 992 0
 1544 00c2 C0F38010 		ubfx	r0, r0, #6, #1
 1545              	.LVL170:
 1546 00c6 28B9     		cbnz	r0, .L204
 1547              	.LVL171:
 1548              	.L201:
1022:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1549              		.loc 1 1022 0
 1550 00c8 FF22     		movs	r2, #255
 1551 00ca 1D4B     		ldr	r3, .L241
 1552 00cc 5A62     		str	r2, [r3, #36]
1025:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1553              		.loc 1 1025 0
 1554 00ce 02B0     		add	sp, sp, #8
 1555 00d0 30BC     		pop	{r4, r5}
 1556 00d2 7047     		bx	lr
 1557              	.LVL172:
 1558              	.L204:
 999:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 1559              		.loc 1 999 0
 1560 00d4 1A4B     		ldr	r3, .L241
 1561 00d6 24F07F44 		bic	r4, r4, #-16777216
 1562              	.LVL173:
 1563 00da 24F0C004 		bic	r4, r4, #192
 1564 00de 5C60     		str	r4, [r3, #4]
 1565              	.LBB192:
 1566              	.LBB193:
 598:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 1567              		.loc 1 598 0
 1568 00e0 DA68     		ldr	r2, [r3, #12]
 1569 00e2 22F08002 		bic	r2, r2, #128
 1570 00e6 DA60     		str	r2, [r3, #12]
 1571              	.LBE193:
 1572              	.LBE192:
1005:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 1573              		.loc 1 1005 0
 1574 00e8 9A68     		ldr	r2, [r3, #8]
 1575 00ea 12F02002 		ands	r2, r2, #32
 1576 00ee 01D0     		beq	.L200
 1577              	.LBB194:
 1578              	.LBB195:
1013:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 1579              		.loc 1 1013 0
 1580 00f0 0120     		movs	r0, #1
 1581 00f2 E9E7     		b	.L201
 1582              	.L200:
 619:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 1583              		.loc 1 619 0
 1584 00f4 0192     		str	r2, [sp, #4]
 1585              	.LVL174:
 624:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1586              		.loc 1 624 0
 1587 00f6 CA22     		movs	r2, #202
 1588 00f8 5A62     		str	r2, [r3, #36]
 625:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1589              		.loc 1 625 0
 1590 00fa 5322     		movs	r2, #83
 1591 00fc 5A62     		str	r2, [r3, #36]
 628:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 1592              		.loc 1 628 0
 1593 00fe DA68     		ldr	r2, [r3, #12]
 1594 0100 22F0A002 		bic	r2, r2, #160
 1595 0104 DA60     		str	r2, [r3, #12]
 633:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 1596              		.loc 1 633 0
 1597 0106 1946     		mov	r1, r3
 1598 0108 00E0     		b	.L206
 1599              	.LVL175:
 1600              	.L239:
 635:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 1601              		.loc 1 635 0
 1602 010a 4AB9     		cbnz	r2, .L205
 1603              	.LVL176:
 1604              	.L206:
 633:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 1605              		.loc 1 633 0
 1606 010c CA68     		ldr	r2, [r1, #12]
 634:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 1607              		.loc 1 634 0
 1608 010e 019B     		ldr	r3, [sp, #4]
 1609 0110 0133     		adds	r3, r3, #1
 1610              	.LVL177:
 1611 0112 0193     		str	r3, [sp, #4]
 1612              	.LVL178:
 635:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 1613              		.loc 1 635 0
 1614 0114 019B     		ldr	r3, [sp, #4]
 1615              	.LVL179:
 633:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 1616              		.loc 1 633 0
 1617 0116 02F02002 		and	r2, r2, #32
 1618              	.LVL180:
 635:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 1619              		.loc 1 635 0
 1620 011a B3F5003F 		cmp	r3, #131072
 1621 011e F4D1     		bne	.L239
 1622              	.L205:
 637:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 1623              		.loc 1 637 0
 1624 0120 074B     		ldr	r3, .L241
 1625 0122 D868     		ldr	r0, [r3, #12]
 1626 0124 10F02000 		ands	r0, r0, #32
 1627 0128 02D1     		bne	.L240
 647:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1628              		.loc 1 647 0
 1629 012a FF22     		movs	r2, #255
 1630              	.LVL181:
 1631 012c 5A62     		str	r2, [r3, #36]
 1632 012e CBE7     		b	.L201
 1633              	.LVL182:
 1634              	.L240:
 1635 0130 FF22     		movs	r2, #255
 1636              	.LVL183:
 1637 0132 5A62     		str	r2, [r3, #36]
1013:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 1638              		.loc 1 1013 0
 1639 0134 0120     		movs	r0, #1
 1640 0136 C7E7     		b	.L201
 1641              	.LVL184:
 1642              	.L211:
 1643              	.LBE195:
 1644              	.LBE194:
 1645              	.LBB196:
 1646              	.LBB184:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 1647              		.loc 1 2726 0
 1648 0138 0024     		movs	r4, #0
 1649 013a 88E7     		b	.L195
 1650              	.LVL185:
 1651              	.L212:
 1652              	.LBE184:
 1653              	.LBE196:
 1654              	.LBB197:
 1655              	.LBB187:
 1656 013c 0025     		movs	r5, #0
 1657 013e 94E7     		b	.L197
 1658              	.L242:
 1659              		.align	2
 1660              	.L241:
 1661 0140 00280040 		.word	1073752064
 1662              	.LBE187:
 1663              	.LBE197:
 1664              		.cfi_endproc
 1665              	.LFE123:
 1667              		.section	.text.RTC_DateStructInit,"ax",%progbits
 1668              		.align	2
 1669              		.global	RTC_DateStructInit
 1670              		.thumb
 1671              		.thumb_func
 1673              	RTC_DateStructInit:
 1674              	.LFB124:
1035:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1675              		.loc 1 1035 0
 1676              		.cfi_startproc
 1677              		@ args = 0, pretend = 0, frame = 0
 1678              		@ frame_needed = 0, uses_anonymous_args = 0
 1679              		@ link register save eliminated.
 1680              	.LVL186:
1037:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 1681              		.loc 1 1037 0
 1682 0000 0123     		movs	r3, #1
 1683 0002 0370     		strb	r3, [r0, #0]
1038:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1684              		.loc 1 1038 0
 1685 0004 8370     		strb	r3, [r0, #2]
1039:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1686              		.loc 1 1039 0
 1687 0006 4370     		strb	r3, [r0, #1]
1040:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1688              		.loc 1 1040 0
 1689 0008 0023     		movs	r3, #0
 1690 000a C370     		strb	r3, [r0, #3]
 1691 000c 7047     		bx	lr
 1692              		.cfi_endproc
 1693              	.LFE124:
 1695 000e 00BF     		.section	.text.RTC_GetDate,"ax",%progbits
 1696              		.align	2
 1697              		.global	RTC_GetDate
 1698              		.thumb
 1699              		.thumb_func
 1701              	RTC_GetDate:
 1702              	.LFB125:
1054:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1703              		.loc 1 1054 0
 1704              		.cfi_startproc
 1705              		@ args = 0, pretend = 0, frame = 0
 1706              		@ frame_needed = 0, uses_anonymous_args = 0
 1707              		@ link register save eliminated.
 1708              	.LVL187:
 1709 0000 F0B4     		push	{r4, r5, r6, r7}
 1710              	.LCFI10:
 1711              		.cfi_def_cfa_offset 16
 1712              		.cfi_offset 4, -16
 1713              		.cfi_offset 5, -12
 1714              		.cfi_offset 6, -8
 1715              		.cfi_offset 7, -4
 1716              	.LVL188:
1061:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1717              		.loc 1 1061 0
 1718 0002 164B     		ldr	r3, .L246
 1719 0004 5B68     		ldr	r3, [r3, #4]
 1720              	.LVL189:
1064:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1721              		.loc 1 1064 0
 1722 0006 C3F30744 		ubfx	r4, r3, #16, #8
1065:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1723              		.loc 1 1065 0
 1724 000a C3F30422 		ubfx	r2, r3, #8, #5
1064:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1725              		.loc 1 1064 0
 1726 000e E6B2     		uxtb	r6, r4
1065:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1727              		.loc 1 1065 0
 1728 0010 D7B2     		uxtb	r7, r2
1066:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1729              		.loc 1 1066 0
 1730 0012 03F03F05 		and	r5, r3, #63
1067:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 1731              		.loc 1 1067 0
 1732 0016 C3F3423C 		ubfx	ip, r3, #13, #3
1064:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1733              		.loc 1 1064 0
 1734 001a CE70     		strb	r6, [r1, #3]
1065:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1735              		.loc 1 1065 0
 1736 001c 4F70     		strb	r7, [r1, #1]
1066:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1737              		.loc 1 1066 0
 1738 001e 8D70     		strb	r5, [r1, #2]
1067:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 1739              		.loc 1 1067 0
 1740 0020 81F800C0 		strb	ip, [r1, #0]
1070:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1741              		.loc 1 1070 0
 1742 0024 B8B9     		cbnz	r0, .L244
 1743              	.LVL190:
 1744              	.LBB198:
 1745              	.LBB199:
2743:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 1746              		.loc 1 2743 0
 1747 0026 3F09     		lsrs	r7, r7, #4
 1748              	.LBE199:
 1749              	.LBE198:
 1750              	.LBB203:
 1751              	.LBB204:
 1752 0028 3609     		lsrs	r6, r6, #4
 1753              	.LVL191:
 1754              	.LBE204:
 1755              	.LBE203:
 1756              	.LBB207:
 1757              	.LBB200:
 1758 002a B800     		lsls	r0, r7, #2
 1759              	.LVL192:
 1760              	.LBE200:
 1761              	.LBE207:
 1762              	.LBB208:
 1763              	.LBB209:
 1764 002c 2D09     		lsrs	r5, r5, #4
 1765              	.LBE209:
 1766              	.LBE208:
 1767              	.LBB212:
 1768              	.LBB205:
 1769 002e 06EB8606 		add	r6, r6, r6, lsl #2
 1770              		.loc 1 2744 0
 1771 0032 04F00F04 		and	r4, r4, #15
 1772              	.LVL193:
 1773              	.LBE205:
 1774              	.LBE212:
 1775              	.LBB213:
 1776              	.LBB201:
2743:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 1777              		.loc 1 2743 0
 1778 0036 C719     		adds	r7, r0, r7
 1779              		.loc 1 2744 0
 1780 0038 02F00F02 		and	r2, r2, #15
 1781              	.LBE201:
 1782              	.LBE213:
 1783              	.LBB214:
 1784              	.LBB210:
2743:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 1785              		.loc 1 2743 0
 1786 003c 05EB8505 		add	r5, r5, r5, lsl #2
 1787              		.loc 1 2744 0
 1788 0040 03F00F03 		and	r3, r3, #15
 1789              	.LVL194:
 1790              	.LBE210:
 1791              	.LBE214:
 1792              	.LBB215:
 1793              	.LBB206:
 1794 0044 04EB4606 		add	r6, r4, r6, lsl #1
 1795              	.LBE206:
 1796              	.LBE215:
 1797              	.LBB216:
 1798              	.LBB202:
 1799 0048 02EB4707 		add	r7, r2, r7, lsl #1
 1800              	.LBE202:
 1801              	.LBE216:
 1802              	.LBB217:
 1803              	.LBB211:
 1804 004c 03EB4505 		add	r5, r3, r5, lsl #1
 1805              	.LBE211:
 1806              	.LBE217:
1073:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 1807              		.loc 1 1073 0
 1808 0050 CE70     		strb	r6, [r1, #3]
 1809              	.LVL195:
1074:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1810              		.loc 1 1074 0
 1811 0052 4F70     		strb	r7, [r1, #1]
 1812              	.LVL196:
1075:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1813              		.loc 1 1075 0
 1814 0054 8D70     		strb	r5, [r1, #2]
 1815              	.L244:
1077:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1816              		.loc 1 1077 0
 1817 0056 F0BC     		pop	{r4, r5, r6, r7}
 1818 0058 7047     		bx	lr
 1819              	.L247:
 1820 005a 00BF     		.align	2
 1821              	.L246:
 1822 005c 00280040 		.word	1073752064
 1823              		.cfi_endproc
 1824              	.LFE125:
 1826              		.section	.text.RTC_SetAlarm,"ax",%progbits
 1827              		.align	2
 1828              		.global	RTC_SetAlarm
 1829              		.thumb
 1830              		.thumb_func
 1832              	RTC_SetAlarm:
 1833              	.LFB126:
1114:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1834              		.loc 1 1114 0
 1835              		.cfi_startproc
 1836              		@ args = 0, pretend = 0, frame = 0
 1837              		@ frame_needed = 0, uses_anonymous_args = 0
 1838              		@ link register save eliminated.
 1839              	.LVL197:
 1840 0000 F0B4     		push	{r4, r5, r6, r7}
 1841              	.LCFI11:
 1842              		.cfi_def_cfa_offset 16
 1843              		.cfi_offset 4, -16
 1844              		.cfi_offset 5, -12
 1845              		.cfi_offset 6, -8
 1846              		.cfi_offset 7, -4
 1847              	.LVL198:
1125:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1848              		.loc 1 1125 0
 1849 0002 3B4B     		ldr	r3, .L274
1123:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1850              		.loc 1 1123 0
 1851 0004 0028     		cmp	r0, #0
 1852 0006 47D1     		bne	.L249
1125:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1853              		.loc 1 1125 0
 1854 0008 9E68     		ldr	r6, [r3, #8]
 1855 000a 16F04006 		ands	r6, r6, #64
 1856 000e 69D1     		bne	.L250
1132:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1857              		.loc 1 1132 0
 1858 0010 D670     		strb	r6, [r2, #3]
 1859              	.L251:
1189:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1860              		.loc 1 1189 0
 1861 0012 1378     		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 1862              	.LVL199:
 1863              	.LBB218:
 1864              	.LBB219:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 1865              		.loc 1 2726 0
 1866 0014 0024     		movs	r4, #0
 1867 0016 092B     		cmp	r3, #9
 1868 0018 08D9     		bls	.L264
 1869 001a 0020     		movs	r0, #0
 1870              	.LVL200:
 1871              	.L254:
2729:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 1872              		.loc 1 2729 0
 1873 001c 0A3B     		subs	r3, r3, #10
2728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 1874              		.loc 1 2728 0
 1875 001e 0130     		adds	r0, r0, #1
2729:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 1876              		.loc 1 2729 0
 1877 0020 DBB2     		uxtb	r3, r3
2728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 1878              		.loc 1 2728 0
 1879 0022 C0B2     		uxtb	r0, r0
 1880              	.LVL201:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 1881              		.loc 1 2726 0
 1882 0024 092B     		cmp	r3, #9
 1883 0026 F9D8     		bhi	.L254
 1884 0028 0001     		lsls	r0, r0, #4
 1885              	.LVL202:
 1886 002a C4B2     		uxtb	r4, r0
 1887              	.LVL203:
 1888              	.L264:
 1889              	.LBE219:
 1890              	.LBE218:
1190:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1891              		.loc 1 1190 0
 1892 002c 5078     		ldrb	r0, [r2, #1]	@ zero_extendqisi2
 1893              	.LVL204:
1189:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1894              		.loc 1 1189 0
 1895 002e 2343     		orrs	r3, r3, r4
 1896 0030 1B04     		lsls	r3, r3, #16
 1897              	.LBB220:
 1898              	.LBB221:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 1899              		.loc 1 2726 0
 1900 0032 0928     		cmp	r0, #9
 1901 0034 59D9     		bls	.L265
 1902 0036 0024     		movs	r4, #0
 1903              	.LVL205:
 1904              	.L256:
2729:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 1905              		.loc 1 2729 0
 1906 0038 0A38     		subs	r0, r0, #10
2728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 1907              		.loc 1 2728 0
 1908 003a 0134     		adds	r4, r4, #1
2729:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 1909              		.loc 1 2729 0
 1910 003c C0B2     		uxtb	r0, r0
2728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 1911              		.loc 1 2728 0
 1912 003e E4B2     		uxtb	r4, r4
 1913              	.LVL206:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 1914              		.loc 1 2726 0
 1915 0040 0928     		cmp	r0, #9
 1916 0042 F9D8     		bhi	.L256
 1917 0044 2401     		lsls	r4, r4, #4
 1918              	.LVL207:
 1919 0046 E7B2     		uxtb	r7, r4
 1920              	.LVL208:
 1921              	.L255:
 1922              	.LBE221:
 1923              	.LBE220:
1191:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1924              		.loc 1 1191 0
 1925 0048 9478     		ldrb	r4, [r2, #2]	@ zero_extendqisi2
 1926              	.LVL209:
1190:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1927              		.loc 1 1190 0
 1928 004a 3843     		orrs	r0, r0, r7
 1929 004c 0702     		lsls	r7, r0, #8
 1930              	.LBB223:
 1931              	.LBB224:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 1932              		.loc 1 2726 0
 1933 004e 0025     		movs	r5, #0
 1934 0050 092C     		cmp	r4, #9
 1935 0052 07D9     		bls	.L257
 1936              	.LVL210:
 1937              	.L258:
2729:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 1938              		.loc 1 2729 0
 1939 0054 0A3C     		subs	r4, r4, #10
2728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 1940              		.loc 1 2728 0
 1941 0056 0135     		adds	r5, r5, #1
2729:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 1942              		.loc 1 2729 0
 1943 0058 E4B2     		uxtb	r4, r4
2728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 1944              		.loc 1 2728 0
 1945 005a EDB2     		uxtb	r5, r5
 1946              	.LVL211:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 1947              		.loc 1 2726 0
 1948 005c 092C     		cmp	r4, #9
 1949 005e F9D8     		bhi	.L258
 1950 0060 2D01     		lsls	r5, r5, #4
 1951              	.LVL212:
 1952 0062 EDB2     		uxtb	r5, r5
 1953              	.LVL213:
 1954              	.L257:
 1955              	.LBE224:
 1956              	.LBE223:
1193:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1957              		.loc 1 1193 0
 1958 0064 107B     		ldrb	r0, [r2, #12]	@ zero_extendqisi2
 1959              	.LVL214:
1191:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1960              		.loc 1 1191 0
 1961 0066 2C43     		orrs	r4, r4, r5
 1962              	.LBB225:
 1963              	.LBB226:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 1964              		.loc 1 2726 0
 1965 0068 0025     		movs	r5, #0
 1966 006a 0928     		cmp	r0, #9
 1967 006c 07D9     		bls	.L259
 1968              	.LVL215:
 1969              	.L260:
2729:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 1970              		.loc 1 2729 0
 1971 006e 0A38     		subs	r0, r0, #10
2728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 1972              		.loc 1 2728 0
 1973 0070 0135     		adds	r5, r5, #1
2729:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 1974              		.loc 1 2729 0
 1975 0072 C0B2     		uxtb	r0, r0
2728:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 1976              		.loc 1 2728 0
 1977 0074 EDB2     		uxtb	r5, r5
 1978              	.LVL216:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 1979              		.loc 1 2726 0
 1980 0076 0928     		cmp	r0, #9
 1981 0078 F9D8     		bhi	.L260
 1982 007a 2D01     		lsls	r5, r5, #4
 1983              	.LVL217:
 1984 007c EDB2     		uxtb	r5, r5
 1985              	.LVL218:
 1986              	.L259:
 1987              	.LBE226:
 1988              	.LBE225:
1189:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1989              		.loc 1 1189 0
 1990 007e D2F804C0 		ldr	ip, [r2, #4]
 1991 0082 9268     		ldr	r2, [r2, #8]
 1992              	.LVL219:
 1993 0084 4CEA0202 		orr	r2, ip, r2
1190:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1994              		.loc 1 1190 0
 1995 0088 1643     		orrs	r6, r6, r2
1191:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1996              		.loc 1 1191 0
 1997 008a 3343     		orrs	r3, r3, r6
1192:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1998              		.loc 1 1192 0
 1999 008c 1F43     		orrs	r7, r7, r3
1193:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 2000              		.loc 1 1193 0
 2001 008e 3C43     		orrs	r4, r4, r7
 2002 0090 2843     		orrs	r0, r0, r5
1189:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 2003              		.loc 1 1189 0
 2004 0092 44EA0060 		orr	r0, r4, r0, lsl #24
 2005              	.LVL220:
 2006 0096 13E0     		b	.L263
 2007              	.LVL221:
 2008              	.L249:
1149:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 2009              		.loc 1 1149 0
 2010 0098 9868     		ldr	r0, [r3, #8]
 2011              	.LVL222:
 2012 009a 10F04000 		ands	r0, r0, #64
 2013 009e 1ED1     		bne	.L252
1157:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 2014              		.loc 1 1157 0
 2015 00a0 D070     		strb	r0, [r2, #3]
 2016              	.L253:
1179:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 2017              		.loc 1 1179 0
 2018 00a2 5768     		ldr	r7, [r2, #4]
 2019 00a4 9368     		ldr	r3, [r2, #8]
1181:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 2020              		.loc 1 1181 0
 2021 00a6 9678     		ldrb	r6, [r2, #2]	@ zero_extendqisi2
1179:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 2022              		.loc 1 1179 0
 2023 00a8 1578     		ldrb	r5, [r2, #0]	@ zero_extendqisi2
1180:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 2024              		.loc 1 1180 0
 2025 00aa 5478     		ldrb	r4, [r2, #1]	@ zero_extendqisi2
1183:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 2026              		.loc 1 1183 0
 2027 00ac 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
 2028              	.LVL223:
1179:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 2029              		.loc 1 1179 0
 2030 00ae 3B43     		orrs	r3, r3, r7
1180:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 2031              		.loc 1 1180 0
 2032 00b0 3343     		orrs	r3, r3, r6
1181:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 2033              		.loc 1 1181 0
 2034 00b2 43EA0543 		orr	r3, r3, r5, lsl #16
1182:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 2035              		.loc 1 1182 0
 2036 00b6 43EA0423 		orr	r3, r3, r4, lsl #8
1183:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 2037              		.loc 1 1183 0
 2038 00ba 43EA0263 		orr	r3, r3, r2, lsl #24
1179:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 2039              		.loc 1 1179 0
 2040 00be 1843     		orrs	r0, r0, r3
 2041              	.LVL224:
 2042              	.L263:
1199:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2043              		.loc 1 1199 0
 2044 00c0 0B4B     		ldr	r3, .L274
 2045 00c2 CA22     		movs	r2, #202
 2046 00c4 5A62     		str	r2, [r3, #36]
1200:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2047              		.loc 1 1200 0
 2048 00c6 5322     		movs	r2, #83
 2049 00c8 5A62     		str	r2, [r3, #36]
1203:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2050              		.loc 1 1203 0
 2051 00ca B1F5807F 		cmp	r1, #256
1205:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
 2052              		.loc 1 1205 0
 2053 00ce 0CBF     		ite	eq
 2054 00d0 D861     		streq	r0, [r3, #28]
1209:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
 2055              		.loc 1 1209 0
 2056 00d2 1862     		strne	r0, [r3, #32]
1213:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 2057              		.loc 1 1213 0
 2058 00d4 FF22     		movs	r2, #255
 2059 00d6 064B     		ldr	r3, .L274
 2060 00d8 5A62     		str	r2, [r3, #36]
1214:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2061              		.loc 1 1214 0
 2062 00da F0BC     		pop	{r4, r5, r6, r7}
 2063 00dc 7047     		bx	lr
 2064              	.LVL225:
 2065              	.L252:
 2066 00de D078     		ldrb	r0, [r2, #3]	@ zero_extendqisi2
 2067 00e0 0004     		lsls	r0, r0, #16
 2068 00e2 DEE7     		b	.L253
 2069              	.LVL226:
 2070              	.L250:
 2071 00e4 D678     		ldrb	r6, [r2, #3]	@ zero_extendqisi2
 2072 00e6 3604     		lsls	r6, r6, #16
 2073 00e8 93E7     		b	.L251
 2074              	.LVL227:
 2075              	.L265:
 2076              	.LBB227:
 2077              	.LBB222:
2726:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 2078              		.loc 1 2726 0
 2079 00ea 0027     		movs	r7, #0
 2080 00ec ACE7     		b	.L255
 2081              	.L275:
 2082 00ee 00BF     		.align	2
 2083              	.L274:
 2084 00f0 00280040 		.word	1073752064
 2085              	.LBE222:
 2086              	.LBE227:
 2087              		.cfi_endproc
 2088              	.LFE126:
 2090              		.section	.text.RTC_AlarmStructInit,"ax",%progbits
 2091              		.align	2
 2092              		.global	RTC_AlarmStructInit
 2093              		.thumb
 2094              		.thumb_func
 2096              	RTC_AlarmStructInit:
 2097              	.LFB127:
1225:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2098              		.loc 1 1225 0
 2099              		.cfi_startproc
 2100              		@ args = 0, pretend = 0, frame = 0
 2101              		@ frame_needed = 0, uses_anonymous_args = 0
 2102              		@ link register save eliminated.
 2103              	.LVL228:
1228:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 2104              		.loc 1 1228 0
 2105 0000 0023     		movs	r3, #0
 2106 0002 0360     		str	r3, [r0, #0]
1233:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 2107              		.loc 1 1233 0
 2108 0004 8360     		str	r3, [r0, #8]
1234:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 2109              		.loc 1 1234 0
 2110 0006 0122     		movs	r2, #1
 2111 0008 0273     		strb	r2, [r0, #12]
1237:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 2112              		.loc 1 1237 0
 2113 000a 4360     		str	r3, [r0, #4]
 2114 000c 7047     		bx	lr
 2115              		.cfi_endproc
 2116              	.LFE127:
 2118 000e 00BF     		.section	.text.RTC_GetAlarm,"ax",%progbits
 2119              		.align	2
 2120              		.global	RTC_GetAlarm
 2121              		.thumb
 2122              		.thumb_func
 2124              	RTC_GetAlarm:
 2125              	.LFB128:
1255:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2126              		.loc 1 1255 0
 2127              		.cfi_startproc
 2128              		@ args = 0, pretend = 0, frame = 0
 2129              		@ frame_needed = 0, uses_anonymous_args = 0
 2130              		@ link register save eliminated.
 2131              	.LVL229:
 2132 0000 2DE9F00F 		push	{r4, r5, r6, r7, r8, r9, sl, fp}
 2133              	.LCFI12:
 2134              		.cfi_def_cfa_offset 32
 2135              		.cfi_offset 4, -32
 2136              		.cfi_offset 5, -28
 2137              		.cfi_offset 6, -24
 2138              		.cfi_offset 7, -20
 2139              		.cfi_offset 8, -16
 2140              		.cfi_offset 9, -12
 2141              		.cfi_offset 10, -8
 2142              		.cfi_offset 11, -4
 2143              	.LVL230:
1265:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 2144              		.loc 1 1265 0
 2145 0004 274B     		ldr	r3, .L281
1263:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2146              		.loc 1 1263 0
 2147 0006 B1F5807F 		cmp	r1, #256
1265:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 2148              		.loc 1 1265 0
 2149 000a 0CBF     		ite	eq
 2150 000c DB69     		ldreq	r3, [r3, #28]
 2151              	.LVL231:
1269:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
 2152              		.loc 1 1269 0
 2153 000e 1B6A     		ldrne	r3, [r3, #32]
 2154              	.LVL232:
1273:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 2155              		.loc 1 1273 0
 2156 0010 C3F30545 		ubfx	r5, r3, #16, #6
1275:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 2157              		.loc 1 1275 0
 2158 0014 C3F30624 		ubfx	r4, r3, #8, #7
1279:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 2159              		.loc 1 1279 0
 2160 0018 03F4800B 		and	fp, r3, #4194304
1280:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 2161              		.loc 1 1280 0
 2162 001c C3F30561 		ubfx	r1, r3, #24, #6
 2163              	.LVL233:
1273:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 2164              		.loc 1 1273 0
 2165 0020 5FFA85F8 		uxtb	r8, r5
1275:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 2166              		.loc 1 1275 0
 2167 0024 5FFA84FC 		uxtb	ip, r4
1277:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 2168              		.loc 1 1277 0
 2169 0028 03F07F07 		and	r7, r3, #127
1279:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 2170              		.loc 1 1279 0
 2171 002c 4FEA1B4B 		lsr	fp, fp, #16
1280:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 2172              		.loc 1 1280 0
 2173 0030 CEB2     		uxtb	r6, r1
1281:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 2174              		.loc 1 1281 0
 2175 0032 03F0804A 		and	sl, r3, #1073741824
1282:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 2176              		.loc 1 1282 0
 2177 0036 03F08039 		and	r9, r3, #-2139062144
1273:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 2178              		.loc 1 1273 0
 2179 003a 82F80080 		strb	r8, [r2, #0]
1275:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 2180              		.loc 1 1275 0
 2181 003e 82F801C0 		strb	ip, [r2, #1]
1277:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 2182              		.loc 1 1277 0
 2183 0042 9770     		strb	r7, [r2, #2]
1279:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 2184              		.loc 1 1279 0
 2185 0044 82F803B0 		strb	fp, [r2, #3]
1280:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 2186              		.loc 1 1280 0
 2187 0048 1673     		strb	r6, [r2, #12]
1281:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 2188              		.loc 1 1281 0
 2189 004a C2F808A0 		str	sl, [r2, #8]
1282:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 2190              		.loc 1 1282 0
 2191 004e C2F80490 		str	r9, [r2, #4]
1284:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 2192              		.loc 1 1284 0
 2193 0052 18BB     		cbnz	r0, .L277
 2194              	.LVL234:
 2195              	.LBB228:
 2196              	.LBB229:
2743:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 2197              		.loc 1 2743 0
 2198 0054 4FEA1818 		lsr	r8, r8, #4
 2199              	.LVL235:
 2200              	.LBE229:
 2201              	.LBE228:
 2202              	.LBB232:
 2203              	.LBB233:
 2204 0058 4FEA1C1C 		lsr	ip, ip, #4
 2205              	.LBE233:
 2206              	.LBE232:
 2207              	.LBB236:
 2208              	.LBB237:
 2209 005c 3F09     		lsrs	r7, r7, #4
 2210              	.LBE237:
 2211              	.LBE236:
 2212              	.LBB240:
 2213              	.LBB241:
 2214 005e 3609     		lsrs	r6, r6, #4
 2215              	.LBE241:
 2216              	.LBE240:
 2217              	.LBB244:
 2218              	.LBB230:
 2219 0060 08EB8808 		add	r8, r8, r8, lsl #2
 2220              		.loc 1 2744 0
 2221 0064 05F00F05 		and	r5, r5, #15
 2222              	.LVL236:
 2223              	.LBE230:
 2224              	.LBE244:
 2225              	.LBB245:
 2226              	.LBB234:
2743:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 2227              		.loc 1 2743 0
 2228 0068 0CEB8C0C 		add	ip, ip, ip, lsl #2
 2229              		.loc 1 2744 0
 2230 006c 04F00F04 		and	r4, r4, #15
 2231              	.LBE234:
 2232              	.LBE245:
 2233              	.LBB246:
 2234              	.LBB238:
2743:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 2235              		.loc 1 2743 0
 2236 0070 07EB8707 		add	r7, r7, r7, lsl #2
 2237              		.loc 1 2744 0
 2238 0074 03F00F03 		and	r3, r3, #15
 2239              	.LVL237:
 2240              	.LBE238:
 2241              	.LBE246:
 2242              	.LBB247:
 2243              	.LBB242:
2743:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 2244              		.loc 1 2743 0
 2245 0078 06EB8606 		add	r6, r6, r6, lsl #2
 2246              		.loc 1 2744 0
 2247 007c 01F00F01 		and	r1, r1, #15
 2248              	.LBE242:
 2249              	.LBE247:
 2250              	.LBB248:
 2251              	.LBB231:
 2252 0080 05EB4808 		add	r8, r5, r8, lsl #1
 2253              	.LBE231:
 2254              	.LBE248:
 2255              	.LBB249:
 2256              	.LBB235:
 2257 0084 04EB4C0C 		add	ip, r4, ip, lsl #1
 2258              	.LBE235:
 2259              	.LBE249:
 2260              	.LBB250:
 2261              	.LBB239:
 2262 0088 03EB4707 		add	r7, r3, r7, lsl #1
 2263              	.LBE239:
 2264              	.LBE250:
 2265              	.LBB251:
 2266              	.LBB243:
 2267 008c 01EB4606 		add	r6, r1, r6, lsl #1
 2268              	.LBE243:
 2269              	.LBE251:
1286:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 2270              		.loc 1 1286 0
 2271 0090 82F80080 		strb	r8, [r2, #0]
 2272              	.LVL238:
1288:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 2273              		.loc 1 1288 0
 2274 0094 82F801C0 		strb	ip, [r2, #1]
 2275              	.LVL239:
1290:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 2276              		.loc 1 1290 0
 2277 0098 9770     		strb	r7, [r2, #2]
 2278              	.LVL240:
1292:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 2279              		.loc 1 1292 0
 2280 009a 1673     		strb	r6, [r2, #12]
 2281              	.L277:
1294:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2282              		.loc 1 1294 0
 2283 009c BDE8F00F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp}
 2284 00a0 7047     		bx	lr
 2285              	.L282:
 2286 00a2 00BF     		.align	2
 2287              	.L281:
 2288 00a4 00280040 		.word	1073752064
 2289              		.cfi_endproc
 2290              	.LFE128:
 2292              		.section	.text.RTC_AlarmCmd,"ax",%progbits
 2293              		.align	2
 2294              		.global	RTC_AlarmCmd
 2295              		.thumb
 2296              		.thumb_func
 2298              	RTC_AlarmCmd:
 2299              	.LFB129:
1309:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2300              		.loc 1 1309 0
 2301              		.cfi_startproc
 2302              		@ args = 0, pretend = 0, frame = 8
 2303              		@ frame_needed = 0, uses_anonymous_args = 0
 2304              		@ link register save eliminated.
 2305              	.LVL241:
 2306 0000 82B0     		sub	sp, sp, #8
 2307              	.LCFI13:
 2308              		.cfi_def_cfa_offset 8
1319:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2309              		.loc 1 1319 0
 2310 0002 144B     		ldr	r3, .L294
1310:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 2311              		.loc 1 1310 0
 2312 0004 0022     		movs	r2, #0
 2313 0006 0192     		str	r2, [sp, #4]
 2314              	.LVL242:
1319:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2315              		.loc 1 1319 0
 2316 0008 CA22     		movs	r2, #202
 2317 000a 5A62     		str	r2, [r3, #36]
1320:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2318              		.loc 1 1320 0
 2319 000c 5322     		movs	r2, #83
 2320 000e 5A62     		str	r2, [r3, #36]
1325:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 2321              		.loc 1 1325 0
 2322 0010 9A68     		ldr	r2, [r3, #8]
1323:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2323              		.loc 1 1323 0
 2324 0012 D1B9     		cbnz	r1, .L293
1332:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 2325              		.loc 1 1332 0
 2326 0014 22EA0002 		bic	r2, r2, r0
 2327 0018 9A60     		str	r2, [r3, #8]
 2328 001a 000A     		lsrs	r0, r0, #8
 2329              	.LVL243:
1337:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 2330              		.loc 1 1337 0
 2331 001c 1946     		mov	r1, r3
 2332              	.LVL244:
 2333 001e 00E0     		b	.L287
 2334              	.LVL245:
 2335              	.L286:
1339:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 2336              		.loc 1 1339 0 discriminator 1
 2337 0020 42B9     		cbnz	r2, .L288
 2338              	.LVL246:
 2339              	.L287:
1337:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 2340              		.loc 1 1337 0 discriminator 1
 2341 0022 CA68     		ldr	r2, [r1, #12]
1338:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 2342              		.loc 1 1338 0 discriminator 1
 2343 0024 019B     		ldr	r3, [sp, #4]
 2344 0026 0133     		adds	r3, r3, #1
 2345              	.LVL247:
 2346 0028 0193     		str	r3, [sp, #4]
 2347              	.LVL248:
1339:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 2348              		.loc 1 1339 0 discriminator 1
 2349 002a 019B     		ldr	r3, [sp, #4]
 2350              	.LVL249:
1337:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 2351              		.loc 1 1337 0 discriminator 1
 2352 002c 0240     		ands	r2, r2, r0
 2353              	.LVL250:
1339:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 2354              		.loc 1 1339 0 discriminator 1
 2355 002e B3F5803F 		cmp	r3, #65536
 2356 0032 F5D1     		bne	.L286
 2357              	.L288:
1341:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 2358              		.loc 1 1341 0
 2359 0034 074B     		ldr	r3, .L294
 2360 0036 DB68     		ldr	r3, [r3, #12]
 2361 0038 0342     		tst	r3, r0
1327:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2362              		.loc 1 1327 0
 2363 003a 0CBF     		ite	eq
 2364 003c 0020     		moveq	r0, #0
 2365 003e 0120     		movne	r0, #1
 2366              	.LVL251:
 2367              	.L285:
1352:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2368              		.loc 1 1352 0
 2369 0040 FF22     		movs	r2, #255
 2370 0042 044B     		ldr	r3, .L294
 2371 0044 5A62     		str	r2, [r3, #36]
1355:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2372              		.loc 1 1355 0
 2373 0046 02B0     		add	sp, sp, #8
 2374 0048 7047     		bx	lr
 2375              	.LVL252:
 2376              	.L293:
1325:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 2377              		.loc 1 1325 0
 2378 004a 1043     		orrs	r0, r0, r2
 2379              	.LVL253:
 2380 004c 9860     		str	r0, [r3, #8]
 2381              	.LVL254:
1327:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2382              		.loc 1 1327 0
 2383 004e 0120     		movs	r0, #1
 2384 0050 F6E7     		b	.L285
 2385              	.L295:
 2386 0052 00BF     		.align	2
 2387              	.L294:
 2388 0054 00280040 		.word	1073752064
 2389              		.cfi_endproc
 2390              	.LFE129:
 2392              		.section	.text.RTC_AlarmSubSecondConfig,"ax",%progbits
 2393              		.align	2
 2394              		.global	RTC_AlarmSubSecondConfig
 2395              		.thumb
 2396              		.thumb_func
 2398              	RTC_AlarmSubSecondConfig:
 2399              	.LFB130:
1403:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2400              		.loc 1 1403 0
 2401              		.cfi_startproc
 2402              		@ args = 0, pretend = 0, frame = 0
 2403              		@ frame_needed = 0, uses_anonymous_args = 0
 2404              		@ link register save eliminated.
 2405              	.LVL255:
 2406 0000 10B4     		push	{r4}
 2407              	.LCFI14:
 2408              		.cfi_def_cfa_offset 4
 2409              		.cfi_offset 4, -4
 2410              	.LVL256:
1412:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2411              		.loc 1 1412 0
 2412 0002 084B     		ldr	r3, .L299
 2413 0004 CA24     		movs	r4, #202
 2414 0006 5C62     		str	r4, [r3, #36]
1416:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 2415              		.loc 1 1416 0
 2416 0008 0A43     		orrs	r2, r2, r1
 2417              	.LVL257:
1413:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2418              		.loc 1 1413 0
 2419 000a 5324     		movs	r4, #83
 2420 000c 5C62     		str	r4, [r3, #36]
1418:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2421              		.loc 1 1418 0
 2422 000e B0F5807F 		cmp	r0, #256
1421:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
 2423              		.loc 1 1421 0
 2424 0012 0CBF     		ite	eq
 2425 0014 5A64     		streq	r2, [r3, #68]
1426:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
 2426              		.loc 1 1426 0
 2427 0016 9A64     		strne	r2, [r3, #72]
1430:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2428              		.loc 1 1430 0
 2429 0018 FF22     		movs	r2, #255
 2430              	.LVL258:
 2431 001a 024B     		ldr	r3, .L299
 2432 001c 5A62     		str	r2, [r3, #36]
1432:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2433              		.loc 1 1432 0
 2434 001e 10BC     		pop	{r4}
 2435 0020 7047     		bx	lr
 2436              	.L300:
 2437 0022 00BF     		.align	2
 2438              	.L299:
 2439 0024 00280040 		.word	1073752064
 2440              		.cfi_endproc
 2441              	.LFE130:
 2443              		.section	.text.RTC_GetAlarmSubSecond,"ax",%progbits
 2444              		.align	2
 2445              		.global	RTC_GetAlarmSubSecond
 2446              		.thumb
 2447              		.thumb_func
 2449              	RTC_GetAlarmSubSecond:
 2450              	.LFB131:
1444:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2451              		.loc 1 1444 0
 2452              		.cfi_startproc
 2453              		@ args = 0, pretend = 0, frame = 0
 2454              		@ frame_needed = 0, uses_anonymous_args = 0
 2455              		@ link register save eliminated.
 2456              	.LVL259:
 2457              	.LVL260:
1450:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 2458              		.loc 1 1450 0
 2459 0000 044B     		ldr	r3, .L304
1448:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2460              		.loc 1 1448 0
 2461 0002 B0F5807F 		cmp	r0, #256
1450:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 2462              		.loc 1 1450 0
 2463 0006 0CBF     		ite	eq
 2464 0008 586C     		ldreq	r0, [r3, #68]
 2465              	.LVL261:
1454:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2466              		.loc 1 1454 0
 2467 000a 986C     		ldrne	r0, [r3, #72]
 2468 000c 4004     		lsls	r0, r0, #17
 2469 000e 400C     		lsrs	r0, r0, #17
 2470              	.LVL262:
1458:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2471              		.loc 1 1458 0
 2472 0010 7047     		bx	lr
 2473              	.L305:
 2474 0012 00BF     		.align	2
 2475              	.L304:
 2476 0014 00280040 		.word	1073752064
 2477              		.cfi_endproc
 2478              	.LFE131:
 2480              		.section	.text.RTC_WakeUpClockConfig,"ax",%progbits
 2481              		.align	2
 2482              		.global	RTC_WakeUpClockConfig
 2483              		.thumb
 2484              		.thumb_func
 2486              	RTC_WakeUpClockConfig:
 2487              	.LFB132:
1493:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2488              		.loc 1 1493 0
 2489              		.cfi_startproc
 2490              		@ args = 0, pretend = 0, frame = 0
 2491              		@ frame_needed = 0, uses_anonymous_args = 0
 2492              		@ link register save eliminated.
 2493              	.LVL263:
1498:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2494              		.loc 1 1498 0
 2495 0000 074B     		ldr	r3, .L307
 2496 0002 CA22     		movs	r2, #202
 2497 0004 5A62     		str	r2, [r3, #36]
1499:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2498              		.loc 1 1499 0
 2499 0006 5322     		movs	r2, #83
 2500 0008 5A62     		str	r2, [r3, #36]
1502:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 2501              		.loc 1 1502 0
 2502 000a 9A68     		ldr	r2, [r3, #8]
 2503 000c 22F00702 		bic	r2, r2, #7
 2504 0010 9A60     		str	r2, [r3, #8]
1505:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 2505              		.loc 1 1505 0
 2506 0012 9A68     		ldr	r2, [r3, #8]
 2507 0014 1043     		orrs	r0, r0, r2
 2508              	.LVL264:
 2509 0016 9860     		str	r0, [r3, #8]
1508:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2510              		.loc 1 1508 0
 2511 0018 FF22     		movs	r2, #255
 2512 001a 5A62     		str	r2, [r3, #36]
 2513 001c 7047     		bx	lr
 2514              	.L308:
 2515 001e 00BF     		.align	2
 2516              	.L307:
 2517 0020 00280040 		.word	1073752064
 2518              		.cfi_endproc
 2519              	.LFE132:
 2521              		.section	.text.RTC_SetWakeUpCounter,"ax",%progbits
 2522              		.align	2
 2523              		.global	RTC_SetWakeUpCounter
 2524              		.thumb
 2525              		.thumb_func
 2527              	RTC_SetWakeUpCounter:
 2528              	.LFB133:
1520:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2529              		.loc 1 1520 0
 2530              		.cfi_startproc
 2531              		@ args = 0, pretend = 0, frame = 0
 2532              		@ frame_needed = 0, uses_anonymous_args = 0
 2533              		@ link register save eliminated.
 2534              	.LVL265:
1525:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2535              		.loc 1 1525 0
 2536 0000 044B     		ldr	r3, .L310
 2537 0002 CA22     		movs	r2, #202
 2538 0004 5A62     		str	r2, [r3, #36]
1526:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2539              		.loc 1 1526 0
 2540 0006 5322     		movs	r2, #83
 2541 0008 5A62     		str	r2, [r3, #36]
1529:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 2542              		.loc 1 1529 0
 2543 000a 5861     		str	r0, [r3, #20]
1532:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2544              		.loc 1 1532 0
 2545 000c FF22     		movs	r2, #255
 2546 000e 5A62     		str	r2, [r3, #36]
 2547 0010 7047     		bx	lr
 2548              	.L311:
 2549 0012 00BF     		.align	2
 2550              	.L310:
 2551 0014 00280040 		.word	1073752064
 2552              		.cfi_endproc
 2553              	.LFE133:
 2555              		.section	.text.RTC_GetWakeUpCounter,"ax",%progbits
 2556              		.align	2
 2557              		.global	RTC_GetWakeUpCounter
 2558              		.thumb
 2559              		.thumb_func
 2561              	RTC_GetWakeUpCounter:
 2562              	.LFB134:
1541:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2563              		.loc 1 1541 0
 2564              		.cfi_startproc
 2565              		@ args = 0, pretend = 0, frame = 0
 2566              		@ frame_needed = 0, uses_anonymous_args = 0
 2567              		@ link register save eliminated.
1543:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 2568              		.loc 1 1543 0
 2569 0000 014B     		ldr	r3, .L313
 2570 0002 5869     		ldr	r0, [r3, #20]
1544:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2571              		.loc 1 1544 0
 2572 0004 80B2     		uxth	r0, r0
 2573 0006 7047     		bx	lr
 2574              	.L314:
 2575              		.align	2
 2576              	.L313:
 2577 0008 00280040 		.word	1073752064
 2578              		.cfi_endproc
 2579              	.LFE134:
 2581              		.section	.text.RTC_WakeUpCmd,"ax",%progbits
 2582              		.align	2
 2583              		.global	RTC_WakeUpCmd
 2584              		.thumb
 2585              		.thumb_func
 2587              	RTC_WakeUpCmd:
 2588              	.LFB135:
1553:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2589              		.loc 1 1553 0
 2590              		.cfi_startproc
 2591              		@ args = 0, pretend = 0, frame = 8
 2592              		@ frame_needed = 0, uses_anonymous_args = 0
 2593              		@ link register save eliminated.
 2594              	.LVL266:
 2595 0000 82B0     		sub	sp, sp, #8
 2596              	.LCFI15:
 2597              		.cfi_def_cfa_offset 8
1562:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2598              		.loc 1 1562 0
 2599 0002 1349     		ldr	r1, .L329
1554:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 2600              		.loc 1 1554 0
 2601 0004 0023     		movs	r3, #0
 2602 0006 0193     		str	r3, [sp, #4]
 2603              	.LVL267:
1562:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2604              		.loc 1 1562 0
 2605 0008 CA23     		movs	r3, #202
 2606 000a 4B62     		str	r3, [r1, #36]
1563:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2607              		.loc 1 1563 0
 2608 000c 5323     		movs	r3, #83
 2609 000e 4B62     		str	r3, [r1, #36]
1568:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 2610              		.loc 1 1568 0
 2611 0010 8B68     		ldr	r3, [r1, #8]
1565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2612              		.loc 1 1565 0
 2613 0012 B8B9     		cbnz	r0, .L327
1574:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 2614              		.loc 1 1574 0
 2615 0014 23F48063 		bic	r3, r3, #1024
 2616 0018 8B60     		str	r3, [r1, #8]
 2617 001a 00E0     		b	.L319
 2618              	.LVL268:
 2619              	.L328:
1580:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 2620              		.loc 1 1580 0 discriminator 1
 2621 001c 4AB9     		cbnz	r2, .L318
 2622              	.LVL269:
 2623              	.L319:
1578:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 2624              		.loc 1 1578 0 discriminator 1
 2625 001e CA68     		ldr	r2, [r1, #12]
1579:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 2626              		.loc 1 1579 0 discriminator 1
 2627 0020 019B     		ldr	r3, [sp, #4]
 2628 0022 0133     		adds	r3, r3, #1
 2629              	.LVL270:
 2630 0024 0193     		str	r3, [sp, #4]
 2631              	.LVL271:
1580:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 2632              		.loc 1 1580 0 discriminator 1
 2633 0026 019B     		ldr	r3, [sp, #4]
 2634              	.LVL272:
1578:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 2635              		.loc 1 1578 0 discriminator 1
 2636 0028 02F00402 		and	r2, r2, #4
 2637              	.LVL273:
1580:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 2638              		.loc 1 1580 0 discriminator 1
 2639 002c B3F5803F 		cmp	r3, #65536
 2640 0030 F4D1     		bne	.L328
 2641              	.L318:
1582:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 2642              		.loc 1 1582 0
 2643 0032 074B     		ldr	r3, .L329
 2644 0034 D868     		ldr	r0, [r3, #12]
 2645              	.LVL274:
1569:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2646              		.loc 1 1569 0
 2647 0036 C0F38000 		ubfx	r0, r0, #2, #1
 2648              	.LVL275:
 2649              	.L317:
1593:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2650              		.loc 1 1593 0
 2651 003a FF22     		movs	r2, #255
 2652 003c 044B     		ldr	r3, .L329
 2653 003e 5A62     		str	r2, [r3, #36]
1596:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2654              		.loc 1 1596 0
 2655 0040 02B0     		add	sp, sp, #8
 2656 0042 7047     		bx	lr
 2657              	.LVL276:
 2658              	.L327:
1568:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 2659              		.loc 1 1568 0
 2660 0044 43F48063 		orr	r3, r3, #1024
 2661 0048 8B60     		str	r3, [r1, #8]
 2662              	.LVL277:
1569:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2663              		.loc 1 1569 0
 2664 004a 0120     		movs	r0, #1
 2665              	.LVL278:
 2666 004c F5E7     		b	.L317
 2667              	.L330:
 2668 004e 00BF     		.align	2
 2669              	.L329:
 2670 0050 00280040 		.word	1073752064
 2671              		.cfi_endproc
 2672              	.LFE135:
 2674              		.section	.text.RTC_DayLightSavingConfig,"ax",%progbits
 2675              		.align	2
 2676              		.global	RTC_DayLightSavingConfig
 2677              		.thumb
 2678              		.thumb_func
 2680              	RTC_DayLightSavingConfig:
 2681              	.LFB136:
1630:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2682              		.loc 1 1630 0
 2683              		.cfi_startproc
 2684              		@ args = 0, pretend = 0, frame = 0
 2685              		@ frame_needed = 0, uses_anonymous_args = 0
 2686              		@ link register save eliminated.
 2687              	.LVL279:
1636:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2688              		.loc 1 1636 0
 2689 0000 074B     		ldr	r3, .L332
 2690 0002 CA22     		movs	r2, #202
 2691 0004 5A62     		str	r2, [r3, #36]
1637:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2692              		.loc 1 1637 0
 2693 0006 5322     		movs	r2, #83
 2694 0008 5A62     		str	r2, [r3, #36]
1640:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 2695              		.loc 1 1640 0
 2696 000a 9A68     		ldr	r2, [r3, #8]
 2697 000c 22F48022 		bic	r2, r2, #262144
 2698 0010 9A60     		str	r2, [r3, #8]
1643:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 2699              		.loc 1 1643 0
 2700 0012 9A68     		ldr	r2, [r3, #8]
 2701 0014 1043     		orrs	r0, r0, r2
 2702              	.LVL280:
 2703 0016 0143     		orrs	r1, r1, r0
 2704              	.LVL281:
 2705 0018 9960     		str	r1, [r3, #8]
1646:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2706              		.loc 1 1646 0
 2707 001a FF22     		movs	r2, #255
 2708 001c 5A62     		str	r2, [r3, #36]
 2709 001e 7047     		bx	lr
 2710              	.L333:
 2711              		.align	2
 2712              	.L332:
 2713 0020 00280040 		.word	1073752064
 2714              		.cfi_endproc
 2715              	.LFE136:
 2717              		.section	.text.RTC_GetStoreOperation,"ax",%progbits
 2718              		.align	2
 2719              		.global	RTC_GetStoreOperation
 2720              		.thumb
 2721              		.thumb_func
 2723              	RTC_GetStoreOperation:
 2724              	.LFB137:
1657:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2725              		.loc 1 1657 0
 2726              		.cfi_startproc
 2727              		@ args = 0, pretend = 0, frame = 0
 2728              		@ frame_needed = 0, uses_anonymous_args = 0
 2729              		@ link register save eliminated.
1658:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 2730              		.loc 1 1658 0
 2731 0000 024B     		ldr	r3, .L335
 2732 0002 9868     		ldr	r0, [r3, #8]
1659:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2733              		.loc 1 1659 0
 2734 0004 00F48020 		and	r0, r0, #262144
 2735 0008 7047     		bx	lr
 2736              	.L336:
 2737 000a 00BF     		.align	2
 2738              	.L335:
 2739 000c 00280040 		.word	1073752064
 2740              		.cfi_endproc
 2741              	.LFE137:
 2743              		.section	.text.RTC_OutputConfig,"ax",%progbits
 2744              		.align	2
 2745              		.global	RTC_OutputConfig
 2746              		.thumb
 2747              		.thumb_func
 2749              	RTC_OutputConfig:
 2750              	.LFB138:
1696:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2751              		.loc 1 1696 0
 2752              		.cfi_startproc
 2753              		@ args = 0, pretend = 0, frame = 0
 2754              		@ frame_needed = 0, uses_anonymous_args = 0
 2755              		@ link register save eliminated.
 2756              	.LVL282:
1702:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2757              		.loc 1 1702 0
 2758 0000 074B     		ldr	r3, .L338
 2759 0002 CA22     		movs	r2, #202
 2760 0004 5A62     		str	r2, [r3, #36]
1703:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2761              		.loc 1 1703 0
 2762 0006 5322     		movs	r2, #83
 2763 0008 5A62     		str	r2, [r3, #36]
1706:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 2764              		.loc 1 1706 0
 2765 000a 9A68     		ldr	r2, [r3, #8]
 2766 000c 22F4E002 		bic	r2, r2, #7340032
 2767 0010 9A60     		str	r2, [r3, #8]
1709:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 2768              		.loc 1 1709 0
 2769 0012 9A68     		ldr	r2, [r3, #8]
 2770 0014 1043     		orrs	r0, r0, r2
 2771              	.LVL283:
 2772 0016 0143     		orrs	r1, r1, r0
 2773              	.LVL284:
 2774 0018 9960     		str	r1, [r3, #8]
1712:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2775              		.loc 1 1712 0
 2776 001a FF22     		movs	r2, #255
 2777 001c 5A62     		str	r2, [r3, #36]
 2778 001e 7047     		bx	lr
 2779              	.L339:
 2780              		.align	2
 2781              	.L338:
 2782 0020 00280040 		.word	1073752064
 2783              		.cfi_endproc
 2784              	.LFE138:
 2786              		.section	.text.RTC_CoarseCalibConfig,"ax",%progbits
 2787              		.align	2
 2788              		.global	RTC_CoarseCalibConfig
 2789              		.thumb
 2790              		.thumb_func
 2792              	RTC_CoarseCalibConfig:
 2793              	.LFB139:
1750:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2794              		.loc 1 1750 0
 2795              		.cfi_startproc
 2796              		@ args = 0, pretend = 0, frame = 8
 2797              		@ frame_needed = 0, uses_anonymous_args = 0
 2798              		@ link register save eliminated.
 2799              	.LVL285:
 2800 0000 10B4     		push	{r4}
 2801              	.LCFI16:
 2802              		.cfi_def_cfa_offset 4
 2803              		.cfi_offset 4, -4
 2804 0002 83B0     		sub	sp, sp, #12
 2805              	.LCFI17:
 2806              		.cfi_def_cfa_offset 16
 2807              	.LVL286:
1758:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2808              		.loc 1 1758 0
 2809 0004 164C     		ldr	r4, .L354
 2810 0006 CA23     		movs	r3, #202
 2811 0008 6362     		str	r3, [r4, #36]
1759:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2812              		.loc 1 1759 0
 2813 000a 5323     		movs	r3, #83
 2814 000c 6362     		str	r3, [r4, #36]
 2815              	.LBB258:
 2816              	.LBB259:
 552:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 2817              		.loc 1 552 0
 2818 000e 0023     		movs	r3, #0
 2819 0010 0193     		str	r3, [sp, #4]
 2820              	.LVL287:
 557:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 2821              		.loc 1 557 0
 2822 0012 E368     		ldr	r3, [r4, #12]
 2823 0014 5B06     		lsls	r3, r3, #25
 2824 0016 15D4     		bmi	.L345
 560:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 2825              		.loc 1 560 0
 2826 0018 4FF0FF33 		mov	r3, #-1
 2827 001c E360     		str	r3, [r4, #12]
 2828 001e 00E0     		b	.L344
 2829              	.LVL288:
 2830              	.L353:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 2831              		.loc 1 567 0
 2832 0020 4AB9     		cbnz	r2, .L343
 2833              	.LVL289:
 2834              	.L344:
 565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 2835              		.loc 1 565 0
 2836 0022 E268     		ldr	r2, [r4, #12]
 566:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 2837              		.loc 1 566 0
 2838 0024 019B     		ldr	r3, [sp, #4]
 2839 0026 0133     		adds	r3, r3, #1
 2840              	.LVL290:
 2841 0028 0193     		str	r3, [sp, #4]
 2842              	.LVL291:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 2843              		.loc 1 567 0
 2844 002a 019B     		ldr	r3, [sp, #4]
 2845              	.LVL292:
 565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 2846              		.loc 1 565 0
 2847 002c 02F04002 		and	r2, r2, #64
 2848              	.LVL293:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 2849              		.loc 1 567 0
 2850 0030 B3F5803F 		cmp	r3, #65536
 2851 0034 F4D1     		bne	.L353
 2852              	.L343:
 2853              	.LBB260:
 2854              	.LBB261:
 569:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 2855              		.loc 1 569 0
 2856 0036 0A4B     		ldr	r3, .L354
 2857 0038 DB68     		ldr	r3, [r3, #12]
 2858              	.LVL294:
 2859              	.LBE261:
 2860              	.LBE260:
 2861              	.LBE259:
 2862              	.LBE258:
1762:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2863              		.loc 1 1762 0
 2864 003a C3F38013 		ubfx	r3, r3, #6, #1
 2865              	.LVL295:
 2866 003e 0BB9     		cbnz	r3, .L345
1764:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2867              		.loc 1 1764 0
 2868 0040 1846     		mov	r0, r3
 2869              	.LVL296:
 2870 0042 07E0     		b	.L342
 2871              	.LVL297:
 2872              	.L345:
1769:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 2873              		.loc 1 1769 0
 2874 0044 064B     		ldr	r3, .L354
 2875 0046 0843     		orrs	r0, r0, r1
 2876              	.LVL298:
 2877 0048 9861     		str	r0, [r3, #24]
 2878              	.LBB262:
 2879              	.LBB263:
 598:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 2880              		.loc 1 598 0
 2881 004a DA68     		ldr	r2, [r3, #12]
 2882 004c 22F08002 		bic	r2, r2, #128
 2883 0050 DA60     		str	r2, [r3, #12]
 2884              	.LVL299:
1773:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2885              		.loc 1 1773 0
 2886 0052 0120     		movs	r0, #1
 2887              	.LVL300:
 2888              	.L342:
 2889              	.LBE263:
 2890              	.LBE262:
1777:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2891              		.loc 1 1777 0
 2892 0054 FF22     		movs	r2, #255
 2893 0056 024B     		ldr	r3, .L354
 2894 0058 5A62     		str	r2, [r3, #36]
1780:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2895              		.loc 1 1780 0
 2896 005a 03B0     		add	sp, sp, #12
 2897 005c 10BC     		pop	{r4}
 2898 005e 7047     		bx	lr
 2899              	.L355:
 2900              		.align	2
 2901              	.L354:
 2902 0060 00280040 		.word	1073752064
 2903              		.cfi_endproc
 2904              	.LFE139:
 2906              		.section	.text.RTC_CoarseCalibCmd,"ax",%progbits
 2907              		.align	2
 2908              		.global	RTC_CoarseCalibCmd
 2909              		.thumb
 2910              		.thumb_func
 2912              	RTC_CoarseCalibCmd:
 2913              	.LFB140:
1791:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2914              		.loc 1 1791 0
 2915              		.cfi_startproc
 2916              		@ args = 0, pretend = 0, frame = 8
 2917              		@ frame_needed = 0, uses_anonymous_args = 0
 2918              		@ link register save eliminated.
 2919              	.LVL301:
 2920 0000 82B0     		sub	sp, sp, #8
 2921              	.LCFI18:
 2922              		.cfi_def_cfa_offset 8
 2923              	.LVL302:
1798:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2924              		.loc 1 1798 0
 2925 0002 1B49     		ldr	r1, .L375
 2926 0004 CA23     		movs	r3, #202
 2927 0006 4B62     		str	r3, [r1, #36]
1799:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2928              		.loc 1 1799 0
 2929 0008 5323     		movs	r3, #83
 2930 000a 4B62     		str	r3, [r1, #36]
 2931              	.LBB270:
 2932              	.LBB271:
 552:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 2933              		.loc 1 552 0
 2934 000c 0023     		movs	r3, #0
 2935 000e 0193     		str	r3, [sp, #4]
 2936              	.LVL303:
 557:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 2937              		.loc 1 557 0
 2938 0010 CB68     		ldr	r3, [r1, #12]
 2939 0012 5A06     		lsls	r2, r3, #25
 2940 0014 19D4     		bmi	.L363
 560:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 2941              		.loc 1 560 0
 2942 0016 4FF0FF33 		mov	r3, #-1
 2943 001a CB60     		str	r3, [r1, #12]
 2944 001c 00E0     		b	.L361
 2945              	.LVL304:
 2946              	.L374:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 2947              		.loc 1 567 0
 2948 001e 4AB9     		cbnz	r2, .L360
 2949              	.LVL305:
 2950              	.L361:
 565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 2951              		.loc 1 565 0
 2952 0020 CA68     		ldr	r2, [r1, #12]
 566:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 2953              		.loc 1 566 0
 2954 0022 019B     		ldr	r3, [sp, #4]
 2955 0024 0133     		adds	r3, r3, #1
 2956              	.LVL306:
 2957 0026 0193     		str	r3, [sp, #4]
 2958              	.LVL307:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 2959              		.loc 1 567 0
 2960 0028 019B     		ldr	r3, [sp, #4]
 2961              	.LVL308:
 565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 2962              		.loc 1 565 0
 2963 002a 02F04002 		and	r2, r2, #64
 2964              	.LVL309:
 567:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 2965              		.loc 1 567 0
 2966 002e B3F5803F 		cmp	r3, #65536
 2967 0032 F4D1     		bne	.L374
 2968              	.L360:
 2969              	.LBB272:
 2970              	.LBB273:
 569:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 2971              		.loc 1 569 0
 2972 0034 0E4B     		ldr	r3, .L375
 2973 0036 DB68     		ldr	r3, [r3, #12]
 2974              	.LVL310:
 2975              	.LBE273:
 2976              	.LBE272:
 2977              	.LBE271:
 2978              	.LBE270:
1802:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2979              		.loc 1 1802 0
 2980 0038 C3F38013 		ubfx	r3, r3, #6, #1
 2981              	.LVL311:
 2982 003c 2BB9     		cbnz	r3, .L363
1804:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status =  ERROR;
 2983              		.loc 1 1804 0
 2984 003e 1846     		mov	r0, r3
 2985              	.LVL312:
 2986              	.L362:
1825:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2987              		.loc 1 1825 0
 2988 0040 FF22     		movs	r2, #255
 2989 0042 0B4B     		ldr	r3, .L375
 2990 0044 5A62     		str	r2, [r3, #36]
1828:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2991              		.loc 1 1828 0
 2992 0046 02B0     		add	sp, sp, #8
 2993 0048 7047     		bx	lr
 2994              	.LVL313:
 2995              	.L363:
1808:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 2996              		.loc 1 1808 0
 2997 004a 58B9     		cbnz	r0, .L358
1816:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
 2998              		.loc 1 1816 0
 2999 004c 084B     		ldr	r3, .L375
 3000 004e 9A68     		ldr	r2, [r3, #8]
 3001 0050 22F08002 		bic	r2, r2, #128
 3002 0054 9A60     		str	r2, [r3, #8]
 3003              	.L364:
 3004              	.LBB274:
 3005              	.LBB275:
 598:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 3006              		.loc 1 598 0
 3007 0056 064B     		ldr	r3, .L375
 3008 0058 DA68     		ldr	r2, [r3, #12]
 3009 005a 22F08002 		bic	r2, r2, #128
 3010 005e DA60     		str	r2, [r3, #12]
 3011              	.LVL314:
1821:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 3012              		.loc 1 1821 0
 3013 0060 0120     		movs	r0, #1
 3014              	.LVL315:
 3015 0062 EDE7     		b	.L362
 3016              	.LVL316:
 3017              	.L358:
 3018              	.LBE275:
 3019              	.LBE274:
1811:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 3020              		.loc 1 1811 0
 3021 0064 024B     		ldr	r3, .L375
 3022 0066 9A68     		ldr	r2, [r3, #8]
 3023 0068 42F08002 		orr	r2, r2, #128
 3024 006c 9A60     		str	r2, [r3, #8]
 3025 006e F2E7     		b	.L364
 3026              	.L376:
 3027              		.align	2
 3028              	.L375:
 3029 0070 00280040 		.word	1073752064
 3030              		.cfi_endproc
 3031              	.LFE140:
 3033              		.section	.text.RTC_CalibOutputCmd,"ax",%progbits
 3034              		.align	2
 3035              		.global	RTC_CalibOutputCmd
 3036              		.thumb
 3037              		.thumb_func
 3039              	RTC_CalibOutputCmd:
 3040              	.LFB141:
1837:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3041              		.loc 1 1837 0
 3042              		.cfi_startproc
 3043              		@ args = 0, pretend = 0, frame = 0
 3044              		@ frame_needed = 0, uses_anonymous_args = 0
 3045              		@ link register save eliminated.
 3046              	.LVL317:
1842:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3047              		.loc 1 1842 0
 3048 0000 084B     		ldr	r3, .L381
 3049 0002 CA22     		movs	r2, #202
 3050 0004 5A62     		str	r2, [r3, #36]
1843:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3051              		.loc 1 1843 0
 3052 0006 5322     		movs	r2, #83
 3053 0008 5A62     		str	r2, [r3, #36]
1848:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 3054              		.loc 1 1848 0
 3055 000a 9A68     		ldr	r2, [r3, #8]
1845:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3056              		.loc 1 1845 0
 3057 000c 30B9     		cbnz	r0, .L380
1853:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 3058              		.loc 1 1853 0
 3059 000e 22F40002 		bic	r2, r2, #8388608
 3060 0012 9A60     		str	r2, [r3, #8]
 3061              	.L379:
1857:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3062              		.loc 1 1857 0
 3063 0014 FF22     		movs	r2, #255
 3064 0016 034B     		ldr	r3, .L381
 3065 0018 5A62     		str	r2, [r3, #36]
 3066 001a 7047     		bx	lr
 3067              	.L380:
1848:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 3068              		.loc 1 1848 0
 3069 001c 42F40002 		orr	r2, r2, #8388608
 3070 0020 9A60     		str	r2, [r3, #8]
 3071 0022 F7E7     		b	.L379
 3072              	.L382:
 3073              		.align	2
 3074              	.L381:
 3075 0024 00280040 		.word	1073752064
 3076              		.cfi_endproc
 3077              	.LFE141:
 3079              		.section	.text.RTC_CalibOutputConfig,"ax",%progbits
 3080              		.align	2
 3081              		.global	RTC_CalibOutputConfig
 3082              		.thumb
 3083              		.thumb_func
 3085              	RTC_CalibOutputConfig:
 3086              	.LFB142:
1869:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3087              		.loc 1 1869 0
 3088              		.cfi_startproc
 3089              		@ args = 0, pretend = 0, frame = 0
 3090              		@ frame_needed = 0, uses_anonymous_args = 0
 3091              		@ link register save eliminated.
 3092              	.LVL318:
1874:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3093              		.loc 1 1874 0
 3094 0000 074B     		ldr	r3, .L384
 3095 0002 CA22     		movs	r2, #202
 3096 0004 5A62     		str	r2, [r3, #36]
1875:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3097              		.loc 1 1875 0
 3098 0006 5322     		movs	r2, #83
 3099 0008 5A62     		str	r2, [r3, #36]
1878:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 3100              		.loc 1 1878 0
 3101 000a 9A68     		ldr	r2, [r3, #8]
 3102 000c 22F40022 		bic	r2, r2, #524288
 3103 0010 9A60     		str	r2, [r3, #8]
1881:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 3104              		.loc 1 1881 0
 3105 0012 9A68     		ldr	r2, [r3, #8]
 3106 0014 1043     		orrs	r0, r0, r2
 3107              	.LVL319:
 3108 0016 9860     		str	r0, [r3, #8]
1884:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 3109              		.loc 1 1884 0
 3110 0018 FF22     		movs	r2, #255
 3111 001a 5A62     		str	r2, [r3, #36]
 3112 001c 7047     		bx	lr
 3113              	.L385:
 3114 001e 00BF     		.align	2
 3115              	.L384:
 3116 0020 00280040 		.word	1073752064
 3117              		.cfi_endproc
 3118              	.LFE142:
 3120              		.section	.text.RTC_SmoothCalibConfig,"ax",%progbits
 3121              		.align	2
 3122              		.global	RTC_SmoothCalibConfig
 3123              		.thumb
 3124              		.thumb_func
 3126              	RTC_SmoothCalibConfig:
 3127              	.LFB143:
1907:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3128              		.loc 1 1907 0
 3129              		.cfi_startproc
 3130              		@ args = 0, pretend = 0, frame = 0
 3131              		@ frame_needed = 0, uses_anonymous_args = 0
 3132              		@ link register save eliminated.
 3133              	.LVL320:
 3134 0000 30B4     		push	{r4, r5}
 3135              	.LCFI19:
 3136              		.cfi_def_cfa_offset 8
 3137              		.cfi_offset 4, -8
 3138              		.cfi_offset 5, -4
 3139              	.LVL321:
1917:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3140              		.loc 1 1917 0
 3141 0002 114D     		ldr	r5, .L402
 3142 0004 CA23     		movs	r3, #202
 3143 0006 6B62     		str	r3, [r5, #36]
1918:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3144              		.loc 1 1918 0
 3145 0008 5323     		movs	r3, #83
 3146 000a 6B62     		str	r3, [r5, #36]
1921:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 3147              		.loc 1 1921 0
 3148 000c EB68     		ldr	r3, [r5, #12]
 3149 000e DC03     		lsls	r4, r3, #15
 3150 0010 0AD5     		bpl	.L387
1924:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 3151              		.loc 1 1924 0 discriminator 1
 3152 0012 EB68     		ldr	r3, [r5, #12]
 3153 0014 DB03     		lsls	r3, r3, #15
 3154 0016 07D5     		bpl	.L387
1924:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 3155              		.loc 1 1924 0 is_stmt 0
 3156 0018 4FF40033 		mov	r3, #131072
 3157 001c 01E0     		b	.L388
 3158              	.LVL322:
 3159              	.L401:
1924:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 3160              		.loc 1 1924 0 discriminator 2
 3161 001e 013B     		subs	r3, r3, #1
 3162 0020 02D0     		beq	.L387
 3163              	.L388:
1924:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 3164              		.loc 1 1924 0
 3165 0022 EC68     		ldr	r4, [r5, #12]
 3166 0024 E403     		lsls	r4, r4, #15
 3167 0026 FAD4     		bmi	.L401
 3168              	.L387:
1931:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 3169              		.loc 1 1931 0 is_stmt 1
 3170 0028 074B     		ldr	r3, .L402
 3171 002a DC68     		ldr	r4, [r3, #12]
 3172 002c 14F4803F 		tst	r4, #65536
 3173 0030 08D1     		bne	.L390
1934:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
 3174              		.loc 1 1934 0
 3175 0032 0843     		orrs	r0, r0, r1
 3176              	.LVL323:
 3177 0034 0243     		orrs	r2, r2, r0
 3178              	.LVL324:
 3179 0036 DA63     		str	r2, [r3, #60]
 3180              	.LVL325:
1936:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 3181              		.loc 1 1936 0
 3182 0038 0120     		movs	r0, #1
 3183              	.LVL326:
 3184              	.L389:
1944:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 3185              		.loc 1 1944 0
 3186 003a FF22     		movs	r2, #255
 3187 003c 024B     		ldr	r3, .L402
 3188 003e 5A62     		str	r2, [r3, #36]
1947:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3189              		.loc 1 1947 0
 3190 0040 30BC     		pop	{r4, r5}
 3191 0042 7047     		bx	lr
 3192              	.LVL327:
 3193              	.L390:
1940:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 3194              		.loc 1 1940 0
 3195 0044 0020     		movs	r0, #0
 3196              	.LVL328:
 3197 0046 F8E7     		b	.L389
 3198              	.L403:
 3199              		.align	2
 3200              	.L402:
 3201 0048 00280040 		.word	1073752064
 3202              		.cfi_endproc
 3203              	.LFE143:
 3205              		.section	.text.RTC_TimeStampCmd,"ax",%progbits
 3206              		.align	2
 3207              		.global	RTC_TimeStampCmd
 3208              		.thumb
 3209              		.thumb_func
 3211              	RTC_TimeStampCmd:
 3212              	.LFB144:
1981:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3213              		.loc 1 1981 0
 3214              		.cfi_startproc
 3215              		@ args = 0, pretend = 0, frame = 0
 3216              		@ frame_needed = 0, uses_anonymous_args = 0
 3217              		@ link register save eliminated.
 3218              	.LVL329:
 3219              	.LVL330:
1989:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 3220              		.loc 1 1989 0
 3221 0000 0A4B     		ldr	r3, .L408
 3222 0002 9B68     		ldr	r3, [r3, #8]
 3223 0004 23F40063 		bic	r3, r3, #2048
 3224 0008 23F00803 		bic	r3, r3, #8
 3225              	.LVL331:
1992:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3226              		.loc 1 1992 0
 3227 000c 49B9     		cbnz	r1, .L407
1998:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 3228              		.loc 1 1998 0
 3229 000e 1843     		orrs	r0, r0, r3
 3230              	.LVL332:
 3231              	.L406:
2002:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3232              		.loc 1 2002 0
 3233 0010 064B     		ldr	r3, .L408
 3234 0012 CA22     		movs	r2, #202
 3235 0014 5A62     		str	r2, [r3, #36]
2003:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3236              		.loc 1 2003 0
 3237 0016 5322     		movs	r2, #83
 3238 0018 5A62     		str	r2, [r3, #36]
2006:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 3239              		.loc 1 2006 0
 3240 001a 9860     		str	r0, [r3, #8]
2009:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3241              		.loc 1 2009 0
 3242 001c FF22     		movs	r2, #255
 3243 001e 5A62     		str	r2, [r3, #36]
 3244 0020 7047     		bx	lr
 3245              	.LVL333:
 3246              	.L407:
1994:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 3247              		.loc 1 1994 0
 3248 0022 43F40063 		orr	r3, r3, #2048
 3249              	.LVL334:
 3250 0026 1843     		orrs	r0, r0, r3
 3251              	.LVL335:
 3252 0028 F2E7     		b	.L406
 3253              	.L409:
 3254 002a 00BF     		.align	2
 3255              	.L408:
 3256 002c 00280040 		.word	1073752064
 3257              		.cfi_endproc
 3258              	.LFE144:
 3260              		.section	.text.RTC_GetTimeStamp,"ax",%progbits
 3261              		.align	2
 3262              		.global	RTC_GetTimeStamp
 3263              		.thumb
 3264              		.thumb_func
 3266              	RTC_GetTimeStamp:
 3267              	.LFB145:
2026:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3268              		.loc 1 2026 0
 3269              		.cfi_startproc
 3270              		@ args = 0, pretend = 0, frame = 0
 3271              		@ frame_needed = 0, uses_anonymous_args = 0
 3272              		@ link register save eliminated.
 3273              	.LVL336:
 3274 0000 2DE9F001 		push	{r4, r5, r6, r7, r8}
 3275              	.LCFI20:
 3276              		.cfi_def_cfa_offset 20
 3277              		.cfi_offset 4, -20
 3278              		.cfi_offset 5, -16
 3279              		.cfi_offset 6, -12
 3280              		.cfi_offset 7, -8
 3281              		.cfi_offset 8, -4
 3282              	.LVL337:
2033:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 3283              		.loc 1 2033 0
 3284 0004 2B4C     		ldr	r4, .L412
 3285 0006 236B     		ldr	r3, [r4, #48]
 3286              	.LVL338:
2034:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 3287              		.loc 1 2034 0
 3288 0008 646B     		ldr	r4, [r4, #52]
 3289              	.LVL339:
2040:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 3290              		.loc 1 2040 0
 3291 000a 03F48007 		and	r7, r3, #4194304
2037:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 3292              		.loc 1 2037 0
 3293 000e C3F30548 		ubfx	r8, r3, #16, #6
2038:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 3294              		.loc 1 2038 0
 3295 0012 C3F3062C 		ubfx	ip, r3, #8, #7
2039:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 3296              		.loc 1 2039 0
 3297 0016 03F07F03 		and	r3, r3, #127
 3298              	.LVL340:
2040:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 3299              		.loc 1 2040 0
 3300 001a 3F0C     		lsrs	r7, r7, #16
2044:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 3301              		.loc 1 2044 0
 3302 001c C4F30426 		ubfx	r6, r4, #8, #5
2045:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 3303              		.loc 1 2045 0
 3304 0020 04F03F05 		and	r5, r4, #63
2046:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 3305              		.loc 1 2046 0
 3306 0024 C4F34234 		ubfx	r4, r4, #13, #3
 3307              	.LVL341:
2037:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 3308              		.loc 1 2037 0
 3309 0028 81F80080 		strb	r8, [r1, #0]
2038:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 3310              		.loc 1 2038 0
 3311 002c 81F801C0 		strb	ip, [r1, #1]
2039:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 3312              		.loc 1 2039 0
 3313 0030 8B70     		strb	r3, [r1, #2]
2040:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 3314              		.loc 1 2040 0
 3315 0032 CF70     		strb	r7, [r1, #3]
2043:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 3316              		.loc 1 2043 0
 3317 0034 0023     		movs	r3, #0
 3318 0036 D370     		strb	r3, [r2, #3]
2044:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 3319              		.loc 1 2044 0
 3320 0038 5670     		strb	r6, [r2, #1]
2045:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 3321              		.loc 1 2045 0
 3322 003a 9570     		strb	r5, [r2, #2]
2046:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 3323              		.loc 1 2046 0
 3324 003c 1470     		strb	r4, [r2, #0]
2049:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 3325              		.loc 1 2049 0
 3326 003e A8BB     		cbnz	r0, .L410
2052:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 3327              		.loc 1 2052 0
 3328 0040 0E78     		ldrb	r6, [r1, #0]	@ zero_extendqisi2
 3329              	.LVL342:
2053:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3330              		.loc 1 2053 0
 3331 0042 4C78     		ldrb	r4, [r1, #1]	@ zero_extendqisi2
 3332              	.LVL343:
2054:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 3333              		.loc 1 2054 0
 3334 0044 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
 3335              	.LVL344:
 3336              	.LBB276:
 3337              	.LBB277:
2743:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 3338              		.loc 1 2743 0
 3339 0046 3709     		lsrs	r7, r6, #4
 3340              	.LBE277:
 3341              	.LBE276:
 3342              	.LBB280:
 3343              	.LBB281:
 3344 0048 2509     		lsrs	r5, r4, #4
 3345              	.LBE281:
 3346              	.LBE280:
 3347              	.LBB284:
 3348              	.LBB285:
 3349 004a 1809     		lsrs	r0, r3, #4
 3350              	.LVL345:
 3351              	.LBE285:
 3352              	.LBE284:
 3353              	.LBB288:
 3354              	.LBB278:
 3355 004c 07EB8707 		add	r7, r7, r7, lsl #2
 3356              		.loc 1 2744 0
 3357 0050 06F00F06 		and	r6, r6, #15
 3358              	.LVL346:
 3359              	.LBE278:
 3360              	.LBE288:
 3361              	.LBB289:
 3362              	.LBB282:
2743:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 3363              		.loc 1 2743 0
 3364 0054 05EB8505 		add	r5, r5, r5, lsl #2
 3365              		.loc 1 2744 0
 3366 0058 04F00F04 		and	r4, r4, #15
 3367              	.LVL347:
 3368              	.LBE282:
 3369              	.LBE289:
 3370              	.LBB290:
 3371              	.LBB286:
2743:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 3372              		.loc 1 2743 0
 3373 005c 00EB8000 		add	r0, r0, r0, lsl #2
 3374              		.loc 1 2744 0
 3375 0060 03F00F03 		and	r3, r3, #15
 3376              	.LVL348:
 3377              	.LBE286:
 3378              	.LBE290:
 3379              	.LBB291:
 3380              	.LBB279:
 3381 0064 06EB4707 		add	r7, r6, r7, lsl #1
 3382              	.LBE279:
 3383              	.LBE291:
 3384              	.LBB292:
 3385              	.LBB283:
 3386 0068 04EB4505 		add	r5, r4, r5, lsl #1
 3387              	.LBE283:
 3388              	.LBE292:
 3389              	.LBB293:
 3390              	.LBB287:
 3391 006c 03EB4000 		add	r0, r3, r0, lsl #1
 3392              	.LBE287:
 3393              	.LBE293:
2052:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 3394              		.loc 1 2052 0
 3395 0070 0F70     		strb	r7, [r1, #0]
2053:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3396              		.loc 1 2053 0
 3397 0072 4D70     		strb	r5, [r1, #1]
2054:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 3398              		.loc 1 2054 0
 3399 0074 8870     		strb	r0, [r1, #2]
2057:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 3400              		.loc 1 2057 0
 3401 0076 5578     		ldrb	r5, [r2, #1]	@ zero_extendqisi2
 3402              	.LVL349:
2058:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 3403              		.loc 1 2058 0
 3404 0078 9078     		ldrb	r0, [r2, #2]	@ zero_extendqisi2
 3405              	.LVL350:
2059:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 3406              		.loc 1 2059 0
 3407 007a 1378     		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 3408              	.LVL351:
 3409              	.LBB294:
 3410              	.LBB295:
2743:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 3411              		.loc 1 2743 0
 3412 007c 2E09     		lsrs	r6, r5, #4
 3413              	.LBE295:
 3414              	.LBE294:
 3415              	.LBB298:
 3416              	.LBB299:
 3417 007e 0409     		lsrs	r4, r0, #4
 3418              	.LBE299:
 3419              	.LBE298:
 3420              	.LBB302:
 3421              	.LBB303:
 3422 0080 1909     		lsrs	r1, r3, #4
 3423              	.LVL352:
 3424              	.LBE303:
 3425              	.LBE302:
 3426              	.LBB306:
 3427              	.LBB296:
 3428 0082 06EB8606 		add	r6, r6, r6, lsl #2
 3429              		.loc 1 2744 0
 3430 0086 05F00F05 		and	r5, r5, #15
 3431              	.LVL353:
 3432              	.LBE296:
 3433              	.LBE306:
 3434              	.LBB307:
 3435              	.LBB300:
2743:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 3436              		.loc 1 2743 0
 3437 008a 04EB8404 		add	r4, r4, r4, lsl #2
 3438              		.loc 1 2744 0
 3439 008e 00F00F00 		and	r0, r0, #15
 3440              	.LVL354:
 3441              	.LBE300:
 3442              	.LBE307:
 3443              	.LBB308:
 3444              	.LBB304:
2743:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 3445              		.loc 1 2743 0
 3446 0092 01EB8101 		add	r1, r1, r1, lsl #2
 3447              		.loc 1 2744 0
 3448 0096 03F00F03 		and	r3, r3, #15
 3449              	.LVL355:
 3450              	.LBE304:
 3451              	.LBE308:
 3452              	.LBB309:
 3453              	.LBB297:
 3454 009a 05EB4606 		add	r6, r5, r6, lsl #1
 3455              	.LBE297:
 3456              	.LBE309:
 3457              	.LBB310:
 3458              	.LBB301:
 3459 009e 00EB4404 		add	r4, r0, r4, lsl #1
 3460              	.LBE301:
 3461              	.LBE310:
 3462              	.LBB311:
 3463              	.LBB305:
 3464 00a2 03EB4101 		add	r1, r3, r1, lsl #1
 3465              	.LBE305:
 3466              	.LBE311:
2057:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 3467              		.loc 1 2057 0
 3468 00a6 5670     		strb	r6, [r2, #1]
2058:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 3469              		.loc 1 2058 0
 3470 00a8 9470     		strb	r4, [r2, #2]
2059:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 3471              		.loc 1 2059 0
 3472 00aa 1170     		strb	r1, [r2, #0]
 3473              	.LVL356:
 3474              	.L410:
2061:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3475              		.loc 1 2061 0
 3476 00ac BDE8F001 		pop	{r4, r5, r6, r7, r8}
 3477 00b0 7047     		bx	lr
 3478              	.L413:
 3479 00b2 00BF     		.align	2
 3480              	.L412:
 3481 00b4 00280040 		.word	1073752064
 3482              		.cfi_endproc
 3483              	.LFE145:
 3485              		.section	.text.RTC_GetTimeStampSubSecond,"ax",%progbits
 3486              		.align	2
 3487              		.global	RTC_GetTimeStampSubSecond
 3488              		.thumb
 3489              		.thumb_func
 3491              	RTC_GetTimeStampSubSecond:
 3492              	.LFB146:
2069:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3493              		.loc 1 2069 0
 3494              		.cfi_startproc
 3495              		@ args = 0, pretend = 0, frame = 0
 3496              		@ frame_needed = 0, uses_anonymous_args = 0
 3497              		@ link register save eliminated.
2071:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 3498              		.loc 1 2071 0
 3499 0000 014B     		ldr	r3, .L415
 3500 0002 986B     		ldr	r0, [r3, #56]
2072:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3501              		.loc 1 2072 0
 3502 0004 7047     		bx	lr
 3503              	.L416:
 3504 0006 00BF     		.align	2
 3505              	.L415:
 3506 0008 00280040 		.word	1073752064
 3507              		.cfi_endproc
 3508              	.LFE146:
 3510              		.section	.text.RTC_TamperTriggerConfig,"ax",%progbits
 3511              		.align	2
 3512              		.global	RTC_TamperTriggerConfig
 3513              		.thumb
 3514              		.thumb_func
 3516              	RTC_TamperTriggerConfig:
 3517              	.LFB147:
2104:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3518              		.loc 1 2104 0
 3519              		.cfi_startproc
 3520              		@ args = 0, pretend = 0, frame = 0
 3521              		@ frame_needed = 0, uses_anonymous_args = 0
 3522              		@ link register save eliminated.
 3523              	.LVL357:
2112:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 3524              		.loc 1 2112 0
 3525 0000 054B     		ldr	r3, .L421
 3526 0002 1A6C     		ldr	r2, [r3, #64]
2109:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 3527              		.loc 1 2109 0
 3528 0004 19B1     		cbz	r1, .L420
2117:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 3529              		.loc 1 2117 0
 3530 0006 42EA4000 		orr	r0, r2, r0, lsl #1
 3531              	.LVL358:
 3532 000a 1864     		str	r0, [r3, #64]
 3533 000c 7047     		bx	lr
 3534              	.LVL359:
 3535              	.L420:
2112:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 3536              		.loc 1 2112 0
 3537 000e 22EA4000 		bic	r0, r2, r0, lsl #1
 3538              	.LVL360:
 3539 0012 1864     		str	r0, [r3, #64]
 3540 0014 7047     		bx	lr
 3541              	.L422:
 3542 0016 00BF     		.align	2
 3543              	.L421:
 3544 0018 00280040 		.word	1073752064
 3545              		.cfi_endproc
 3546              	.LFE147:
 3548              		.section	.text.RTC_TamperCmd,"ax",%progbits
 3549              		.align	2
 3550              		.global	RTC_TamperCmd
 3551              		.thumb
 3552              		.thumb_func
 3554              	RTC_TamperCmd:
 3555              	.LFB148:
2130:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3556              		.loc 1 2130 0
 3557              		.cfi_startproc
 3558              		@ args = 0, pretend = 0, frame = 0
 3559              		@ frame_needed = 0, uses_anonymous_args = 0
 3560              		@ link register save eliminated.
 3561              	.LVL361:
2138:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 3562              		.loc 1 2138 0
 3563 0000 044B     		ldr	r3, .L427
 3564 0002 1A6C     		ldr	r2, [r3, #64]
2135:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3565              		.loc 1 2135 0
 3566 0004 19B9     		cbnz	r1, .L426
2143:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 3567              		.loc 1 2143 0
 3568 0006 22EA0000 		bic	r0, r2, r0
 3569              	.LVL362:
 3570 000a 1864     		str	r0, [r3, #64]
 3571 000c 7047     		bx	lr
 3572              	.LVL363:
 3573              	.L426:
2138:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 3574              		.loc 1 2138 0
 3575 000e 1043     		orrs	r0, r0, r2
 3576              	.LVL364:
 3577 0010 1864     		str	r0, [r3, #64]
 3578 0012 7047     		bx	lr
 3579              	.L428:
 3580              		.align	2
 3581              	.L427:
 3582 0014 00280040 		.word	1073752064
 3583              		.cfi_endproc
 3584              	.LFE148:
 3586              		.section	.text.RTC_TamperFilterConfig,"ax",%progbits
 3587              		.align	2
 3588              		.global	RTC_TamperFilterConfig
 3589              		.thumb
 3590              		.thumb_func
 3592              	RTC_TamperFilterConfig:
 3593              	.LFB149:
2161:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3594              		.loc 1 2161 0
 3595              		.cfi_startproc
 3596              		@ args = 0, pretend = 0, frame = 0
 3597              		@ frame_needed = 0, uses_anonymous_args = 0
 3598              		@ link register save eliminated.
 3599              	.LVL365:
2166:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 3600              		.loc 1 2166 0
 3601 0000 044B     		ldr	r3, .L430
 3602 0002 1A6C     		ldr	r2, [r3, #64]
 3603 0004 22F4C052 		bic	r2, r2, #6144
 3604 0008 1A64     		str	r2, [r3, #64]
2169:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 3605              		.loc 1 2169 0
 3606 000a 1A6C     		ldr	r2, [r3, #64]
 3607 000c 1043     		orrs	r0, r0, r2
 3608              	.LVL366:
 3609 000e 1864     		str	r0, [r3, #64]
 3610 0010 7047     		bx	lr
 3611              	.L431:
 3612 0012 00BF     		.align	2
 3613              	.L430:
 3614 0014 00280040 		.word	1073752064
 3615              		.cfi_endproc
 3616              	.LFE149:
 3618              		.section	.text.RTC_TamperSamplingFreqConfig,"ax",%progbits
 3619              		.align	2
 3620              		.global	RTC_TamperSamplingFreqConfig
 3621              		.thumb
 3622              		.thumb_func
 3624              	RTC_TamperSamplingFreqConfig:
 3625              	.LFB150:
2195:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3626              		.loc 1 2195 0
 3627              		.cfi_startproc
 3628              		@ args = 0, pretend = 0, frame = 0
 3629              		@ frame_needed = 0, uses_anonymous_args = 0
 3630              		@ link register save eliminated.
 3631              	.LVL367:
2200:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 3632              		.loc 1 2200 0
 3633 0000 044B     		ldr	r3, .L433
 3634 0002 1A6C     		ldr	r2, [r3, #64]
 3635 0004 22F4E062 		bic	r2, r2, #1792
 3636 0008 1A64     		str	r2, [r3, #64]
2203:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 3637              		.loc 1 2203 0
 3638 000a 1A6C     		ldr	r2, [r3, #64]
 3639 000c 1043     		orrs	r0, r0, r2
 3640              	.LVL368:
 3641 000e 1864     		str	r0, [r3, #64]
 3642 0010 7047     		bx	lr
 3643              	.L434:
 3644 0012 00BF     		.align	2
 3645              	.L433:
 3646 0014 00280040 		.word	1073752064
 3647              		.cfi_endproc
 3648              	.LFE150:
 3650              		.section	.text.RTC_TamperPinsPrechargeDuration,"ax",%progbits
 3651              		.align	2
 3652              		.global	RTC_TamperPinsPrechargeDuration
 3653              		.thumb
 3654              		.thumb_func
 3656              	RTC_TamperPinsPrechargeDuration:
 3657              	.LFB151:
2218:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3658              		.loc 1 2218 0
 3659              		.cfi_startproc
 3660              		@ args = 0, pretend = 0, frame = 0
 3661              		@ frame_needed = 0, uses_anonymous_args = 0
 3662              		@ link register save eliminated.
 3663              	.LVL369:
2223:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 3664              		.loc 1 2223 0
 3665 0000 044B     		ldr	r3, .L436
 3666 0002 1A6C     		ldr	r2, [r3, #64]
 3667 0004 22F4C042 		bic	r2, r2, #24576
 3668 0008 1A64     		str	r2, [r3, #64]
2226:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 3669              		.loc 1 2226 0
 3670 000a 1A6C     		ldr	r2, [r3, #64]
 3671 000c 1043     		orrs	r0, r0, r2
 3672              	.LVL370:
 3673 000e 1864     		str	r0, [r3, #64]
 3674 0010 7047     		bx	lr
 3675              	.L437:
 3676 0012 00BF     		.align	2
 3677              	.L436:
 3678 0014 00280040 		.word	1073752064
 3679              		.cfi_endproc
 3680              	.LFE151:
 3682              		.section	.text.RTC_TimeStampOnTamperDetectionCmd,"ax",%progbits
 3683              		.align	2
 3684              		.global	RTC_TimeStampOnTamperDetectionCmd
 3685              		.thumb
 3686              		.thumb_func
 3688              	RTC_TimeStampOnTamperDetectionCmd:
 3689              	.LFB152:
2238:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3690              		.loc 1 2238 0
 3691              		.cfi_startproc
 3692              		@ args = 0, pretend = 0, frame = 0
 3693              		@ frame_needed = 0, uses_anonymous_args = 0
 3694              		@ link register save eliminated.
 3695              	.LVL371:
2245:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 3696              		.loc 1 2245 0
 3697 0000 054B     		ldr	r3, .L442
 3698 0002 1A6C     		ldr	r2, [r3, #64]
2242:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3699              		.loc 1 2242 0
 3700 0004 18B9     		cbnz	r0, .L441
2250:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 3701              		.loc 1 2250 0
 3702 0006 22F08002 		bic	r2, r2, #128
 3703 000a 1A64     		str	r2, [r3, #64]
 3704 000c 7047     		bx	lr
 3705              	.L441:
2245:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 3706              		.loc 1 2245 0
 3707 000e 42F08002 		orr	r2, r2, #128
 3708 0012 1A64     		str	r2, [r3, #64]
 3709 0014 7047     		bx	lr
 3710              	.L443:
 3711 0016 00BF     		.align	2
 3712              	.L442:
 3713 0018 00280040 		.word	1073752064
 3714              		.cfi_endproc
 3715              	.LFE152:
 3717              		.section	.text.RTC_TamperPullUpCmd,"ax",%progbits
 3718              		.align	2
 3719              		.global	RTC_TamperPullUpCmd
 3720              		.thumb
 3721              		.thumb_func
 3723              	RTC_TamperPullUpCmd:
 3724              	.LFB153:
2261:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3725              		.loc 1 2261 0
 3726              		.cfi_startproc
 3727              		@ args = 0, pretend = 0, frame = 0
 3728              		@ frame_needed = 0, uses_anonymous_args = 0
 3729              		@ link register save eliminated.
 3730              	.LVL372:
2268:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 3731              		.loc 1 2268 0
 3732 0000 054B     		ldr	r3, .L448
 3733 0002 1A6C     		ldr	r2, [r3, #64]
2265:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
 3734              		.loc 1 2265 0
 3735 0004 18B9     		cbnz	r0, .L447
2273:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 3736              		.loc 1 2273 0
 3737 0006 42F40042 		orr	r2, r2, #32768
 3738 000a 1A64     		str	r2, [r3, #64]
 3739 000c 7047     		bx	lr
 3740              	.L447:
2268:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 3741              		.loc 1 2268 0
 3742 000e 22F40042 		bic	r2, r2, #32768
 3743 0012 1A64     		str	r2, [r3, #64]
 3744 0014 7047     		bx	lr
 3745              	.L449:
 3746 0016 00BF     		.align	2
 3747              	.L448:
 3748 0018 00280040 		.word	1073752064
 3749              		.cfi_endproc
 3750              	.LFE153:
 3752              		.section	.text.RTC_WriteBackupRegister,"ax",%progbits
 3753              		.align	2
 3754              		.global	RTC_WriteBackupRegister
 3755              		.thumb
 3756              		.thumb_func
 3758              	RTC_WriteBackupRegister:
 3759              	.LFB154:
2302:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3760              		.loc 1 2302 0
 3761              		.cfi_startproc
 3762              		@ args = 0, pretend = 0, frame = 8
 3763              		@ frame_needed = 0, uses_anonymous_args = 0
 3764              		@ link register save eliminated.
 3765              	.LVL373:
 3766 0000 82B0     		sub	sp, sp, #8
 3767              	.LCFI21:
 3768              		.cfi_def_cfa_offset 8
2303:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3769              		.loc 1 2303 0
 3770 0002 0023     		movs	r3, #0
 3771 0004 0193     		str	r3, [sp, #4]
 3772              	.LVL374:
2308:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3773              		.loc 1 2308 0
 3774 0006 054B     		ldr	r3, .L451
 3775 0008 0193     		str	r3, [sp, #4]
2309:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3776              		.loc 1 2309 0
 3777 000a 019B     		ldr	r3, [sp, #4]
 3778 000c 03EB8000 		add	r0, r3, r0, lsl #2
 3779              	.LVL375:
 3780 0010 0190     		str	r0, [sp, #4]
 3781              	.LVL376:
2312:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 3782              		.loc 1 2312 0
 3783 0012 019B     		ldr	r3, [sp, #4]
 3784 0014 1960     		str	r1, [r3, #0]
2313:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3785              		.loc 1 2313 0
 3786 0016 02B0     		add	sp, sp, #8
 3787 0018 7047     		bx	lr
 3788              	.L452:
 3789 001a 00BF     		.align	2
 3790              	.L451:
 3791 001c 50280040 		.word	1073752144
 3792              		.cfi_endproc
 3793              	.LFE154:
 3795              		.section	.text.RTC_ReadBackupRegister,"ax",%progbits
 3796              		.align	2
 3797              		.global	RTC_ReadBackupRegister
 3798              		.thumb
 3799              		.thumb_func
 3801              	RTC_ReadBackupRegister:
 3802              	.LFB155:
2323:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3803              		.loc 1 2323 0
 3804              		.cfi_startproc
 3805              		@ args = 0, pretend = 0, frame = 8
 3806              		@ frame_needed = 0, uses_anonymous_args = 0
 3807              		@ link register save eliminated.
 3808              	.LVL377:
 3809 0000 82B0     		sub	sp, sp, #8
 3810              	.LCFI22:
 3811              		.cfi_def_cfa_offset 8
2324:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3812              		.loc 1 2324 0
 3813 0002 0023     		movs	r3, #0
 3814 0004 0193     		str	r3, [sp, #4]
 3815              	.LVL378:
2329:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3816              		.loc 1 2329 0
 3817 0006 054B     		ldr	r3, .L454
 3818 0008 0193     		str	r3, [sp, #4]
2330:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3819              		.loc 1 2330 0
 3820 000a 019B     		ldr	r3, [sp, #4]
 3821 000c 03EB8000 		add	r0, r3, r0, lsl #2
 3822              	.LVL379:
 3823 0010 0190     		str	r0, [sp, #4]
 3824              	.LVL380:
2333:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 3825              		.loc 1 2333 0
 3826 0012 019B     		ldr	r3, [sp, #4]
 3827 0014 1868     		ldr	r0, [r3, #0]
 3828              	.LVL381:
2334:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3829              		.loc 1 2334 0
 3830 0016 02B0     		add	sp, sp, #8
 3831 0018 7047     		bx	lr
 3832              	.L455:
 3833 001a 00BF     		.align	2
 3834              	.L454:
 3835 001c 50280040 		.word	1073752144
 3836              		.cfi_endproc
 3837              	.LFE155:
 3839              		.section	.text.RTC_TamperPinSelection,"ax",%progbits
 3840              		.align	2
 3841              		.global	RTC_TamperPinSelection
 3842              		.thumb
 3843              		.thumb_func
 3845              	RTC_TamperPinSelection:
 3846              	.LFB156:
2363:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3847              		.loc 1 2363 0
 3848              		.cfi_startproc
 3849              		@ args = 0, pretend = 0, frame = 0
 3850              		@ frame_needed = 0, uses_anonymous_args = 0
 3851              		@ link register save eliminated.
 3852              	.LVL382:
2367:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 3853              		.loc 1 2367 0
 3854 0000 044B     		ldr	r3, .L457
 3855 0002 1A6C     		ldr	r2, [r3, #64]
 3856 0004 22F48032 		bic	r2, r2, #65536
 3857 0008 1A64     		str	r2, [r3, #64]
2368:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 3858              		.loc 1 2368 0
 3859 000a 1A6C     		ldr	r2, [r3, #64]
 3860 000c 1043     		orrs	r0, r0, r2
 3861              	.LVL383:
 3862 000e 1864     		str	r0, [r3, #64]
 3863 0010 7047     		bx	lr
 3864              	.L458:
 3865 0012 00BF     		.align	2
 3866              	.L457:
 3867 0014 00280040 		.word	1073752064
 3868              		.cfi_endproc
 3869              	.LFE156:
 3871              		.section	.text.RTC_TimeStampPinSelection,"ax",%progbits
 3872              		.align	2
 3873              		.global	RTC_TimeStampPinSelection
 3874              		.thumb
 3875              		.thumb_func
 3877              	RTC_TimeStampPinSelection:
 3878              	.LFB157:
2380:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3879              		.loc 1 2380 0
 3880              		.cfi_startproc
 3881              		@ args = 0, pretend = 0, frame = 0
 3882              		@ frame_needed = 0, uses_anonymous_args = 0
 3883              		@ link register save eliminated.
 3884              	.LVL384:
2384:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 3885              		.loc 1 2384 0
 3886 0000 044B     		ldr	r3, .L460
 3887 0002 1A6C     		ldr	r2, [r3, #64]
 3888 0004 22F40032 		bic	r2, r2, #131072
 3889 0008 1A64     		str	r2, [r3, #64]
2385:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 3890              		.loc 1 2385 0
 3891 000a 1A6C     		ldr	r2, [r3, #64]
 3892 000c 1043     		orrs	r0, r0, r2
 3893              	.LVL385:
 3894 000e 1864     		str	r0, [r3, #64]
 3895 0010 7047     		bx	lr
 3896              	.L461:
 3897 0012 00BF     		.align	2
 3898              	.L460:
 3899 0014 00280040 		.word	1073752064
 3900              		.cfi_endproc
 3901              	.LFE157:
 3903              		.section	.text.RTC_OutputTypeConfig,"ax",%progbits
 3904              		.align	2
 3905              		.global	RTC_OutputTypeConfig
 3906              		.thumb
 3907              		.thumb_func
 3909              	RTC_OutputTypeConfig:
 3910              	.LFB158:
2399:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3911              		.loc 1 2399 0
 3912              		.cfi_startproc
 3913              		@ args = 0, pretend = 0, frame = 0
 3914              		@ frame_needed = 0, uses_anonymous_args = 0
 3915              		@ link register save eliminated.
 3916              	.LVL386:
2403:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 3917              		.loc 1 2403 0
 3918 0000 044B     		ldr	r3, .L463
 3919 0002 1A6C     		ldr	r2, [r3, #64]
 3920 0004 22F48022 		bic	r2, r2, #262144
 3921 0008 1A64     		str	r2, [r3, #64]
2404:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 3922              		.loc 1 2404 0
 3923 000a 1A6C     		ldr	r2, [r3, #64]
 3924 000c 1043     		orrs	r0, r0, r2
 3925              	.LVL387:
 3926 000e 1864     		str	r0, [r3, #64]
 3927 0010 7047     		bx	lr
 3928              	.L464:
 3929 0012 00BF     		.align	2
 3930              	.L463:
 3931 0014 00280040 		.word	1073752064
 3932              		.cfi_endproc
 3933              	.LFE158:
 3935              		.section	.text.RTC_SynchroShiftConfig,"ax",%progbits
 3936              		.align	2
 3937              		.global	RTC_SynchroShiftConfig
 3938              		.thumb
 3939              		.thumb_func
 3941              	RTC_SynchroShiftConfig:
 3942              	.LFB159:
2437:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3943              		.loc 1 2437 0
 3944              		.cfi_startproc
 3945              		@ args = 0, pretend = 0, frame = 8
 3946              		@ frame_needed = 0, uses_anonymous_args = 0
 3947              		@ link register save eliminated.
 3948              	.LVL388:
 3949 0000 10B4     		push	{r4}
 3950              	.LCFI23:
 3951              		.cfi_def_cfa_offset 4
 3952              		.cfi_offset 4, -4
 3953 0002 83B0     		sub	sp, sp, #12
 3954              	.LCFI24:
 3955              		.cfi_def_cfa_offset 16
 3956              	.LVL389:
2446:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3957              		.loc 1 2446 0
 3958 0004 244C     		ldr	r4, .L498
 3959 0006 CA23     		movs	r3, #202
 3960 0008 6362     		str	r3, [r4, #36]
2447:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3961              		.loc 1 2447 0
 3962 000a 5323     		movs	r3, #83
 3963 000c 6362     		str	r3, [r4, #36]
2450:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 3964              		.loc 1 2450 0
 3965 000e E368     		ldr	r3, [r4, #12]
 3966 0010 1A07     		lsls	r2, r3, #28
 3967 0012 0AD5     		bpl	.L466
2453:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3968              		.loc 1 2453 0 discriminator 1
 3969 0014 E368     		ldr	r3, [r4, #12]
 3970 0016 1B07     		lsls	r3, r3, #28
 3971 0018 07D5     		bpl	.L466
2453:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3972              		.loc 1 2453 0 is_stmt 0
 3973 001a 4FF48053 		mov	r3, #4096
 3974 001e 01E0     		b	.L467
 3975              	.LVL390:
 3976              	.L494:
2453:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3977              		.loc 1 2453 0 discriminator 2
 3978 0020 013B     		subs	r3, r3, #1
 3979 0022 02D0     		beq	.L466
 3980              	.L467:
2453:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3981              		.loc 1 2453 0
 3982 0024 E268     		ldr	r2, [r4, #12]
 3983 0026 1207     		lsls	r2, r2, #28
 3984 0028 FAD4     		bmi	.L494
 3985              	.L466:
2460:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 3986              		.loc 1 2460 0 is_stmt 1
 3987 002a 1B4B     		ldr	r3, .L498
 3988 002c DA68     		ldr	r2, [r3, #12]
 3989 002e 12F00802 		ands	r2, r2, #8
 3990 0032 2AD1     		bne	.L473
2463:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 3991              		.loc 1 2463 0
 3992 0034 9C68     		ldr	r4, [r3, #8]
 3993 0036 14F01004 		ands	r4, r4, #16
 3994 003a 06D0     		beq	.L495
2484:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 3995              		.loc 1 2484 0
 3996 003c 1046     		mov	r0, r2
 3997              	.LVL391:
 3998              	.L468:
2488:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 3999              		.loc 1 2488 0
 4000 003e FF22     		movs	r2, #255
 4001 0040 154B     		ldr	r3, .L498
 4002 0042 5A62     		str	r2, [r3, #36]
2491:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4003              		.loc 1 2491 0
 4004 0044 03B0     		add	sp, sp, #12
 4005 0046 10BC     		pop	{r4}
 4006 0048 7047     		bx	lr
 4007              	.LVL392:
 4008              	.L495:
2466:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 4009              		.loc 1 2466 0
 4010 004a 0143     		orrs	r1, r1, r0
 4011              	.LVL393:
 4012 004c D962     		str	r1, [r3, #44]
 4013              	.LBB314:
 4014              	.LBB315:
 619:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 4015              		.loc 1 619 0
 4016 004e 0194     		str	r4, [sp, #4]
 4017              	.LVL394:
 624:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 4018              		.loc 1 624 0
 4019 0050 CA22     		movs	r2, #202
 4020 0052 5A62     		str	r2, [r3, #36]
 625:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 4021              		.loc 1 625 0
 4022 0054 5322     		movs	r2, #83
 4023 0056 5A62     		str	r2, [r3, #36]
 628:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 4024              		.loc 1 628 0
 4025 0058 DA68     		ldr	r2, [r3, #12]
 4026 005a 22F0A002 		bic	r2, r2, #160
 4027 005e DA60     		str	r2, [r3, #12]
 633:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 4028              		.loc 1 633 0
 4029 0060 1946     		mov	r1, r3
 4030 0062 00E0     		b	.L470
 4031              	.LVL395:
 4032              	.L496:
 635:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 4033              		.loc 1 635 0
 4034 0064 4AB9     		cbnz	r2, .L469
 4035              	.LVL396:
 4036              	.L470:
 633:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 4037              		.loc 1 633 0
 4038 0066 CA68     		ldr	r2, [r1, #12]
 634:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 4039              		.loc 1 634 0
 4040 0068 019B     		ldr	r3, [sp, #4]
 4041 006a 0133     		adds	r3, r3, #1
 4042              	.LVL397:
 4043 006c 0193     		str	r3, [sp, #4]
 4044              	.LVL398:
 635:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 4045              		.loc 1 635 0
 4046 006e 019B     		ldr	r3, [sp, #4]
 4047              	.LVL399:
 633:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 4048              		.loc 1 633 0
 4049 0070 02F02002 		and	r2, r2, #32
 4050              	.LVL400:
 635:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 4051              		.loc 1 635 0
 4052 0074 B3F5003F 		cmp	r3, #131072
 4053 0078 F4D1     		bne	.L496
 4054              	.L469:
 637:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 4055              		.loc 1 637 0
 4056 007a 074B     		ldr	r3, .L498
 4057 007c D868     		ldr	r0, [r3, #12]
 4058              	.LVL401:
 4059 007e 10F02000 		ands	r0, r0, #32
 4060 0082 04D1     		bne	.L497
 647:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 4061              		.loc 1 647 0
 4062 0084 FF22     		movs	r2, #255
 4063              	.LVL402:
 4064 0086 5A62     		str	r2, [r3, #36]
 4065 0088 D9E7     		b	.L468
 4066              	.LVL403:
 4067              	.L473:
 4068              	.LBE315:
 4069              	.LBE314:
2484:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 4070              		.loc 1 2484 0
 4071 008a 0020     		movs	r0, #0
 4072              	.LVL404:
 4073 008c D7E7     		b	.L468
 4074              	.LVL405:
 4075              	.L497:
 4076              	.LBB317:
 4077              	.LBB316:
 647:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 4078              		.loc 1 647 0
 4079 008e FF22     		movs	r2, #255
 4080              	.LVL406:
 4081 0090 5A62     		str	r2, [r3, #36]
2474:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 4082              		.loc 1 2474 0
 4083 0092 0120     		movs	r0, #1
 4084 0094 D3E7     		b	.L468
 4085              	.L499:
 4086 0096 00BF     		.align	2
 4087              	.L498:
 4088 0098 00280040 		.word	1073752064
 4089              	.LBE316:
 4090              	.LBE317:
 4091              		.cfi_endproc
 4092              	.LFE159:
 4094              		.section	.text.RTC_ITConfig,"ax",%progbits
 4095              		.align	2
 4096              		.global	RTC_ITConfig
 4097              		.thumb
 4098              		.thumb_func
 4100              	RTC_ITConfig:
 4101              	.LFB160:
2556:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4102              		.loc 1 2556 0
 4103              		.cfi_startproc
 4104              		@ args = 0, pretend = 0, frame = 0
 4105              		@ frame_needed = 0, uses_anonymous_args = 0
 4106              		@ link register save eliminated.
 4107              	.LVL407:
2562:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 4108              		.loc 1 2562 0
 4109 0000 0F4B     		ldr	r3, .L504
 4110 0002 CA22     		movs	r2, #202
 4111 0004 5A62     		str	r2, [r3, #36]
2563:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 4112              		.loc 1 2563 0
 4113 0006 5322     		movs	r2, #83
 4114 0008 5A62     		str	r2, [r3, #36]
2568:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 4115              		.loc 1 2568 0
 4116 000a 9A68     		ldr	r2, [r3, #8]
2565:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 4117              		.loc 1 2565 0
 4118 000c 71B9     		cbnz	r1, .L503
2575:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 4119              		.loc 1 2575 0
 4120 000e 20F00401 		bic	r1, r0, #4
 4121              	.LVL408:
 4122 0012 22EA0102 		bic	r2, r2, r1
 4123 0016 9A60     		str	r2, [r3, #8]
2577:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 4124              		.loc 1 2577 0
 4125 0018 1A6C     		ldr	r2, [r3, #64]
 4126 001a 00F00400 		and	r0, r0, #4
 4127              	.LVL409:
 4128 001e 22EA0000 		bic	r0, r2, r0
 4129 0022 1864     		str	r0, [r3, #64]
 4130              	.L502:
2580:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 4131              		.loc 1 2580 0
 4132 0024 FF22     		movs	r2, #255
 4133 0026 064B     		ldr	r3, .L504
 4134 0028 5A62     		str	r2, [r3, #36]
 4135 002a 7047     		bx	lr
 4136              	.LVL410:
 4137              	.L503:
2568:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 4138              		.loc 1 2568 0
 4139 002c 20F00401 		bic	r1, r0, #4
 4140              	.LVL411:
 4141 0030 0A43     		orrs	r2, r2, r1
 4142 0032 9A60     		str	r2, [r3, #8]
2570:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 4143              		.loc 1 2570 0
 4144 0034 1A6C     		ldr	r2, [r3, #64]
 4145 0036 00F00400 		and	r0, r0, #4
 4146              	.LVL412:
 4147 003a 1043     		orrs	r0, r0, r2
 4148 003c 1864     		str	r0, [r3, #64]
 4149 003e F1E7     		b	.L502
 4150              	.L505:
 4151              		.align	2
 4152              	.L504:
 4153 0040 00280040 		.word	1073752064
 4154              		.cfi_endproc
 4155              	.LFE160:
 4157              		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 4158              		.align	2
 4159              		.global	RTC_GetFlagStatus
 4160              		.thumb
 4161              		.thumb_func
 4163              	RTC_GetFlagStatus:
 4164              	.LFB161:
2604:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4165              		.loc 1 2604 0
 4166              		.cfi_startproc
 4167              		@ args = 0, pretend = 0, frame = 0
 4168              		@ frame_needed = 0, uses_anonymous_args = 0
 4169              		@ link register save eliminated.
 4170              	.LVL413:
 4171              	.LVL414:
2612:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 4172              		.loc 1 2612 0
 4173 0000 044B     		ldr	r3, .L507
 4174 0002 054A     		ldr	r2, .L507+4
 4175 0004 D268     		ldr	r2, [r2, #12]
 4176              	.LVL415:
 4177 0006 1340     		ands	r3, r3, r2
 4178              	.LVL416:
2615:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 4179              		.loc 1 2615 0
 4180 0008 0342     		tst	r3, r0
2624:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4181              		.loc 1 2624 0
 4182 000a 0CBF     		ite	eq
 4183 000c 0020     		moveq	r0, #0
 4184 000e 0120     		movne	r0, #1
 4185              	.LVL417:
 4186 0010 7047     		bx	lr
 4187              	.L508:
 4188 0012 00BF     		.align	2
 4189              	.L507:
 4190 0014 7F3F0100 		.word	81791
 4191 0018 00280040 		.word	1073752064
 4192              		.cfi_endproc
 4193              	.LFE161:
 4195              		.section	.text.RTC_ClearFlag,"ax",%progbits
 4196              		.align	2
 4197              		.global	RTC_ClearFlag
 4198              		.thumb
 4199              		.thumb_func
 4201              	RTC_ClearFlag:
 4202              	.LFB162:
2640:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4203              		.loc 1 2640 0
 4204              		.cfi_startproc
 4205              		@ args = 0, pretend = 0, frame = 0
 4206              		@ frame_needed = 0, uses_anonymous_args = 0
 4207              		@ link register save eliminated.
 4208              	.LVL418:
2645:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
 4209              		.loc 1 2645 0
 4210 0000 054B     		ldr	r3, .L510
 4211 0002 DA68     		ldr	r2, [r3, #12]
 4212 0004 80B2     		uxth	r0, r0
 4213              	.LVL419:
 4214 0006 40F08000 		orr	r0, r0, #128
 4215 000a 02F08002 		and	r2, r2, #128
 4216 000e 62EA0002 		orn	r2, r2, r0
 4217 0012 DA60     		str	r2, [r3, #12]
 4218 0014 7047     		bx	lr
 4219              	.L511:
 4220 0016 00BF     		.align	2
 4221              	.L510:
 4222 0018 00280040 		.word	1073752064
 4223              		.cfi_endproc
 4224              	.LFE162:
 4226              		.section	.text.RTC_GetITStatus,"ax",%progbits
 4227              		.align	2
 4228              		.global	RTC_GetITStatus
 4229              		.thumb
 4230              		.thumb_func
 4232              	RTC_GetITStatus:
 4233              	.LFB163:
2660:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4234              		.loc 1 2660 0
 4235              		.cfi_startproc
 4236              		@ args = 0, pretend = 0, frame = 0
 4237              		@ frame_needed = 0, uses_anonymous_args = 0
 4238              		@ link register save eliminated.
 4239              	.LVL420:
 4240 0000 10B4     		push	{r4}
 4241              	.LCFI25:
 4242              		.cfi_def_cfa_offset 4
 4243              		.cfi_offset 4, -4
 4244              	.LVL421:
2668:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 4245              		.loc 1 2668 0
 4246 0002 0B4B     		ldr	r3, .L515
 4247 0004 1A6C     		ldr	r2, [r3, #64]
 4248              	.LVL422:
2671:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 4249              		.loc 1 2671 0
 4250 0006 9968     		ldr	r1, [r3, #8]
2674:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 4251              		.loc 1 2674 0
 4252 0008 DC68     		ldr	r4, [r3, #12]
 4253              	.LVL423:
2668:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 4254              		.loc 1 2668 0
 4255 000a 02F00402 		and	r2, r2, #4
 4256              	.LVL424:
2671:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 4257              		.loc 1 2671 0
 4258 000e 02EAD032 		and	r2, r2, r0, lsr #15
 4259 0012 00EA0103 		and	r3, r0, r1
2677:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 4260              		.loc 1 2677 0
 4261 0016 1343     		orrs	r3, r2, r3
 4262 0018 07D0     		beq	.L514
2674:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 4263              		.loc 1 2674 0 discriminator 1
 4264 001a A4B2     		uxth	r4, r4
 4265              	.LVL425:
2677:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 4266              		.loc 1 2677 0 discriminator 1
 4267 001c 14EA1014 		ands	r4, r4, r0, lsr #4
2679:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4268              		.loc 1 2679 0 discriminator 1
 4269 0020 0CBF     		ite	eq
 4270 0022 0020     		moveq	r0, #0
 4271 0024 0120     		movne	r0, #1
 4272              	.LVL426:
 4273              	.L513:
2686:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4274              		.loc 1 2686 0
 4275 0026 10BC     		pop	{r4}
 4276 0028 7047     		bx	lr
 4277              	.LVL427:
 4278              	.L514:
2683:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4279              		.loc 1 2683 0
 4280 002a 1846     		mov	r0, r3
 4281              	.LVL428:
 4282 002c FBE7     		b	.L513
 4283              	.L516:
 4284 002e 00BF     		.align	2
 4285              	.L515:
 4286 0030 00280040 		.word	1073752064
 4287              		.cfi_endproc
 4288              	.LFE163:
 4290              		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 4291              		.align	2
 4292              		.global	RTC_ClearITPendingBit
 4293              		.thumb
 4294              		.thumb_func
 4296              	RTC_ClearITPendingBit:
 4297              	.LFB164:
2700:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4298              		.loc 1 2700 0
 4299              		.cfi_startproc
 4300              		@ args = 0, pretend = 0, frame = 0
 4301              		@ frame_needed = 0, uses_anonymous_args = 0
 4302              		@ link register save eliminated.
 4303              	.LVL429:
 4304              	.LVL430:
2710:../../lib/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 4305              		.loc 1 2710 0
 4306 0000 054B     		ldr	r3, .L518
 4307 0002 DA68     		ldr	r2, [r3, #12]
 4308 0004 C0F30F10 		ubfx	r0, r0, #4, #16
 4309              	.LVL431:
 4310 0008 40F08000 		orr	r0, r0, #128
 4311 000c 02F08002 		and	r2, r2, #128
 4312 0010 62EA0002 		orn	r2, r2, r0
 4313 0014 DA60     		str	r2, [r3, #12]
 4314 0016 7047     		bx	lr
 4315              	.L519:
 4316              		.align	2
 4317              	.L518:
 4318 0018 00280040 		.word	1073752064
 4319              		.cfi_endproc
 4320              	.LFE164:
 4322              		.text
 4323              	.Letext0:
 4324              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 4325              		.file 3 "../../lib/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 4326              		.file 4 "../../lib/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rtc.h"
 4327              		.file 5 "../../lib/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rtc.c
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:17     .text.RTC_DeInit:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:22     .text.RTC_DeInit:00000000 RTC_DeInit
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:239    .text.RTC_DeInit:000000e4 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:247    .text.RTC_Init:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:252    .text.RTC_Init:00000000 RTC_Init
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:370    .text.RTC_Init:00000078 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:375    .text.RTC_StructInit:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:380    .text.RTC_StructInit:00000000 RTC_StructInit
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:398    .text.RTC_WriteProtectionCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:403    .text.RTC_WriteProtectionCmd:00000000 RTC_WriteProtectionCmd
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:430    .text.RTC_WriteProtectionCmd:00000018 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:435    .text.RTC_EnterInitMode:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:440    .text.RTC_EnterInitMode:00000000 RTC_EnterInitMode
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:510    .text.RTC_EnterInitMode:0000003c $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:515    .text.RTC_ExitInitMode:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:520    .text.RTC_ExitInitMode:00000000 RTC_ExitInitMode
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:536    .text.RTC_ExitInitMode:0000000c $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:541    .text.RTC_WaitForSynchro:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:546    .text.RTC_WaitForSynchro:00000000 RTC_WaitForSynchro
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:613    .text.RTC_WaitForSynchro:00000040 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:618    .text.RTC_RefClockCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:623    .text.RTC_RefClockCmd:00000000 RTC_RefClockCmd
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:740    .text.RTC_RefClockCmd:00000070 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:745    .text.RTC_BypassShadowCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:750    .text.RTC_BypassShadowCmd:00000000 RTC_BypassShadowCmd
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:786    .text.RTC_BypassShadowCmd:00000024 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:791    .text.RTC_SetTime:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:796    .text.RTC_SetTime:00000000 RTC_SetTime
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:1133   .text.RTC_SetTime:00000148 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:1140   .text.RTC_TimeStructInit:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:1145   .text.RTC_TimeStructInit:00000000 RTC_TimeStructInit
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:1167   .text.RTC_GetTime:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:1172   .text.RTC_GetTime:00000000 RTC_GetTime
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:1289   .text.RTC_GetTime:00000060 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:1294   .text.RTC_GetSubSecond:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:1299   .text.RTC_GetSubSecond:00000000 RTC_GetSubSecond
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:1318   .text.RTC_GetSubSecond:00000008 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:1323   .text.RTC_SetDate:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:1328   .text.RTC_SetDate:00000000 RTC_SetDate
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:1661   .text.RTC_SetDate:00000140 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:1668   .text.RTC_DateStructInit:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:1673   .text.RTC_DateStructInit:00000000 RTC_DateStructInit
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:1696   .text.RTC_GetDate:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:1701   .text.RTC_GetDate:00000000 RTC_GetDate
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:1822   .text.RTC_GetDate:0000005c $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:1827   .text.RTC_SetAlarm:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:1832   .text.RTC_SetAlarm:00000000 RTC_SetAlarm
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2084   .text.RTC_SetAlarm:000000f0 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2091   .text.RTC_AlarmStructInit:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2096   .text.RTC_AlarmStructInit:00000000 RTC_AlarmStructInit
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2119   .text.RTC_GetAlarm:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2124   .text.RTC_GetAlarm:00000000 RTC_GetAlarm
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2288   .text.RTC_GetAlarm:000000a4 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2293   .text.RTC_AlarmCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2298   .text.RTC_AlarmCmd:00000000 RTC_AlarmCmd
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2388   .text.RTC_AlarmCmd:00000054 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2393   .text.RTC_AlarmSubSecondConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2398   .text.RTC_AlarmSubSecondConfig:00000000 RTC_AlarmSubSecondConfig
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2439   .text.RTC_AlarmSubSecondConfig:00000024 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2444   .text.RTC_GetAlarmSubSecond:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2449   .text.RTC_GetAlarmSubSecond:00000000 RTC_GetAlarmSubSecond
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2476   .text.RTC_GetAlarmSubSecond:00000014 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2481   .text.RTC_WakeUpClockConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2486   .text.RTC_WakeUpClockConfig:00000000 RTC_WakeUpClockConfig
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2517   .text.RTC_WakeUpClockConfig:00000020 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2522   .text.RTC_SetWakeUpCounter:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2527   .text.RTC_SetWakeUpCounter:00000000 RTC_SetWakeUpCounter
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2551   .text.RTC_SetWakeUpCounter:00000014 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2556   .text.RTC_GetWakeUpCounter:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2561   .text.RTC_GetWakeUpCounter:00000000 RTC_GetWakeUpCounter
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2577   .text.RTC_GetWakeUpCounter:00000008 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2582   .text.RTC_WakeUpCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2587   .text.RTC_WakeUpCmd:00000000 RTC_WakeUpCmd
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2670   .text.RTC_WakeUpCmd:00000050 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2675   .text.RTC_DayLightSavingConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2680   .text.RTC_DayLightSavingConfig:00000000 RTC_DayLightSavingConfig
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2713   .text.RTC_DayLightSavingConfig:00000020 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2718   .text.RTC_GetStoreOperation:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2723   .text.RTC_GetStoreOperation:00000000 RTC_GetStoreOperation
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2739   .text.RTC_GetStoreOperation:0000000c $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2744   .text.RTC_OutputConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2749   .text.RTC_OutputConfig:00000000 RTC_OutputConfig
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2782   .text.RTC_OutputConfig:00000020 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2787   .text.RTC_CoarseCalibConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2792   .text.RTC_CoarseCalibConfig:00000000 RTC_CoarseCalibConfig
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2902   .text.RTC_CoarseCalibConfig:00000060 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2907   .text.RTC_CoarseCalibCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:2912   .text.RTC_CoarseCalibCmd:00000000 RTC_CoarseCalibCmd
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3029   .text.RTC_CoarseCalibCmd:00000070 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3034   .text.RTC_CalibOutputCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3039   .text.RTC_CalibOutputCmd:00000000 RTC_CalibOutputCmd
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3075   .text.RTC_CalibOutputCmd:00000024 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3080   .text.RTC_CalibOutputConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3085   .text.RTC_CalibOutputConfig:00000000 RTC_CalibOutputConfig
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3116   .text.RTC_CalibOutputConfig:00000020 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3121   .text.RTC_SmoothCalibConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3126   .text.RTC_SmoothCalibConfig:00000000 RTC_SmoothCalibConfig
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3201   .text.RTC_SmoothCalibConfig:00000048 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3206   .text.RTC_TimeStampCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3211   .text.RTC_TimeStampCmd:00000000 RTC_TimeStampCmd
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3256   .text.RTC_TimeStampCmd:0000002c $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3261   .text.RTC_GetTimeStamp:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3266   .text.RTC_GetTimeStamp:00000000 RTC_GetTimeStamp
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3481   .text.RTC_GetTimeStamp:000000b4 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3486   .text.RTC_GetTimeStampSubSecond:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3491   .text.RTC_GetTimeStampSubSecond:00000000 RTC_GetTimeStampSubSecond
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3506   .text.RTC_GetTimeStampSubSecond:00000008 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3511   .text.RTC_TamperTriggerConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3516   .text.RTC_TamperTriggerConfig:00000000 RTC_TamperTriggerConfig
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3544   .text.RTC_TamperTriggerConfig:00000018 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3549   .text.RTC_TamperCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3554   .text.RTC_TamperCmd:00000000 RTC_TamperCmd
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3582   .text.RTC_TamperCmd:00000014 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3587   .text.RTC_TamperFilterConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3592   .text.RTC_TamperFilterConfig:00000000 RTC_TamperFilterConfig
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3614   .text.RTC_TamperFilterConfig:00000014 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3619   .text.RTC_TamperSamplingFreqConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3624   .text.RTC_TamperSamplingFreqConfig:00000000 RTC_TamperSamplingFreqConfig
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3646   .text.RTC_TamperSamplingFreqConfig:00000014 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3651   .text.RTC_TamperPinsPrechargeDuration:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3656   .text.RTC_TamperPinsPrechargeDuration:00000000 RTC_TamperPinsPrechargeDuration
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3678   .text.RTC_TamperPinsPrechargeDuration:00000014 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3683   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3688   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 RTC_TimeStampOnTamperDetectionCmd
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3713   .text.RTC_TimeStampOnTamperDetectionCmd:00000018 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3718   .text.RTC_TamperPullUpCmd:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3723   .text.RTC_TamperPullUpCmd:00000000 RTC_TamperPullUpCmd
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3748   .text.RTC_TamperPullUpCmd:00000018 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3753   .text.RTC_WriteBackupRegister:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3758   .text.RTC_WriteBackupRegister:00000000 RTC_WriteBackupRegister
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3791   .text.RTC_WriteBackupRegister:0000001c $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3796   .text.RTC_ReadBackupRegister:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3801   .text.RTC_ReadBackupRegister:00000000 RTC_ReadBackupRegister
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3835   .text.RTC_ReadBackupRegister:0000001c $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3840   .text.RTC_TamperPinSelection:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3845   .text.RTC_TamperPinSelection:00000000 RTC_TamperPinSelection
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3867   .text.RTC_TamperPinSelection:00000014 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3872   .text.RTC_TimeStampPinSelection:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3877   .text.RTC_TimeStampPinSelection:00000000 RTC_TimeStampPinSelection
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3899   .text.RTC_TimeStampPinSelection:00000014 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3904   .text.RTC_OutputTypeConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3909   .text.RTC_OutputTypeConfig:00000000 RTC_OutputTypeConfig
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3931   .text.RTC_OutputTypeConfig:00000014 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3936   .text.RTC_SynchroShiftConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:3941   .text.RTC_SynchroShiftConfig:00000000 RTC_SynchroShiftConfig
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:4088   .text.RTC_SynchroShiftConfig:00000098 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:4095   .text.RTC_ITConfig:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:4100   .text.RTC_ITConfig:00000000 RTC_ITConfig
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:4153   .text.RTC_ITConfig:00000040 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:4158   .text.RTC_GetFlagStatus:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:4163   .text.RTC_GetFlagStatus:00000000 RTC_GetFlagStatus
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:4190   .text.RTC_GetFlagStatus:00000014 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:4196   .text.RTC_ClearFlag:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:4201   .text.RTC_ClearFlag:00000000 RTC_ClearFlag
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:4222   .text.RTC_ClearFlag:00000018 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:4227   .text.RTC_GetITStatus:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:4232   .text.RTC_GetITStatus:00000000 RTC_GetITStatus
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:4286   .text.RTC_GetITStatus:00000030 $d
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:4291   .text.RTC_ClearITPendingBit:00000000 $t
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:4296   .text.RTC_ClearITPendingBit:00000000 RTC_ClearITPendingBit
C:\Users\root\AppData\Local\Temp\ccaBYp7u.s:4318   .text.RTC_ClearITPendingBit:00000018 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
